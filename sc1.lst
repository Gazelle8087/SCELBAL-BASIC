 AS V1.42 Beta [Bld 271] - Source File sc1.asm - Page 1 - 6/5/2025 19:34:55


    1/   0 :                            ;	SCELBAL BASIC i8008 program loader for generic MS-DOS
    2/   0 :                            ;
    3/   0 :                            ;Gazelle states the copyright about;
    4/   0 :                            ;Converted old 8008 mnemonics to new 8008 mnemonics.
    5/   0 :                            ;Added IO routines to match the specifications of the DOS loader.
    6/   0 :                            ;Added startup and IO routines to run on CP/M running an 8080.
    7/   0 :                            ;
    8/   0 :                            ;	Copyright (C) 2025 by Gazelle
    9/   0 :                            ;
   10/   0 :                            ;Permission is hereby granted, free of charge, to any person
   11/   0 :                            ;obtaining a copy of this software and associated documentation
   12/   0 :                            ;files (the "Software"), to deal in the Software without
   13/   0 :                            ;restriction, including without limitation the rights to use,
   14/   0 :                            ;copy, modify, merge, publish, distribute, sublicense, and/or sell
   15/   0 :                            ;copies of the Software, and to permit persons to whom the
   16/   0 :                            ;Software is furnished to do so, subject to the following
   17/   0 :                            ;conditions:
   18/   0 :                            ;
   19/   0 :                            ;The above copyright notice and this permission notice shall be
   20/   0 :                            ;included in all copies or substantial portions of the Software.
   21/   0 :                            ;
   22/   0 :                            ;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   23/   0 :                            ;EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
   24/   0 :                            ;OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   25/   0 :                            ;NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   26/   0 :                            ;HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   27/   0 :                            ;WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   28/   0 :                            ;FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   29/   0 :                            ;OTHER DEALINGS IN THE SOFTWARE.
   30/   0 :                            ;
   31/   0 :                            ;Repository https://github.com/Gazelle8087/SCELVAL-BASIC
   32/   0 :                            ;original source for SVELVAL BASIC is available here under
   33/   0 :                            ;https://www.willegal.net/scelbi/the8008andScelbi.html
   34/   0 :                            ;
   35/   0 :                            ;2025/6/5 Rev. 1.00 Initial release
   36/   0 :                            ;
   37/   0 :                            ;;; This is the Scelbi Basic Program from 1974 known as
   38/   0 :                            ;;; SCELBAL by Mark G. Arnold (MGA) and Nat Wadsworth  
   39/   0 :                            ;;;
   40/   0 :                            ;;;  Copyright 1975 Scelbi Computer Consulting, Inc.
   41/   0 :                            ;;;  All rights reserved
   42/   0 :                            ;;;
   43/   0 :                            ;;; MGA gives permission to use SCELBAL for 
   44/   0 :                            ;;; educational, historical, non-commercial purposes.
   45/   0 :                            ;;; Versions of this have been circulating on the web since
   46/   0 :                            ;;; about 2000; this version is authorized by MGA (Mar 2012)
   47/   0 :                            ;;; with the understanding no warranty is expressed or implied.
   48/   0 :                            ;;; As stated in the original, "no responsibility is assumed for
   49/   0 :                            ;;; for inaccuracies or for the success or failure of
   50/   0 :                            ;;; various applications to which the information herein
   51/   0 :                            ;;; may be applied."
   52/   0 :                            ;;; 
   53/   0 :                            ;;; SCELBAL is the only open-source, floating-point 
   54/   0 :                            ;;; high-level language ever implemented on Intel's first
   55/   0 :                            ;;; general-purpose microprocessor, the 8008.  It was
   56/   0 :                            ;;; published in book form:
   57/   0 :                            ;;;
   58/   0 :                            ;;;  SCELBAL: A Higher-Level Language for 8008/8080 Systems
   59/   0 :                            ;;;
   60/   0 :                            ;;; (Tiny BASIC only used 16-bit integers; the MCM\70
 AS V1.42 Beta [Bld 271] - Source File sc1.asm - Page 2 - 6/5/2025 19:34:55


   61/   0 :                            ;;; was a closed system; calculators implemented with 8008
   62/   0 :                            ;;; were floating-point, but not high-level.)
   63/   0 :                            ;;;
   64/   0 :                            ;;; This version is modified to assemble with the
   65/   0 :                            ;;; as8 assembler (using the -octal option) 
   66/   0 :                            ;;; for the Intel 8008 by Thomas E. Jones.
   67/   0 :                            ;;; This current form is made up non-relocatable so that
   68/   0 :                            ;;; locations of all code and data is identical to the
   69/   0 :                            ;;; original SCELBAL documents and patches.  It should be
   70/   0 :                            ;;; reasonable after debugging code to convert this to a
   71/   0 :                            ;;; relocatable and ROMable code with variables in RAM.
   72/   0 :                            ;;; This code originates from a version made by 
   73/   0 :                            ;;;
   74/   0 :                            ;;;    Steve Loboyko in 2001.
   75/   0 :                            ;;;
   76/   0 :                            ;;; This version has all 3 patches for SCELBAL (the two
   77/   0 :                            ;;; pasted in the original manual, and a third which was
   78/   0 :                            ;;; written in SCELBAL UPDATE publication, as well as
   79/   0 :                            ;;; a couple changes to constants which didn't actually
   80/   0 :                            ;;; require a patch, just changes to bytes of data or
   81/   0 :                            ;;; arguments to an instruction--one of these (Tucker) was 
   82/   0 :                            ;;; incorrect and restored to original by MGA March 2012).
   83/   0 :                            ;;; 
   84/   0 :                            ;;; This comment must be incorporated with any version of SCELBAL
   85/   0 :                            ;;; downloaded, distributed, posted or disemenated.
   86/   0 :                            
   87/   0 : =$0                        FOR8080	EQU	0		;switch to 1 for 8080CPU and CP/M
   88/   0 :                            
   89/   0 : =>FALSE                     IF FOR8080
   90/   0 :                            		CPU	8080
   91/   0 :                            FOR8008		EQU	0
   92/   0 : =>TRUE                      ELSE
   93/   0 :                            		CPU	8008new
   94/   0 : =1H                        FOR8008		EQU	1
   95/   0 : [89]                        ENDIF
   96/   0 :                            		page	0,100
   97/   0 :                            
   98/   0 : =2DH                       ENDPGRAM	EQU	055o	;MGA 4/10/12 as in orig; for his ROMable Loboyko said 077       [077]
   99/   0 : =1BH                       BGNPGRAM	EQU	033o	;MGA 4/10/12 as in orig; for his ROMable Loboyko said 044       [044]
  100/   0 :                            
  101/   0 :                            ;;; Here are labels originally attempting to make the code
  102/   0 :                            ;;; relocatable.  These 4 pages contain variable data
  103/   0 :                            ;;; which needs to be relocated from ROM to RAM.
  104/   0 :                            ;;; I can't vouch for ALL references to these pages in
  105/   0 :                            ;;; the code being switched to these labels, but they
  106/   0 :                            ;;; seem to be.
  107/   0 :                            
  108/   0 : =1H                        PG01		EQU	1	;OLDPG1:	EQU	001#000
  109/   0 : =16H                       PG26		EQU	026o	;OLDPG26:	EQU	026#000
  110/   0 : =17H                       PG27		EQU	027o	;OLDPG27:	EQU	027#000
  111/   0 : =2FH                       PG57		EQU	057o	;OLDPG57:	EQU	057#000
  112/   0 :                            
  113/   0 :                            ;;; Page zero will contain the I/O Routines.  These are actually
  114/   0 :                            ;;; just as suggested by Scelbal Manual for Serial I/O.
  115/   0 :                            
  116/   0 : =>TRUE                      IF FOR8008
  117/   0 :                            		ORG	0
  118/   0 : 44 42 30                   		JMP	START3000
  119/   3 : [116]                       ENDIF
  120/   3 :                            
  121/   3 :                            ;;; THE ABOVE MUST CONCLUDE BEFORE BY PAGE 1 STARTS
  122/   3 :                            
  123/   3 :                            ;;; Page one has many constants and variables.
  124/   3 :                            
  125/ 100 :                            		ORG	0100h		;001#000
  126/ 100 : 44 42 30                   		JMP	START3000
  127/ 103 : 00                         		db	0
  128/ 104 :                            ;		db	0,0,0,0		;DATA *4
  129/ 104 : 00 00 40 01                		db	0,0,100o,1	;DATA 000,000,100,001	; STORES FLOATING POINT CONSTANT +1.0
  130/ 108 : 00 00 00                   		db	0,0,0		;DATA *3
  131/ 10B : 00                         		db	0		;DATA 000		; EXPONENT COUNTER
  132/ 10C : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; STORES FLOATING POINT NUMBER TEMPORARILLY
  133/ 110 : 00 00 00 00                		db	0,0,0,0		;DATA *4
  134/ 114 : 00 00 C0 01                		db	0,0,300o,1	;DATA 000,000,300,001	; STORES FLOATING POINT CONSTANT -1.0
  135/ 118 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; SCRATCH PAD AREA (16 BYTES)
  136/ 11C : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  137/ 120 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  138/ 124 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  139/ 128 : 01 50 72 02                		db	1,120o,162o,2o	;DATA 001,120,162,002	; STORES RANDOM NUMBER GENERATOR CONSTANT VALUE
  140/ 12C : 00 00 00 00                		db	0,0,0,0		;DATA *4
  141/ 130 : 03 68 6F 0C                		db	3,150o,157o,14o	;DATA 003,150,157,014	; STORES RANDOM NUMBER GENERATOR CONSTANT VALUE
  142/ 134 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; SCRATCH PAD AREA (12 BYTES) (01 064-077)
  143/ 138 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  144/ 13C : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  145/ 140 : 00 00                      		db	0,0		;DATA 000,000		; SIGN INDICATOR
  146/ 142 : 00                         		db	0		;DATA 000		; BITS COUNTER
  147/ 143 : 00 00                      		db	0,0		;DATA 000,000		; SIGN INDICATOR
  148/ 145 : 00                         IN_DIGIT_CC_L0	db	0		;DATA 000		; INPUT DIGIT COUNTER
  149/ 146 : =45H                       IN_DIGIT_CC_L	equ	105o
  150/ 146 : 00                         		db	0		;DATA 000		; TEMP STORATE
  151/ 147 : 00                         		db	0		;DATA 000		; OUTPUT DIGIT COUNTER
  152/ 148 : 00                         		db	0		;DATA 000 		; FP MODE INDICATOR
  153/ 149 : 00 00 00 00 00 00 00       		db	0,0,0,0,0,0,0	;DATA *7		; NOT ASSIGNED (SHOULD BE 01 111-117)
  154/ 150 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; FPACC EXTENSION
  155/ 154 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; FPACC LSW, NSW, MSW, EXPONENT
  156/ 158 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; FPOP  Extension
  157/ 15C : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; FPOP  LSW, NSW, MSW, EXPONENT
  158/ 160 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; FLOATING POINT WORKING AREA
  159/ 164 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; (SHOULD BE AT 01 140-01-167)
  160/ 168 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  161/ 16C : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  162/ 170 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  163/ 174 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  164/ 178 : 00 00 00 00 00 00 00 00    		db	0,0,0,0,0,0,0,0	;DATA *8		; NOT ASSIGNED (SHOULD BE 01 170-01 177)
  165/ 180 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; TEMPORARY REGISTER STORAGE AREA (D,E,H&L)
  166/ 184 : 00 00 00 00                		db	0,0,0,0		;DATA *4		; NOT ASSIGNED (01 204-01 207)
  167/ 188 : 00 00 50 04                		db	0,0,120o,4	;DATA 000,000,120,004	; STORES FLOATING POINT CONSTANT +10.0
  168/ 18C : 67 66 66 FD                		db	147o,146o,146o,375o	;DATA 147,146,146,375	; STORES FLOATING POINT CONSTANT +0.1
  169/ 190 : 00                         		db	0		;DATA 000		; GETINP COUNTER
  170/ 191 : 00 00 00 00 00 00          		db	0,0,0,0,0,0	;DATA *6		; NOT ASSIGNED (01 221-01 226)
  171/ 197 : 00                         		db	0		;DATA 000		; ARITHMETIC STACK POINTER (01 227)
  172/ 198 : 00                         		db	0		;DATA 000		; ARITHMETIC STACK (NOT CLEAR HOW LONG)
  173/ 199 :                            
  174/ 199 :                            ;		db	(1bah-$) dup 0	
  175/ 199 :                            
  176/ 1BA :                            		ORG 	01bah		;001#272
  177/ 1BA : 04                         		db	4		;DATA 004		; CC FOR SAVE
  178/ 1BB :                            ;		db	"SAVE"		;DATA "SAVE"
  179/ 1BB : D3                         		db	"S"+80h
  180/ 1BC : C1                         		db	"A"+80h
  181/ 1BD : D6                         		db	"V"+80h
  182/ 1BE : C5                         		db	"E"+80h
  183/ 1BF : 04                         		db	4		;DATA 004		; CC FOR LOAD
  184/ 1C0 :                            ;		db	"LOAD"		;DATA "LOAD"
  185/ 1C0 : CC                         		db	"L"+80h
  186/ 1C1 : CF                         		db	"O"+80h
  187/ 1C2 : C1                         		db	"A"+80h
  188/ 1C3 : C4                         		db	"D"+80h
  189/ 1C4 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; UNCLEAR WHAT THIS IS (01 304-01 317) ZEROS
  190/ 1C8 : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000	; (PROBABLY STEP, FOR/NEXT, AND ARRAY PTR TEMP)
  191/ 1CC : 00 00 00 00                		db	0,0,0,0		;DATA 000,000,000,000
  192/ 1D0 :                            					;; AT THIS POINT WE SHOULD BE AT LOCATION 01 320 01d0h
  193/ 1D0 : 04                         		db	4		;DATA 4
  194/ 1D1 :                            ;		db	"THEN"		;DATA "THEN"
  195/ 1D1 : D4                         		db	"T"+80h
  196/ 1D2 : C8                         		db	"H"+80h
  197/ 1D3 : C5                         		db	"E"+80h
  198/ 1D4 : CE                         		db	"N"+80h
  199/ 1D5 : 02                         		db	2		;DATA 2
  200/ 1D6 :                            ;		db	"TO"		;DATA "TO"
  201/ 1D6 : D4                         		db	"T"+80h
  202/ 1D7 : CF                         		db	"O"+80h
  203/ 1D8 : 04                         		db	4		;DATA 4
  204/ 1D9 :                            ;		db	"STEP"		;DATA "STEP"
  205/ 1D9 : D3                         		db	"S"+80h
  206/ 1DA : D4                         		db	"T"+80h
  207/ 1DB : C5                         		db	"E"+80h
  208/ 1DC : D0                         		db	"P"+80h
  209/ 1DD : 04                         		db	4		;DATA 4
  210/ 1DE :                            ;		db	"LIST"		;DATA "LIST"
  211/ 1DE : CC                         		db	"L"+80h
  212/ 1DF : C9                         		db	"I"+80h
  213/ 1E0 : D3                         		db	"S"+80h
  214/ 1E1 : D4                         		db	"T"+80h
  215/ 1E2 : 03                         		db	3		;DATA 3
  216/ 1E3 :                            ;		db	"RUN"		;DATA "RUN"
  217/ 1E3 : D2                         		db	"R"+80h
  218/ 1E4 : D5                         		db	"U"+80h
  219/ 1E5 : CE                         		db	"N"+80h
  220/ 1E6 : 03                         		db	3		;DATA 3
  221/ 1E7 :                            ;		db	"SCR"		;DATA "SCR
  222/ 1E7 : D3                         		db	"S"+80h
  223/ 1E8 : C3                         		db	"C"+80h
  224/ 1E9 : D2                         		db	"R"+80h
  225/ 1EA : 0B                         		db	013o		;DATA 013		; CC FOR "READY" MESSAGE
  226/ 1EB : 94 8D 8A                   		db	224o,215o,212o	;DATA 224,215,212	; CTRL-T, CARRIAGE RETURN, LINE FEED
  227/ 1EE :                            ;		db	"READY"		;DATA "READY"
  228/ 1EE : D2                         		db	"R"+80h
  229/ 1EF : C5                         		db	"E"+80h
  230/ 1F0 : C1                         		db	"A"+80h
  231/ 1F1 : C4                         		db	"D"+80h
  232/ 1F2 : D9                         		db	"Y"+80h
  233/ 1F3 : 8D 8A 8A                   		db	215o,212o,212o	;DATA 215,212,212	; CARRIAGE RETURN, LINE FEED, LINE FEED;
  234/ 1F6 : 09                         		db	011o		;DATA 011
  235/ 1F7 :                            ;		db	" AT LINE "	;DATA " AT LINE "
  236/ 1F7 : A0                         		db	" "+80h
  237/ 1F8 : C1                         		db	"A"+80h
  238/ 1F9 : D4                         		db	"T"+80h
  239/ 1FA : A0                         		db	" "+80h
  240/ 1FB : CC                         		db	"L"+80h
  241/ 1FC : C9                         		db	"I"+80h
  242/ 1FD : CE                         		db	"N"+80h
  243/ 1FE : C5                         		db	"E"+80h
  244/ 1FF : A0                         		db	" "+80h
  245/ 200 :                            
  246/ 200 :                            	;; THIS SHOULD BE THE END OF PAGE 01
  247/ 200 :                            
  248/ 200 :                            ;	db	(200h-$) dup 0
  249/ 200 :                            
  250/ 200 :                                       ORG	0200h		;002#000		; START PAGE 02, THE CODE
  251/ 200 : 46 AD 02                   SYNTAX:    CALL	CLESYM             ;Clear the SYMBOL BUFFER area
  252/ 203 : 36 E0                                 MVI	L, 340o               ;Set L to start of LINE NUMBER BUFFER
  253/ 205 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of LINE NUMBER BUFFER
  254/ 207 : 3E 00                                 MVI	M, 000o               ;Initialize line number buff by placing zero as (cc)
  255/ 209 : 36 81                                 MVI	L, 201o               ;Change pointer to syntax counter/pointer storage loc.
  256/ 20B : 3E 01                                 MVI	M, 001o               ;Set pointer to first character (after cc) in line buffer
  257/ 20D : 36 81                      SYNTX1:    MVI	L, 201o               ;Set pointer to syntax cntr/pntr storage location
  258/ 20F : 46 A0 02                              CALL	GETCHR             ;Fetch the character pointed to by contents of syntax
  259/ 212 : 68 24 02                              JZ	SYNTX2             ;Cntr/pntr from the line input buffer. If character was
  260/ 215 : 3C B0                                 CPI	260o               ;A space, ignore. Else, test to see if character was ASCII
  261/ 217 : 70 31 02                              JM	SYNTX3             ;Code for a decimal digit. If not a decimal digit, consider
  262/ 21A : 3C BA                                 CPI	272o               ;Line number to have been processed by jumping
  263/ 21C : 50 31 02                              JP	SYNTX3             ;Over the remainder of this SYNTX1 section.
  264/ 21F : 36 E0                                 MVI	L, 340o               ;If have decimal digit, set pointer to start of LINE
  265/ 221 : 46 CC 02                              CALL	CONCT1             ;NUMBER BUFFER and append incoming digit there.
  266/ 224 : 36 81                      SYNTX2:    MVI	L, 201o               ;Reset L to syntax cntr/pntr storage location. Call sub-
  267/ 226 : 46 03 03                              CALL	LOOP               ;Routine to advance pntr and test for end of inr)ut buffer
  268/ 229 : 48 0D 02                              JNZ	SYNTX1             ;If not end of input buffer, go back for next digit
  269/ 22C : 36 83                                 MVI	L, 203o               ;If end of buffer, only had a line number in the line.
  270/ 22E : 3E 00                                 MVI	M, 000o               ;Set pntr to TOKEN storage location. Set TOKEN = 000.
  271/ 230 : 07                                    RET                    ;Return to caller.
  272/ 231 : 36 81                      SYNTX3:    MVI	L, 201o               ;Reset pointer to syntax cntr/pntr and fetch
  273/ 233 : CF                                    MOV	B,M                    ;Position of next character after the line number
  274/ 234 : 36 82                                 MVI	L, 202o               ;Change pntr to SCAN pntr storage location
  275/ 236 : F9                                    MOV	M,B                    ;Store address when SCAN takes up after line number
  276/ 237 : 36 82                      SYNTX4:    MVI	L, 202o               ;Set pntr to SCAN pntr stomge location
  277/ 239 : 46 A0 02                              CALL	GETCHR             ;Fetch the character pointed to by contents of the SCAN
  278/ 23C : 68 54 02                              JZ	SYNTX6             ;Pointer storage location. If character was ASCII code
  279/ 23F : 3C BD                                 CPI	275o               ;For space, ignore. Else, compare character with "=" sign
  280/ 241 : 68 88 02                              JZ	SYNTX7             ;If is an equal sign, go set TOKEN for IMPLIED LET.
  281/ 244 : 3C A8                                 CPI	250o               ;Else, compare character with left parenthesis " ( "
  282/ 246 : 68 8D 02                              JZ	SYNTX8             ;If left parenthesis, go set TOKEN for implied array LET
  283/ 249 : 46 C8 02                              CALL	CONCTS             ;Otherwise, concatenate the character onto the string
  284/ 24C :                            ; MGA 4/2012 begin "fast SYNTX5" patch: 
  285/ 24C :                            ; the following patch doubles the overall speed of execution.  
  286/ 24C :                            ; It is similar to the approach taken on 8080 SCELBAL II in 1978 
  287/ 24C :                            ; it adhears to the rules for patches in issue 1 of SCELBAL update 
  288/ 24C :                            ;SYNTX6:   these four lines moved up w/o label
  289/ 24C : 36 82                                 MVI	L, 202o               ;Set L to SCAN pointer storage location
  290/ 24E :                            ;           LHI \HB\OLDPG26       ;** Set H to page of SCAN pointer stomge location
  291/ 24E :                            ;MGA 4/2012 except LHI needed at original place, not here 
  292/ 24E : 46 03 03                              CALL	LOOP               ;Call routine to advance pntr & test for end of In buffer
  293/ 251 : 48 37 02                              JNZ	SYNTX4             ;Go back and add another character to SYMBOL BUFF
  294/ 254 :                            SYNTX6:   ; MGA 4/2012 label here 
  295/ 254 :                            
  296/ 254 : 36 83                                 MVI	L, 203o               ;Being constructed in the SYMBOL BUFFER. Now set
  297/ 256 : 3E 01                                 MVI	M, 001o               ;Up TOKEN storage location to an initial value of 001.
  298/ 258 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to point to start of KEYWORD TABLE.
  299/ 25A : 36 00                                 MVI	L, 000o               ;Set L to point to start of KEYWORD TABLE.
  300/ 25C : 1E 16                      SYNTX5:    MVI	D,PG26 ;\HB\OLDPG26   ;** Set D to page of SYMBOL BUFFER
  301/ 25E : 26 50                                 MVI	E, 120o               ;Set E to start of SYMBOL BUFFER
  302/ 260 : 46 DA 02                              CALL	STRCP              ;Compare char string presently in SYMBOL BUFFER
  303/ 263 : 2B                                    RZ                    ;With entry in KEYWORD TABLE. Exit if match.
  304/ 264 : 46 EE 12                              CALL	SWITCH             ;TOKEN will be set to keyword found. Else, switch
  305/ 267 : 30                         SYNTXL:    INR	L                    ;Pointers to get table address back and advance pntr to
  306/ 268 : C7                                    MOV	A,M                    ;KEYWORD TABLE. Now look for start of next entry
  307/ 269 : 24 C0                                 ANI	300o               ;In KEYWORD TABLE by looking for (cc) byte which
  308/ 26B : 48 67 02                              JNZ	SYNTXL             ;Will NOT have a one in the two most sig. bits. Advance
  309/ 26E : 46 EE 12                              CALL	SWITCH             ;Pntr til next entry found. Then switch pointers apin so
  310/ 271 : 36 83                                 MVI	L, 203o               ;Table pointer is in D&E. Put addr of TOKEN in L.
  311/ 273 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** And page of TOKEN in H. Fetch the value currently
  312/ 275 : CF                                    MOV	B,M                    ;In TOKEN and advance it to account for going on to
  313/ 276 : 08                                    INR	B                    ;The next entry in the KEYWORD TABLE.
  314/ 277 : F9                                    MOV	M,B                    ;Restore the updated TOKEN value back to storage.
  315/ 278 : 46 EE 12                              CALL	SWITCH             ;Restore the keyword table pointer back to H&L.
  316/ 27B : C1                                    MOV	A,B                    ;Put TOKEN count in ACC.
  317/ 27C : 3C 0D                                 CPI	015o               ;See if have tested all entries in the keyword table.
  318/ 27E : 48 5C 02                              JNZ	SYNTX5             ;If not, continue checking the keyword table.
  319/ 281 :                            ;MGA 4/2012 3 of 4 lines removed below (keep LHI)
  320/ 281 : 2E 16                                 MVI	H, 26o	;\HB\OLDPG26        ;** Set H to page of SCAN pointer stomge location
  321/ 283 :                            ; MGA 4/2012 end of "fast SYNTX5" patch: 
  322/ 283 : 36 83                                 MVI	L, 203o               ;And search table for KEYWORD again. Unless reach
  323/ 285 : 3E FF                                 MVI	M, 377o               ;End of line input buffer. In which case set TOKEN=377
  324/ 287 : 07                                    RET                    ;As an error indicator and exit to caMVI L,ng routine.
  325/ 288 : 36 83                      SYNTX7:    MVI	L, 203o               ;Set pointer to TOKEN storage register. Set TOKEN
  326/ 28A : 3E 0D                                 MVI	M, 015o               ;Equal to 015 when "=" sign found for IMPLIED LET.
  327/ 28C : 07                                    RET                    ;Exit to caMVI L,ng routine.
  328/ 28D : 36 83                      SYNTX8:    MVI	L, 203o               ;Set pointer to TOKEN storage register. Set TOKEN
  329/ 28F : 3E 0E                                 MVI	M, 016o               ;Equal to 016 when "(" found for IMPLIED array LET.
  330/ 291 : 07                                    RET                    ;Exit to calling routine.
  331/ 292 :                            
  332/ 292 :                                                              ;The following are subroutines used by SYNTAX and
  333/ 292 :                                                              ;other routines in SCELBAL.
  334/ 292 :                            
  335/ 292 : 06 C2                      BIGERR:    MVI	A, 302o               ;Load ASCII code for letters B and G to indicate BIG
  336/ 294 : 16 C7                                 MVI	C, 307o               ;ERROR (for when buffer, stack,etc., overflows).
  337/ 296 : 46 82 03                   ERROR:     CALL	ECHO               ;Call user provided display routine to print ASCII code
  338/ 299 : C2                                    MOV	A,C                    ;In accumulator. Transfer ASCII code from C to ACC
  339/ 29A : 46 82 03                              CALL	ECHO               ;And repeat to display error codes.
  340/ 29D : 44 D2 0A                              JMP	FINERR             ;Go cpmplete error message (AT LINE) as required.
  341/ 2A0 : C7                         GETCHR:    MOV	A,M                    ;Get pointer from memory location pointed to by H&L
  342/ 2A1 : 3C 50                                 CPI	120o               ;See if within range of line input buffer.
  343/ 2A3 : 50 92 02                              JP	BIGERR             ;If not then have an overflow condition = error.
  344/ 2A6 : F0                                    MOV	L,A                    ;Else can use it as addr of character to fetch from the
  345/ 2A7 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** LINE INPUT BUFFER by setting up H too.
  346/ 2A9 : C7                                    MOV	A,M                    ;Fetch the character from the line input buffer.
  347/ 2AA : 3C A0                                 CPI	240o               ;See if it is ASCII code for space.
  348/ 2AC : 07                                    RET                    ;Return to caller with flags set according to comparison.
  349/ 2AD : 36 50                      CLESYM:    MVI	L, 120o               ;Set L to start of SYMBOL BUFFER.
  350/ 2AF : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of SYMBOL BUFFER.
  351/ 2B1 : 3E 00                                 MVI	M, 000o               ;Place a zero byte at start of SYMBOL BUFFER.
  352/ 2B3 : 07                                    RET                    ;To effectively clear the buffer. Then exit to caller.
  353/ 2B4 :                            
  354/ 2B4 :                            
  355/ 2B4 :                                                              ;Subroutine to concatenate (append) a character to the
  356/ 2B4 :                                                              ;SYMBOL BUFFER. Character must be alphanumeric.
  357/ 2B4 :                            
  358/ 2B4 : 3C C1                      CONCTA:    CPI	301o               ;See if character code less than that for letter A.
  359/ 2B6 : 70 BE 02                              JM	CONCTN             ;If so, go see if it is numeric.
  360/ 2B9 : 3C DB                                 CPI	333o               ;See if character code greater than that for letter Z.
  361/ 2BB : 70 C8 02                              JM	CONCTS             ;If not, have valid alphabetical character.
  362/ 2BE : 3C B0                      CONCTN:    CPI	260o               ;Else, see if character in valid numeric range.
  363/ 2C0 : 70 D7 02                              JM	CONCTE             ;If not, have an error condition.
  364/ 2C3 : 3C BA                                 CPI	272o               ;Continue to check for valid number.
  365/ 2C5 : 50 D7 02                              JP	CONCTE             ;If not, have an error condition.
  366/ 2C8 : 36 50                      CONCTS:    MVI	L, 120o               ;If character alphanumeric, can concatenate. Set pointer
  367/ 2CA : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** To starting address of SYMBOL BUFFER.
  368/ 2CC : D7                         CONCT1:    MOV	C,M                    ;Fetch old character count in SYMBOL BUFFER.
  369/ 2CD : 10                                    INR	C                    ;Increment the value to account for adding new
  370/ 2CE : FA                                    MOV	M,C                    ;Character to the buffer. Restore updated (cc).
  371/ 2CF : C8                                    MOV	B,A                    ;Save character to be appended in register B.
  372/ 2D0 : 46 1E 13                              CALL	INDEXC             ;Add (cc) to address in H & L to get new end of buffer
  373/ 2D3 : F9                                    MOV	M,B                    ;Address and append the new character to buffer
  374/ 2D4 : 06 00                                 MVI	A, 000o               ;Clear the accumulator
  375/ 2D6 : 07                                    RET                    ;Exit to caller
  376/ 2D7 : 44 6A 09                   CONCTE:    JMP	SYNERR             ;If character to be appended not alphanumeric, ERROR!
  377/ 2DA :                            
  378/ 2DA :                                                              ;Subroutine to compare
  379/ 2DA :                                                              ;character strings pointed to by
  380/ 2DA :                                                              ;register pairs D & E and H & L.
  381/ 2DA :                            
  382/ 2DA : C7                         STRCP:     MOV	A,M                    ;Fetch (cc) of first string.
  383/ 2DB : 46 EE 12                              CALL	SWITCH             ;Switch pointers and fetch length of second string (cc)
  384/ 2DE : CF                                    MOV	B,M                    ;Into register B. Compare the lengths of the two strings.
  385/ 2DF : B9                                    CMP	B                    ;If they are not the same
  386/ 2E0 : 0B                                    RNZ                    ;Return to caller with flags set to non-zero condition
  387/ 2E1 : 46 EE 12                              CALL	SWITCH             ;Else, exchange the pointers back to first string.
  388/ 2E4 : 46 FF 02                   STRCPL:    CALL	ADV                ;Advance the pointer to string number 1 and fetch a
  389/ 2E7 : C7                                    MOV	A,M                    ;Character from that string into the accumulator.
  390/ 2E8 : 46 EE 12                              CALL	SWITCH             ;Now switch the pointers to string number 2.
  391/ 2EB : 46 FF 02                              CALL	ADV                ;Advance the pointer in line number 2.
  392/ 2EE : BF                         STRCPE:    CMP	M                    ;Compare char in stxing 1 (ACC) to string 2 (memory)
  393/ 2EF : 0B                                    RNZ                    ;If not equal, return to cauer with flags set to non-zero
  394/ 2F0 : 46 EE 12                              CALL	SWITCH             ;Else, exchange pointers to restore pntr to string 1
  395/ 2F3 : 09                                    DCR	B                    ;Decrement the string length counter in register B
  396/ 2F4 : 48 E4 02                              JNZ	STRCPL             ;If not finiahed, continue testing entire string
  397/ 2F7 : 07                                    RET                    ;If complete match, return with flag in zero condition
  398/ 2F8 : C7                         STRCPC:    MOV	A,M                    ;Fetch character pointed to by pointer to string 1
  399/ 2F9 : 46 EE 12                              CALL	SWITCH             ;Exchange pointer to examine string 2
  400/ 2FC : 44 EE 02                              JMP	STRCPE             ;Continue the string comparison loop
  401/ 2FF :                            
  402/ 2FF :                                                              ;Subroutine to advance the two byte
  403/ 2FF :                                                              ;value in CPU registers H and L.
  404/ 2FF :                            
  405/ 2FF : 30                         ADV:       INR	L                    ;Advance value in register L.
  406/ 300 : 0B                                    RNZ                    ;If new value not zero, return to caller.
  407/ 301 : 28                                    INR	H                    ;Else must increment value in H
  408/ 302 : 07                                    RET                    ;Before retuming to caller
  409/ 303 :                            
  410/ 303 :                                                              ;Subroutine to advance a buffer pointer
  411/ 303 :                                                              ;and test to see if the end of the buffer
  412/ 303 :                                                              ;has been reached.
  413/ 303 :                            
  414/ 303 : CF                         LOOP:      MOV	B,M                    ;Fetch memory location pointed to by H & L into B.
  415/ 304 : 08                                    INR	B                    ;Increment the value.
  416/ 305 : F9                                    MOV	M,B                    ;Restore it back to memory.
  417/ 306 : 36 00                                 MVI	L, 000                ;Change pointer to start of INPUT LINE BUFFER
  418/ 308 : C7                                    MOV	A,M                    ;Fetch buffer length (cc) value into the accumulator
  419/ 309 : 09                                    DCR	B                    ;Make value in B original value
  420/ 30A : B9                                    CMP	B                    ;See if buffer length same as that in B
  421/ 30B : 07                                    RET                    ;Return with flags yielding results of the comparison
  422/ 30C :                            
  423/ 30C :                                                              ;The following subroutine is used to
  424/ 30C :                                                              ;input characters from the system's
  425/ 30C :                                                              ;input device (such as a keyboard)
  426/ 30C :                                                              ;into the LINE INPUT BUFFER. Routine has limited
  427/ 30C :                                                              ;editing capability included.
  428/ 30C :                                                              ;(Rubout = delete previous character(s) entered.)
  429/ 30C :                            ;;; This label, STRIN:	should be location 03 014 030ch
  430/ 30C : 16 00                      STRIN:     MVI	C, 000                ;Initialize register C to zero.
  431/ 30E : 46 91 03                   STRIN1:    CALL	CINPUT             ;Call user provided device input subroutine to fetch one
  432/ 311 : 3C FF                                 CPI	0FFH	;modifiedby gazelle 2025/6/1 ;377o  ;Character from the input device. Is it ASCII code for
  433/ 313 : 48 25 03                              JNZ	NOTDEL             ;Rubout? Skip to next section if not rubout.
  434/ 316 :                            ;          MVI	A, 0DCH	;modified by Gazelle 2025/6/1 ;334o ;Else, load ASCII code for backslash into ACC.
  435/ 316 :                            ;          CALL	ECHO	;modified by gazelle 2025/6/1 ;Call user display driver to present backslash as a delete
  436/ 316 : 11                                    DCR	C                    ;Indicator. Now decrement the input character counter.
  437/ 317 : 70 0C 03                              JM	STRIN              ;If at beginning of line do NOT decrement H and L.
  438/ 31A : 46 74 03                              CALL	DEC                ;Else, decrement H & L line pointer to erase previous
  439/ 31D : 06 DC                                 MVI	A, 0DCH	;modified by gazelle 2025/6/1
  440/ 31F : 46 82 03                              CALL	ECHO	;modified by gazelle 2025/6/1
  441/ 322 :                            
  442/ 322 : 44 0E 03                              JMP	STRIN1             ;Entry, then go back for a new input.
  443/ 325 : 3C 83                      NOTDEL:    CPI	203o               ;See if character inputted was'CONTROL C'
  444/ 327 : 68 CB 0A                              JZ	CTRLC              ;If so, stop inputting and go back to the EXECutive
  445/ 32A : 3C 8D                                 CPI	215o               ;If not, see if character was carriage-return
  446/ 32C : 68 42 03                              JZ	STRINF             ;If so, have end of line of input
  447/ 32F : 3C 8A                                 CPI	212o               ;If not, see if character was line-feed
  448/ 331 : 68 0E 03                              JZ	STRIN1             ;If so, ignore the input, get another character
  449/ 334 : 46 FF 02                              CALL	ADV                ;If none of the above, advance contents of H & L
  450/ 337 : 10                                    INR	C                    ;Increment the character counter
  451/ 338 : F8                                    MOV	M,A                    ;Store the new character in the line input buffer
  452/ 339 : C2                                    MOV	A,C                    ;Put new character count in the accumulator
  453/ 33A : 3C 50                                 CPI	120o               ;Make sure maximum buffer size not exceeded
  454/ 33C : 50 92 02                              JP	BIGERR             ;If buffer size exceeded, go display BG error message
  455/ 33F : 44 0E 03                              JMP	STRIN1             ;Else can go back to look for next input
  456/ 342 : CA                         STRINF:    MOV	B,C                    ;Transfer character count from C to B
  457/ 343 : 46 4B 03                              CALL	SUBHL              ;Subtract B from H & L to get starting address of
  458/ 346 : FA                                    MOV	M,C                    ;The string and place the character count (cc) there
  459/ 347 : 46 61 03                              CALL	CRLF               ;Provide a line ending CR & LF combination on the
  460/ 34A : 07                                    RET                    ;Display device. Then exit to caller.
  461/ 34B :                            
  462/ 34B :                                                              ;Subroutine to subtract contents of CPU register B from
  463/ 34B :                                                              ;the two byte value in CPU registers H & L.
  464/ 34B :                            
  465/ 34B : C6                         SUBHL:     MOV	A,L                    ;Load contents of register L into the accumulator
  466/ 34C : 91                                    SUB	B                    ;Subtract the contents of register B
  467/ 34D : F0                                    MOV	L,A                    ;Restore the new value back to L
  468/ 34E : 03                                    RNC                    ;If no carry, then no underflow. Exit to caller.
  469/ 34F : 29                                    DCR	H                    ;Else must also decrement contents of H.
  470/ 350 : 07                                    RET                    ;Before retuming to caller.
  471/ 351 :                            
  472/ 351 :                                                              ;Subroutine to display a character string on the system's
  473/ 351 :                                                              ;display device.
  474/ 351 :                            
  475/ 351 : D7                         TEXTC:     MOV	C,M                    ;Fetch (cc) from the first location in the buffer (H & L
  476/ 352 : C7                                    MOV	A,M                    ;Pointing there upon entry) into register B and ACC.
  477/ 353 : A0                                    ANA	A                    ;Test the character count value.
  478/ 354 : 2B                                    RZ                    ;No display if (cc) is zero.
  479/ 355 : 46 FF 02                   TEXTCL:    CALL	ADV                ;Advance pointer to next location in buffer
  480/ 358 : C7                                    MOV	A,M                    ;Fetch a character from the buffer into ACC
  481/ 359 : 46 82 03                              CALL	ECHO               ;Call the user's display driver subroutine
  482/ 35C : 11                                    DCR	C                    ;Decrement the (cc)
  483/ 35D : 48 55 03                              JNZ	TEXTCL             ;If character counter not zero, continue display
  484/ 360 : 07                                    RET                    ;Exit to caller when (cc) is zero.
  485/ 361 :                            
  486/ 361 :                                                              ;Subroutine to provide carriage-return and line-feed
  487/ 361 :                                                              ;combination to system's display device. Routine also
  488/ 361 :                                                              ;initializes a column counter to zero. Column counter
  489/ 361 :                                                              ;is used by selected output routines to count the num-
  490/ 361 :                                                              ;ber of characters that have been displayed on a line.
  491/ 361 :                            
  492/ 361 : 06 8D                      CRLF:      MVI	A, 215o               ;Load ASCII code for carriage-return into ACC
  493/ 363 : 46 82 03                              CALL	ECHO               ;Call user provided display driver subroutine
  494/ 366 : 06 8A                                 MVI	A, 212o               ;Load ASCII code for line-feed into ACC
  495/ 368 : 46 82 03                              CALL	ECHO               ;Call user provided display driver subroutine
  496/ 36B : 36 23                                 MVI	L, 043o               ;Set L to point to COLUMN COUNTER storage location
  497/ 36D : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of COLUMN COUNTER
  498/ 36F : 3E 01                                 MVI	M, 001o               ;Initialize COLUMN COUNTER to a value of one
  499/ 371 : EB                                    MOV	H,D                    ;Restore H from D (saved by ECHO subroutine)
  500/ 372 : F4                                    MOV	L,E                    ;Restore L from E (saved by ECHO subroutine)
  501/ 373 : 07                                    RET                    ;Then exit to calling routine
  502/ 374 :                            
  503/ 374 :                                                              ;Subroutine to decrement double-byte value in CPU
  504/ 374 :                                                              ;registers H and L.
  505/ 374 :                            
  506/ 374 : 31                         DEC:       DCR	L                    ;Decrement contents of L
  507/ 375 : 30                                    INR	L                    ;Now increment to exercise CPU flags
  508/ 376 : 48 7A 03                              JNZ	DECNO              ;If L not presently zero, skip decrementing H
  509/ 379 : 29                                    DCR	H                    ;Else decrement H
  510/ 37A : 31                         DECNO:     DCR	L                    ;Do the actual decrement of L
  511/ 37B : 07                                    RET                    ;Return to caller
  512/ 37C :                            
  513/ 37C :                            
  514/ 37C :                                                              ;Subroutine to index the value in CPU registers H and L
  515/ 37C :                                                              ;by the contents of CPU register B.
  516/ 37C :                            
  517/ 37C : C6                         INDEXB:    MOV	A,L                    ;Load L into the accumulator
  518/ 37D : 81                                    ADD	B                    ;Add B to that value
  519/ 37E : F0                                    MOV	L,A                    ;Restore the new value to L
  520/ 37F : 03                                    RNC                    ;If no carry,  return to caller
  521/ 380 : 28                                    INR	H                    ;Else, increment value in H
  522/ 381 : 07                                    RET                    ;Before returning to caller
  523/ 382 :                            
  524/ 382 :                                                              ;The following subroutine is used to
  525/ 382 :                                                              ;display the ASCII encoded character in the ACC on the
  526/ 382 :                                                              ;system's display device. This routine calls a routine
  527/ 382 :                                                              ;labeled CINPUT which must be provided by the user to
  528/ 382 :                                                              ;actually drive the system's output device. The subroutine
  529/ 382 :                                                              ;below also increments an output column counter each time
  530/ 382 :                                                              ;it is used.
  531/ 382 :                            
  532/ 382 : DD                         ECHO:      MOV	D,H                    ;Save entry value of H in register D
  533/ 383 : E6                                    MOV	E,L                    ;And save entry value of L in register E
  534/ 384 : 36 23                                 MVI	L, 043o               ;Set L to point to COLUMN COUNTER storage location
  535/ 386 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of COLUMN COUNTER
  536/ 388 : CF                                    MOV	B,M                    ;Fetch the value in the COLUMN COUNTER
  537/ 389 : 08                                    INR	B                    ;And increment it for each character displayed
  538/ 38A : F9                                    MOV	M,B                    ;Restore the updated count in memory
  539/ 38B : 46 64 30                              CALL	CPRINT             ;tt Call the user's device driver subroutine
  540/ 38E : EB                                    MOV	H,D                    ;Restore entry value of H from D
  541/ 38F : F4                                    MOV	L,E                    ;Restore entry value of L from E
  542/ 390 : 07                                    RET                    ;Return to calling routine
  543/ 391 : 44 57 30                   CINPUT:	   JMP	CINP               ;Reference to user defined input subroutine
  544/ 394 :                            
  545/ 394 :                            ;;; The label EVAL: SHOULD BE AT 03 224 0394h
  546/ 394 : 36 97                      EVAL:      MVI	L, 227o               ;Load L with address of ARITHMETIC STACK pointer
  547/ 396 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of ARITHMETIC STACK pointer
  548/ 398 : 3E 94                                 MVI	M, 224o               ;Initialize ARITH STACK pointer value to addr minus 4
  549/ 39A : 30                                    INR	L                    ;Advance memory pointer to FUN/ARRAY STACK pntr
  550/ 39B : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of FUN/ARRAY STACK pointer
  551/ 39D : 3E 00                                 MVI	M, 000o               ;Initialize FUNIARRAY STACK pointer to start of stack
  552/ 39F : 46 AD 02                              CALL	CLESYM             ;Initialize the SYMBOL BUFFER to empty condition
  553/ 3A2 : 36 88                                 MVI	L, 210o               ;Load L with address of OPERATOR STACK pointer
  554/ 3A4 : 3E 00                                 MVI	M, 000                ;Initialize OPERATOR STACK pointer value
  555/ 3A6 : 36 BE                                 MVI	L, 276o               ;Set L to address of EVAL pointer (start of expression)
  556/ 3A8 : CF                                    MOV	B,M                    ;Fetch the EVAL pointer value into register B
  557/ 3A9 : 36 80                                 MVI	L, 200o               ;Set up a working pointer register in this location
  558/ 3AB : F9                                    MOV	M,B                    ;And initialize EVAL CURRENT pointer
  559/ 3AC : 36 80                      SCAN1:     MVI	L, 200o               ;Load L with address of EVAL CURRENT pointer
  560/ 3AE : 46 A0 02                              CALL	GETCHR             ;Fetch a character in the expression being evaluated
  561/ 3B1 : 68 C1 04                              JZ	SCAN10             ;If character is a space, jump out of this section
  562/ 3B4 : 3C AB                                 CPI	253o               ;See if character is a "+" sign
  563/ 3B6 : 48 C0 03                              JNZ	SCAN2              ;If not, continue checking for an operator
  564/ 3B9 : 36 7E                                 MVI	L, 176o               ;If yes, set pointer to PARSER TOKEN storage location
  565/ 3BB : 3E 01                                 MVI	M, 001                ;Place TOKEN value for "+" sign in PARSER TOKEN
  566/ 3BD : 44 E9 03                              JMP	SCANFN             ;Go to PARSER subroutine entry point
  567/ 3C0 : 3C AD                      SCAN2:     CPI	255o               ;See if character is a minus ("-") sign
  568/ 3C2 : 48 EF 03                              JNZ	SCAN4              ;If not, continue checking for an operator
  569/ 3C5 : 36 50                                 MVI	L, 120o               ;If yes, check the length of the symbol stored in the
  570/ 3C7 : C7                                    MOV	A,M                    ;SYMBOL BUFFER by fetching the (cc) byte
  571/ 3C8 : A0                                    ANA	A                    ;And testing to see if (cc) is zero
  572/ 3C9 : 48 E5 03                              JNZ	SCAN3              ;If length not zero, then not a unary minus indicator
  573/ 3CC : 36 7E                                 MVI	L, 176o               ;Else, check to see if last operator was a right parenthesi
  574/ 3CE : C7                                    MOV	A,M                    ;By fetching the value in the PARSER TOKEN storage
  575/ 3CF : 3C 07                                 CPI	007                ;Location and seeing if it is token value for ")"
  576/ 3D1 : 68 E5 03                              JZ	SCAN3              ;If last operator was I')" then do not have a unary minus
  577/ 3D4 : 3C 03                                 CPI	003                ;Check to see if last operator was C4*~2
  578/ 3D6 : 68 6A 09                              JZ	SYNERR             ;If yes, then have a syntax error
  579/ 3D9 : 3C 05                                 CPI	005                ;Check to see if last operator was exponentiation
  580/ 3DB : 68 6A 09                              JZ	SYNERR             ;If yes, then have a syntax error
  581/ 3DE : 36 50                                 MVI	L, 120o               ;If none of the above, then minus sign is unary, put
  582/ 3E0 : 3E 01                                 MVI	M, 001                ;Character string representing the
  583/ 3E2 : 30                                    INR	L                    ;Value zero in the SYMBOL BUFFER in string format
  584/ 3E3 : 3E B0                                 MVI	M, 260o               ;(Character count (cc) followed by ASCII code for zero)
  585/ 3E5 : 36 7E                      SCAN3:     MVI	L, 176o               ;Set L to address of PARSER TOKEN storage location
  586/ 3E7 : 3E 02                                 MVI	M, 002                ;Set PARSER TOKEN value for minus operator
  587/ 3E9 : 46 D4 04                   SCANFN:    CALL	PARSER             ;Call the PARSER subroutine to process current symbol
  588/ 3EC : 44 C1 04                              JMP	SCAN10             ;And operator. Then jump to continue processing.
  589/ 3EF : 3C AA                      SCAN4:     CPI	252o               ;See if character fetched from expression is
  590/ 3F1 : 48 FB 03                              JNZ	SCAN5              ;If not, continue checking for an operator
  591/ 3F4 : 36 7E                                 MVI	L, 176o               ;If yes, set pointer to PARSER TOKEN storage location
  592/ 3F6 : 3E 03                                 MVI	M, 003                ;Place TOKEN value for "*" (multiplication) operator in
  593/ 3F8 : 44 E9 03                              JMP	SCANFN             ;PARSER TOKEN and go to PARSER subroutine entry
  594/ 3FB : 3C AF                      SCAN5:     CPI	257o               ;See if character fetched from expression is
  595/ 3FD : 48 07 04                              JNZ	SCAN6              ;If not, continue checking for an operator
  596/ 400 : 36 7E                                 MVI	L, 176o               ;If yes, set pointer to PARSER TOKEN storage location
  597/ 402 : 3E 04                                 MVI	M, 004                ;Place TOKEN value for "/" (division) operator in
  598/ 404 : 44 E9 03                              JMP	SCANFN             ;PARSER TOKEN and go to PARSER subroutine entry
  599/ 407 : 3C A8                      SCAN6:     CPI	250o               ;See if character fetched from expression is
  600/ 409 : 48 1B 04                              JNZ	SCAN7              ;If not, continue checking for an operator
  601/ 40C : 36 98                                 MVI	L, 230o               ;If yes, load L with address of FUN/ARRAY STACK
  602/ 40E : CF                                    MOV	B,M                    ;Pointer. Fetch the value in the stack pointer. Increment
  603/ 40F : 08                                    INR	B                    ;It to indicate number of "(" operators encountered.
  604/ 410 : F9                                    MOV	M,B                    ;Restore the updated stack pointer back to memory
  605/ 411 : 46 40 07                              CALL	FUNARR             ;Call subroutine to process possible FUNCTION or
  606/ 414 : 36 7E                                 MVI	L, 176o               ;ARRAY variable subscript. Ihen set pointer to
  607/ 416 : 3E 06                                 MVI	M, 006                ;PARSER TOKEN storage and set value for operator
  608/ 418 : 44 E9 03                              JMP	SCANFN             ;Go to PARSER subroutine entry point.
  609/ 41B : 3C A9                      SCAN7:     CPI	251o               ;See if character fetched from expression is
  610/ 41D : 48 34 04                              JNZ	SCAN8              ;If not, continue checking for an operator
  611/ 420 : 36 7E                                 MVI	L, 176o               ;If yes, load L with address of PARSER TOKEN
  612/ 422 : 3E 07                                 MVI	M, 007                ;Set PARSER TOKEN value to reflect ")"
  613/ 424 : 46 D4 04                              CALL	PARSER             ;Call the  PARSER subroutine to process current symbol
  614/ 427 :                            
  615/ 427 : 46 03 07                              CALL	PRIGHT             ;Call subroutine to handle FUNCTION or ARRAY
  616/ 42A : 36 98                                 MVI	L, 230o               ;Load L with address of FUN/ARRAY STACK pointer
  617/ 42C : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of FUN/ARRAY STACK pointer
  618/ 42E : CF                                    MOV	B,M                    ;Fetch the value in the stack pointer. Decrement it
  619/ 42F : 09                                    DCR	B                    ;To account for left parenthesis just processed.
  620/ 430 : F9                                    MOV	M,B                    ;Restore the updated value back to memory.
  621/ 431 : 44 C1 04                              JMP	SCAN10             ;Jump to continue processing expression.
  622/ 434 : 3C DE                      SCAN8:     CPI	336o               ;See if character fetched from expression is " t
  623/ 436 : 48 40 04                              JNZ	SCAN9              ;If not, continue checking for an operator
  624/ 439 : 36 7E                                 MVI	L, 176o               ;If yes, load L with address of PARSER TOKEN
  625/ 43B : 3E 05                                 MVI	M, 005                ;Put in value for exponentiation
  626/ 43D : 44 E9 03                              JMP	SCANFN             ;Go to PARSER subroutine entry point.
  627/ 440 : 3C BC                      SCAN9:     CPI	274o               ;See if character fetched is the "less than" sign
  628/ 442 : 48 63 04                              JNZ	SCAN11             ;If not, continue checking for an operator
  629/ 445 : 36 80                                 MVI	L, 200o               ;If yes, set L to the EVAL CURRENT pointer
  630/ 447 : CF                                    MOV	B,M                    ;Fetch the pointer
  631/ 448 : 08                                    INR	B                    ;Increment it to point to the next character
  632/ 449 : F9                                    MOV	M,B                    ;Restore the updated pointer value
  633/ 44A : 46 A0 02                              CALL	GETCHR             ;Fetch the next character in the expression
  634/ 44D : 3C BD                                 CPI	275o               ;Is the character the "= 9 $ sign?
  635/ 44F : 68 A9 04                              JZ	SCAN13             ;If so, have 'less than or equal" combination
  636/ 452 : 3C BE                                 CPI	276o               ;Is the character the "greater than" sign?
  637/ 454 : 68 B7 04                              JZ	SCAN15             ;If so, have "less than or greater than" combination
  638/ 457 : 36 80                                 MVI	L, 200o               ;Else character is not part of the operator. Set L back
  639/ 459 : CF                                    MOV	B,M                    ;To the EVAL CURRENT pointer. Fetch the pointer
  640/ 45A : 09                                    DCR	B                    ;Value and decriment it back one character in the
  641/ 45B : F9                                    MOV	M,B                    ;Expression. Restore the original pointer value.
  642/ 45C : 36 7E                                 MVI	L, 176o               ;Have just the 'less than" operator. Set L to the
  643/ 45E : 3E 09                                 MVI	M, 011o               ;PARSER TOKEN storage location and set the value for
  644/ 460 : 44 E9 03                              JMP	SCANFN             ;The 'less than" sign then go to PARSER entry point.
  645/ 463 : 3C BD                      SCAN11:    CPI	275o               ;See if character fetched is the "= " sign
  646/ 465 : 48 86 04                              JNZ	SCAN12             ;If not, continue checking for an operator
  647/ 468 : 36 80                                 MVI	L, 200o               ;If yes, set L to the EVAL CURRENT pointer
  648/ 46A : CF                                    MOV	B,M                    ;Fetch the pointer
  649/ 46B : 08                                    INR	B                    ;Increment it to point to the next character
  650/ 46C : F9                                    MOV	M,B                    ;Restore the updated pointer value
  651/ 46D : 46 A0 02                              CALL	GETCHR             ;Fetch the next character in the expression
  652/ 470 : 3C BC                                 CPI	274o               ;Is the character the "less than" sign?
  653/ 472 : 68 A9 04                              JZ	SCAN13             ;If so, have "less than or equal" combination
  654/ 475 : 3C BE                                 CPI	276o               ;Is the character the "greater than" sign?
  655/ 477 : 68 B0 04                              JZ	SCAN14             ;If so, have "equal or greater than" combination
  656/ 47A : 36 80                                 MVI	L, 200o               ;Else character is not part of the operator. Set L back
  657/ 47C : CF                                    MOV	B,M                    ;To the EVAL CURRENT pointer. Fetch the pointer
  658/ 47D : 09                                    DCR	B                    ;Value and decrement it back one character in the
  659/ 47E : F9                                    MOV	M,B                    ;Expression. Restore the original pointer value.
  660/ 47F : 36 7E                                 MVI	L, 176o               ;Just have '~-- " operator. Set L to the PARSER TOKEN
  661/ 481 : 3E 0A                                 MVI	M, 012o               ;Storage location and set the value for the sign.
  662/ 483 : 44 E9 03                              JMP	SCANFN             ;Go to the PARSER entry point.
  663/ 486 : 3C BE                      SCAN12:    CPI	276o               ;See if character fetched is the "greater than" sign
  664/ 488 : 48 BE 04                              JNZ	SCAN16             ;If not, go append the character to the SYMBOL BUFF
  665/ 48B : 36 80                                 MVI	L, 200o               ;If so, set L to the EVAL CURRENT pointer
  666/ 48D : CF                                    MOV	B,M                    ;Fetch the pointer
  667/ 48E : 08                                    INR	B                    ;Increment it to point to the next character
  668/ 48F : F9                                    MOV	M,B                    ;Restore the updated pointer value
  669/ 490 : 46 A0 02                              CALL	GETCHR             ;Fetch the next character in the expression
  670/ 493 : 3C BC                                 CPI	274o               ;Is the character the "less than" sign?
  671/ 495 : 68 B7 04                              JZ	SCAN15             ;If so, have "less than or greater than" combination
  672/ 498 : 3C BD                                 CPI	275o               ;Is the character the "= " sign?
  673/ 49A : 68 B0 04                              JZ	SCAN14             ;If so, have the "equal to or greater than " combination
  674/ 49D : 36 80                                 MVI	L, 200o               ;Else character is not part of the operator. Set L back
  675/ 49F : CF                                    MOV	B,M                    ;To the EVAL CURRENT pointer. Fetch the pointer
  676/ 4A0 : 09                                    DCR	B                    ;Value and decrement it back one character in the
  677/ 4A1 : F9                                    MOV	M,B                    ;Expression. Restore the original pointer value.
  678/ 4A2 : 36 7E                                 MVI	L, 176o               ;Have just the "greater than" operator. Set L to the
  679/ 4A4 : 3E 0B                                 MVI	M, 013o               ;PARSER TOKEN storage location and set the value for
  680/ 4A6 : 44 E9 03                              JMP	SCANFN             ;The "greater than" sign then go to PARSER entry
  681/ 4A9 : 36 7E                      SCAN13:    MVI	L, 176o               ;When have 'less than or equal" combination set L to
  682/ 4AB : 3E 0C                                 MVI	M, 014o               ;PARSER TOKEN storage location and set the value.
  683/ 4AD : 44 E9 03                              JMP	SCANFN             ;Then go to the PARSER entry point.
  684/ 4B0 : 36 7E                      SCAN14:    MVI	L, 176o               ;When have "equal to or greater than" combination set L
  685/ 4B2 : 3E 0D                                 MVI	M, 015o               ;To PARSER TOKEN storage location and set the value.
  686/ 4B4 : 44 E9 03                              JMP	SCANFN             ;Then go to the PARSER entry point.
  687/ 4B7 : 36 7E                      SCAN15:    MVI	L, 176o               ;When have 'less than or greater than" combination set
  688/ 4B9 : 3E 0E                                 MVI	M, 016o               ;L to PARSER TOKEN storage location and set value.
  689/ 4BB : 44 E9 03                              JMP	SCANFN             ;Then go to the PARSER entry point.
  690/ 4BE : 46 C8 02                   SCAN16:    CALL	CONCTS             ;Concatenate the character to the SYMBOL BUFFER
  691/ 4C1 : 36 80                      SCAN10:    MVI	L, 200o               ;Set L to the EVAL CURRENT pointer storage location
  692/ 4C3 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of EVAL CURRENT pointer
  693/ 4C5 : CF                                    MOV	B,M                    ;Fetch the EVAL CURRENT pointer value into B
  694/ 4C6 : 08                                    INR	B                    ;Increment the pointer value to point to next character
  695/ 4C7 : F9                                    MOV	M,B                    ;In the expression and restore the updated value.
  696/ 4C8 : 36 BF                                 MVI	L, 277o               ;Set L to EVAL FINISH storage location.
  697/ 4CA : C7                                    MOV	A,M                    ;Fetch the EVAL FINISH value into the accumulator.
  698/ 4CB : 09                                    DCR	B                    ;Set B to last character processed in the expression.
  699/ 4CC : B9                                    CMP	B                    ;See if last character was at EVAL FINISH location.
  700/ 4CD : 48 AC 03                              JNZ	SCAN1              ;If not, continue processing the expression. Else, jump
  701/ 4D0 : 44 C0 19                              JMP	PARSEP             ;To final evaluation procedure and test.  (Directs routine
  702/ 4D3 : 00                                    HLT             ;To a dislocated section.) Safety Halt in unused byte.
  703/ 4D4 : 36 50                      PARSER:    MVI	L, 120o               ;Load L with starting address of SYMBOL BUFFER
  704/ 4D6 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of SYMBOL BUFFER
  705/ 4D8 : C7                                    MOV	A,M                    ;Fetch the (cc) for  contents of SYMBOL BUFFER
  706/ 4D9 : A0                                    ANA	A                    ;Into the ACC and see if buffer is  empty
  707/ 4DA : 68 99 05                              JZ	PARSE              ;If empty then no need to convert contents
  708/ 4DD : 30                                    INR	L                    ;If not empty, advance buffer pointer
  709/ 4DE : C7                                    MOV	A,M                    ;Fetch the first character in the buffer
  710/ 4DF : 3C AE                                 CPI	256o               ;See if it is ASCII code for decimal sign
  711/ 4E1 : 68 EE 04                              JZ	PARNUM             ;If yes, consider contents of buffer to be a number
  712/ 4E4 : 3C B0                                 CPI	260o               ;If not decimal sign, see if first character represents
  713/ 4E6 : 70 1B 05                              JM	LOOKUP             ;A deciinal digit, if not, should have a variable
  714/ 4E9 : 3C BA                                 CPI	272o               ;Continue to test for a decimal digit
  715/ 4EB : 50 1B 05                              JP	LOOKUP             ;If not, go look up the variable nwne
  716/ 4EE : 31                         PARNUM:    DCR	L                    ;If SYMBOL BUFFER contains number, decrement
  717/ 4EF : C7                                    MOV	A,M                    ;Buffer pointer back to (cc) and fetch it to ACC
  718/ 4F0 : 3C 01                                 CPI	001o               ;See if length of string in buffer is just one
  719/ 4F2 : 68 05 05                              JZ	NOEXPO             ;If so, cannot have number with scientific notation
  720/ 4F5 : 86                                    ADD	L                    ;If not, add length to buffer pointer to
  721/ 4F6 : F0                                    MOV	L,A                    ;Point to last character in the buffer
  722/ 4F7 : C7                                    MOV	A,M                    ;Fetch the last character in buffer and see if it
  723/ 4F8 : 3C C5                                 CPI	305o               ;Represents letter E for Exponent
  724/ 4FA : 48 05 05                              JNZ	NOEXPO             ;If not, cannot have number with scientific notation
  725/ 4FD : 36 80                                 MVI	L, 200o               ;If yes, have part of a scientific number, set pointer to
  726/ 4FF : 46 A0 02                              CALL	GETCHR             ;Get the operator that follows the E and append it to
  727/ 502 : 44 C8 02                              JMP	CONCTS             ;The SYMBOL BUFFER and return to EVAL routine
  728/ 505 : 36 97                      NOEXPO:    MVI	L, 227o               ;Load L with address of ARITHMETIC STACK pointer
  729/ 507 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of ARITHMETIC STACK pointer
  730/ 509 : C7                                    MOV	A,M                    ;Fetch AS pointer value to ACC and add four to account
  731/ 50A : 04 04                                 ADI	004o               ;For the number of bytes required to store a number in
  732/ 50C : F8                                    MOV	M,A                    ;Floating point format. Restore pointer to mernory.
  733/ 50D : F0                                    MOV	L,A                    ;Then, change L to point to entry position in the AS
  734/ 50E : 46 AD 12                              CALL	FSTORE             ;Place contents of the FPACC onto top of the AS
  735/ 511 : 36 50                                 MVI	L, 120o               ;Change L to point to start of the SYMBOL BUFFER
  736/ 513 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of the SYMBOL BUFFER
  737/ 515 : 46 24 13                              CALL	DINPUT             ;Convert number in the buffer to floating point format
  738/ 518 : 44 99 05                              JMP	PARSE              ;In the FPACC then jump to check operator sign.
  739/ 51B : 36 F8                      LOOKUP:    MVI	L, 370o               ;Load L with address of LOOK-UP COUNTER
  740/ 51D : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of the counter
  741/ 51F : 3E 00                                 MVI	M, 000                ;Initialize the counter to zero
  742/ 521 : 36 50                                 MVI	L, 120o               ;Load L with starting address of the SYMBOL BUFFER
  743/ 523 : 1E 17                                 MVI	D,PG27 ;\HB\OLDPG27   ;** Load D with page of the VARIABLES TABLE
  744/ 525 : 26 88                                 MVI	E, 210o               ;Load E with start of the VARL433LES TABLE
  745/ 527 : C7                                    MOV	A,M                    ;Fetch the (cc) for the string in the SYMBOL BUFFER
  746/ 528 : 3C 01                                 CPI	001                ;See if the name length is just one character. If not,
  747/ 52A : 48 31 05                              JNZ	LOOKU1             ;Should be two so proceed to look-up routine. Else,
  748/ 52D : 36 52                                 MVI	L, 122o               ;Change L to second character byte in the buffer and set
  749/ 52F : 3E 00                                 MVI	M, 000                ;It to zero to provide compatibility with entries in table
  750/ 531 : 36 51                      LOOKU1:    MVI	L, 121o               ;Load L with addr of first character in the SYMBOL
  751/ 533 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** BUFFER. Set H to page of the SYMBOL BUFFER.
  752/ 535 : 46 EE 12                              CALL	SWITCH             ;Exchange contents of D&E with H&L so that can
  753/ 538 : C7                                    MOV	A,M                    ;Fetch the first character of a name in the VARIABLES
  754/ 539 : 30                                    INR	L                    ;TABLE. Advance the table pointer and save the
  755/ 53A : CF                                    MOV	B,M                    ;Second byte of name in B. Then advance the pointer
  756/ 53B : 30                                    INR	L                    ;Again to reach first bvte of floating point forrnatted
  757/ 53C : 46 EE 12                              CALL	SWITCH             ;Number in table. Now exchange D&E with H&L and
  758/ 53F : BF                                    CMP	M                    ;Compare first byte in table against first char in buffer
  759/ 540 : 48 49 05                              JNZ	LOOKU2             ;If not the same, go try next entry in table. If same,
  760/ 543 : 30                                    INR	L                    ;Advance pointer to next char in buffer. Transfer the
  761/ 544 : C1                                    MOV	A,B                    ;Character in B (second byte in table entry) to the ACC
  762/ 545 : BF                                    CMP	M                    ;Compare it against second character in the buffer.
  763/ 546 : 68 81 05                              JZ	LOOKU4             ;If match, have found the name in the VARIABLES tbl.
  764/ 549 : 46 AE 06                   LOOKU2:    CALL	AD4DE              ;Call subroutine to add four to the pointer in D&E to
  765/ 54C : 36 F8                                 MVI	L, 370o               ;Advance the table pointer over value bytes. Then set
  766/ 54E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Up H and L to point to LOOK-UP COUNTER.
  767/ 550 : CF                                    MOV	B,M                    ;Fetch counter value (counts number of entries tested
  768/ 551 : 08                                    INR	B                    ;In the VARIABLES TABLE), increment it
  769/ 552 : F9                                    MOV	M,B                    ;And restore it back to meynory
  770/ 553 : 36 3F                                 MVI	L, 077o               ;Load L with address of SYMBOL VARIABLES counter
  771/ 555 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Do same for H. (Counts number of names in table.)
  772/ 557 : C1                                    MOV	A,B                    ;Place LOOK-UP COUNTER value in the accumulator.
  773/ 558 : BF                                    CMP	M                    ;Compare it with number of entries in the table.
  774/ 559 : 48 31 05                              JNZ	LOOKU1             ;If have not reached end of table, keep looking for name.
  775/ 55C : 36 3F                                 MVI	L, 077o               ;If reach end of table without match, need to add name
  776/ 55E : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** To table. First set H & L to the SYMBOL
  777/ 560 : CF                                    MOV	B,M                    ;VARIABLES counter. Fetch the counter value and
  778/ 561 : 08                                    INR	B                    ;Increment to account for new name being added to the
  779/ 562 : F9                                    MOV	M,B                    ;Table. Restore the updated count to meinory. Also,
  780/ 563 : C1                                    MOV	A,B                    ;Move the new counter value to the accumulator and
  781/ 564 : 3C 15                                 CPI	025o               ;Check to see that table size is not exceeded. If try to
  782/ 566 : 50 92 02                              JP	BIGERR             ;Go over 20 (decirnal) entries then have BIG error.
  783/ 569 : 36 51                                 MVI	L, 121o               ;Else, set L to point to first character in the SYMBOL
  784/ 56B : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** BUFFER and set H to proper page. Set the number
  785/ 56D : 0E 02                                 MVI	B, 002                ;Of bytes to be transferred into register B as a counter.
  786/ 56F : 46 0B 11                              CALL	MOVEIT             ;Move the symbol name from the buffer to the
  787/ 572 : F4                                    MOV	L,E                    ;VARIABLES TABLE. Now set up H & L with value
  788/ 573 : EB                                    MOV	H,D                    ;Contained in D & E after moving ops (points to first
  789/ 574 : A8                                    XRA	A                    ;Byte of the value to be associated with the symbol
  790/ 575 : F8                                    MOV	M,A                    ;Name.) Clear the accumulator and place zero in all four
  791/ 576 : 30                                    INR	L                    ;Bytes associated with the variable name entered
  792/ 577 : F8                                    MOV	M,A                    ;In the VARIABLES TABLE
  793/ 578 : 30                                    INR	L                    ;In order to
  794/ 579 : F8                                    MOV	M,A                    ;Assign an
  795/ 57A : 30                                    INR	L                    ;Initial value
  796/ 57B : F8                                    MOV	M,A                    ;To the variable narne
  797/ 57C : C6                                    MOV	A,L                    ;Then transfer the address in L to the acc'umulator
  798/ 57D : 14 04                                 SUI	004                ;Subtract four to reset the pointer to start of zeroing ops
  799/ 57F : E0                                    MOV	E,A                    ;Restore the address in D & E to be in same state as if
  800/ 580 : DD                                    MOV	D,H                    ;Name was found in the table in the LOOKUP routine
  801/ 581 : 46 CF 12                   LOOKU4:    CALL	SAVEHL             ;Save current address to VARIABLES TABLE
  802/ 584 : 36 97                                 MVI	L, 227o               ;Load L with address of ARITHMETIC STACK pointer
  803/ 586 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of the pointer
  804/ 588 : C7                                    MOV	A,M                    ;Fetch the AS pointer value to the accumulator
  805/ 589 : 04 04                                 ADI	004                ;Add four to account for next floating point forrnatted
  806/ 58B : F8                                    MOV	M,A                    ;Number to be stored in the stack. Restore the stack
  807/ 58C : F0                                    MOV	L,A                    ;Pointer to memory and set it up in register L too.
  808/ 58D : 46 AD 12                              CALL	FSTORE             ;Place the value in the FPACC on the top of the
  809/ 590 : 46 DF 12                              CALL	RESTHL             ;ARITHMETIC STACK. Restore the VARIABLES
  810/ 593 : 46 EE 12                              CALL	SWITCH             ;TABLE pointer to H&L and move it to D&E. Now load
  811/ 596 : 46 A4 12                              CALL	FLOAD              ;The VARIABLE value from the table to the FPACC.
  812/ 599 : 46 AD 02                   PARSE:     CALL	CLESYM             ;Clear the SYMBOL BUFFER
  813/ 59C : 36 7E                                 MVI	L, 176o               ;Load L with address of PARSER TOKEN VALUE
  814/ 59E : C7                                    MOV	A,M                    ;And fetch the token value into the accumulator
  815/ 59F : 3C 07                                 CPI	007                ;Is it token value for right parenthesis ")" ? If so, have
  816/ 5A1 : 68 DA 05                              JZ	PARSE2             ;Special case where must perforin ops til find a "(" !
  817/ 5A4 : 04 A0                                 ADI	240o               ;Else, fon-n address to HEIRARCHY IN table and
  818/ 5A6 : F0                                    MOV	L,A                    ;Set L to point to HEIRARCHY IN VALUE in the table
  819/ 5A7 : CF                                    MOV	B,M                    ;Fetch the heirarchy value from the table to register B
  820/ 5A8 : 36 88                                 MVI	L, 210o               ;Set L to OPERATOR STACK pointer storage location
  821/ 5AA : D7                                    MOV	C,M                    ;Fetch the OS pointer into CPU register C
  822/ 5AB : 46 1E 13                              CALL	INDEXC             ;Add OS pointer to address of OS pointer storage loc
  823/ 5AE : C7                                    MOV	A,M                    ;Fetch the token value for the operator at top of the OS
  824/ 5AF : 04 AF                                 ADI	257o               ;And form address to HEIRARCHY OUT table
  825/ 5B1 : F0                                    MOV	L,A                    ;Set L to point to HEIRARCHY OUT VALUE in the
  826/ 5B2 : C1                                    MOV	A,B                    ;Table. Move the HEIRARCHY IN value to the ACC.
  827/ 5B3 : BF                                    CMP	M                    ;Compare the HEIRARCHY IN with the HEIRARCHY
  828/ 5B4 : 68 C7 05                              JZ	PARSE1             ;OUT value. If heirarchy of current operator equal to or
  829/ 5B7 : 70 C7 05                              JM	PARSE1             ;Less than operator on top of OS stack, perfo
  830/ 5BA : 36 7E                                 MVI	L, 176o               ;Operation indicated in top of OS stack. Else, fetch the
  831/ 5BC : CF                                    MOV	B,M                    ;Current operator token value into register B.
  832/ 5BD : 36 88                                 MVI	L, 210o               ;Load L with address of the OPERATOR STACK pntr
  833/ 5BF : D7                                    MOV	C,M                    ;Fetch the stack pointer value
  834/ 5C0 : 10                                    INR	C                    ;Increment it to account for new entry on the stack
  835/ 5C1 : FA                                    MOV	M,C                    ;Restore the stack pointer value to memory
  836/ 5C2 : 46 1E 13                              CALL	INDEXC             ;For in pointer to next entry in OPERATOR STACK
  837/ 5C5 : F9                                    MOV	M,B                    ;Place the current operator token value on top of the OS
  838/ 5C6 : 07                                    RET                    ;Exit back to the EVAL routine.
  839/ 5C7 : 36 88                      PARSE1:    MVI	L, 210o               ;Load L with address of the OPERATOR STACK pntr
  840/ 5C9 : C7                                    MOV	A,M                    ;Fetch the stack pointer value to the accumulator
  841/ 5CA : 86                                    ADD	L                    ;Add in the value of the stack pointer address to form
  842/ 5CB : F0                                    MOV	L,A                    ;Address that points to top entry in the OS
  843/ 5CC : C7                                    MOV	A,M                    ;Fetch the token value at the top of the OS to the ACC
  844/ 5CD : A0                                    ANA	A                    ;Check to see if the token value is zero for end of stack
  845/ 5CE : 2B                                    RZ                    ;Exit back to the EVAL routine if stack empty
  846/ 5CF : 36 88                                 MVI	L, 210o               ;Else, reset L to the OS pointer storage location
  847/ 5D1 : D7                                    MOV	C,M                    ;Fetch the pointer value
  848/ 5D2 : 11                                    DCR	C                    ;Decrement it to account for operator rernoved from
  849/ 5D3 : FA                                    MOV	M,C                    ;The OPERATOR STACK and restore the pointer value
  850/ 5D4 : 46 F4 05                              CALL	FPOPER             ;Perform the operation obtained from the top of the OS
  851/ 5D7 : 44 99 05                              JMP	PARSE              ;Continue to compare current operator against top of OS
  852/ 5DA : 36 88                      PARSE2:    MVI	L, 210o               ;Load L with address of the OPERATOR STACK pntr
  853/ 5DC : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of the pointer
  854/ 5DE : C7                                    MOV	A,M                    ;Fetch the stack pointer value to the accumulator
  855/ 5DF : 86                                    ADD	L                    ;Add in the value of the stack pointer address to form
  856/ 5E0 : F0                                    MOV	L,A                    ;Address that points to top entry in the OS
  857/ 5E1 : C7                                    MOV	A,M                    ;Fetch the token value at the top of the 0 S to the ACC
  858/ 5E2 : A0                                    ANA	A                    ;Check to see if the token value is zero for end of stack
  859/ 5E3 : 68 44 06                              JZ	PARNER             ;If end of stack, then have a parenthesis error condx
  860/ 5E6 : 36 88                                 MVI	L, 210o               ;Else, reset L to the OS pointer storage location
  861/ 5E8 : D7                                    MOV	C,M                    ;Fetch the pointer value
  862/ 5E9 : 11                                    DCR	C                    ;Decrement it to account for operator removed from
  863/ 5EA : FA                                    MOV	M,C                    ;The OPERATOR STACK and restore the pointer value
  864/ 5EB : 3C 06                                 CPI	006                ;Check to see if token value is "(" to close parenthesis
  865/ 5ED : 2B                                    RZ                    ;If so, exit back to EVAL routine.
  866/ 5EE : 46 F4 05                              CALL	FPOPER             ;Else, perforin the op obtained from the top of the OS
  867/ 5F1 : 44 DA 05                              JMP	PARSE2             ;Continue to process data in parenthesis
  868/ 5F4 : 36 F9                      FPOPER:    MVI	L, 371o               ;Load L with address of TEMP OP storage location
  869/ 5F6 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of TEMP OP storage location
  870/ 5F8 : F8                                    MOV	M,A                    ;Store OP (from top of OPERATOR STACK)
  871/ 5F9 : 36 97                                 MVI	L, 227o               ;Change L to address of ARff HMETIC STACK pointer
  872/ 5FB : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of AS pointer
  873/ 5FD : C7                                    MOV	A,M                    ;Fetch AS pointer value into ACC
  874/ 5FE : F0                                    MOV	L,A                    ;Set L to top of ARITHMETIC STACK
  875/ 5FF : 46 B6 12                              CALL	OPLOAD             ;Transfer number from ARffHMETIC STACK to FPOP
  876/ 602 : 36 97                                 MVI	L, 227o               ;Restore pointer to AS pointer
  877/ 604 : C7                                    MOV	A,M                    ;Fetch the pointer value to the ACC and subtract four
  878/ 605 : 14 04                                 SUI	004                ;To remove top value from the ARITHMETIC STACK
  879/ 607 : F8                                    MOV	M,A                    ;Restore the updated AS pointer to memory
  880/ 608 : 36 F9                                 MVI	L, 371o               ;Set L to address of TEMP OP storage location
  881/ 60A : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of TEMP OP storage location
  882/ 60C : C7                                    MOV	A,M                    ;Fetch the operator token value to the ACC
  883/ 60D : 3C 01                                 CPI	001                ;Find out which kind of operation indicated
  884/ 60F : 68 89 10                              JZ	FPADD              ;Perforn addition if have plus operator
  885/ 612 : 3C 02                                 CPI	002                ;If not plus, see if minus
  886/ 614 : 68 1A 11                              JZ	FPSUB              ;Perform subtraction if have minus operator
  887/ 617 : 3C 03                                 CPI	003                ;If not minus, see if multiplication
  888/ 619 : 68 26 11                              JZ	FPMULT             ;Perform multiplication if have multiplication operator
  889/ 61C : 3C 04                                 CPI	004                ;If not multiplication, see if division
  890/ 61E : 68 D2 11                              JZ	FPDIV              ;Perform division if have division operator
  891/ 621 : 3C 05                                 CPI	005                ;If not division, see if exponentiation
  892/ 623 : 68 B3 06                              JZ	INTEXP             ;Perform exponentiation if have exponentiation operator
  893/ 626 : 3C 09                                 CPI	011o               ;If not exponentiation, see if "less than" operator
  894/ 628 : 68 51 06                              JZ	LT                 ;Perform compaison for "less than" op if indicated
  895/ 62B : 3C 0A                                 CPI	012o               ;If not 'less than" see if have "equal" operator
  896/ 62D : 68 5E 06                              JZ	EQ                 ;Perforin comparison for "equal" op if indicated
  897/ 630 : 3C 0B                                 CPI	013o               ;If not "equal" see if have "greater than" operator
  898/ 632 : 68 6B 06                              JZ	GT                 ;Perform comparison for "greater than" op if indicated
  899/ 635 : 3C 0C                                 CPI	014o               ;If not "'greater than" see if have 'less than or equal" op
  900/ 637 : 68 7B 06                              JZ	LE                 ;Perform comparison for the combination op if indicated
  901/ 63A : 3C 0D                                 CPI	015o               ;See if have "equal to or greater than" operator
  902/ 63C : 68 8B 06                              JZ	GE                 ;Perform comparison for the combination op if indicated
  903/ 63F : 3C 0E                                 CPI	016o               ;See if have "less than or greater than" operator
  904/ 641 : 68 98 06                              JZ	NE                 ;Perform comparison for the combination op if indicated
  905/ 644 : 36 98                      PARNER:    MVI	L, 230o               ;If cannot find operator, expression is not balanced
  906/ 646 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H and L to address of F/A STACK pointer
  907/ 648 : 3E 00                                 MVI	M, 000                ;Clear the F/A STACK pointer to re-initialize
  908/ 64A : 06 C9                                 MVI	A, 311o               ;Load ASCII code for letter I into the accumulator
  909/ 64C : 16 A8                                 MVI	C, 250o               ;And code for "(" character into register C
  910/ 64E : 44 96 02                              JMP	ERROR              ;Go display 1( for "Imbalanced Parenthesis") error msg
  911/ 651 : 46 1A 11                   LT:        CALL	FPSUB              ;Subtract contents of FPACC from FPOP to compare
  912/ 654 : 36 56                                 MVI	L, 126o               ;Set L to point to the MSW of the FPACC (Contains
  913/ 656 : C7                                    MOV	A,M                    ;Result of the subtraction.) Fetch the MSW of the
  914/ 657 : A0                                    ANA	A                    ;FPACC to the accumulator and test to see if result is
  915/ 658 : 70 A2 06                              JM	CTRUE              ;Positive or negative. Set up the FPACC as a function
  916/ 65B : 44 A7 06                              JMP	CFALSE             ;Of the result obtained.
  917/ 65E : 46 1A 11                   EQ:        CALL	FPSUB              ;Subtract contents of FPACC from FPOP to compare
  918/ 661 : 36 56                                 MVI	L, 126o               ;Set L to point to the MSW of the FPACC (Contains
  919/ 663 : C7                                    MOV	A,M                    ;Result of the subtraction.) Fetch the MSW of the
  920/ 664 : A0                                    ANA	A                    ;FPACC to the accumulator and test to see if result is
  921/ 665 : 68 A2 06                              JZ	CTRUE              ;Equal. Set up the FPACC as a function
  922/ 668 : 44 A7 06                              JMP	CFALSE             ;Of the result obtained.
  923/ 66B : 46 1A 11                   GT:        CALL	FPSUB              ;Subtract contents of FPACC from FPOP to compare
  924/ 66E : 36 56                                 MVI	L, 126o               ;Set L to point to the MSW of the FPACC (Contains
  925/ 670 : C7                                    MOV	A,M                    ;Result of the subtraction.) Fetch the MSW of the
  926/ 671 : A0                                    ANA	A                    ;FPACC to the accumulator and test to see if result is
  927/ 672 : 68 A7 06                              JZ	CFALSE             ;Positive, Negative, or Equal. Set up the FPACC
  928/ 675 : 50 A2 06                              JP	CTRUE              ;As a function
  929/ 678 : 44 A7 06                              JMP	CFALSE             ;Of the result obtained.
  930/ 67B : 46 1A 11                   LE:        CALL	FPSUB              ;Subtract contents of FPACC from FPOP to compare
  931/ 67E : 36 56                                 MVI	L, 126o               ;Set L to point to the MSW of the FPACC (Contains
  932/ 680 : C7                                    MOV	A,M                    ;Result of the subtraction.) Fetch the MSW of the
  933/ 681 : A0                                    ANA	A                    ;FPACC to the accumulator and test to see if result is
  934/ 682 : 68 A2 06                              JZ	CTRUE              ;Positive, Negative, or Equal. Set up the FPACC
  935/ 685 : 70 A2 06                              JM	CTRUE              ;As a function
  936/ 688 : 44 A7 06                              JMP	CFALSE             ;Of the result obtained
  937/ 68B : 46 1A 11                   GE:        CALL	FPSUB              ;Submit contents of FPACC from FPOP to compare
  938/ 68E : 36 56                                 MVI	L, 126o               ;Set L to point to the MSW of the FPACC (Contains
  939/ 690 : C7                                    MOV	A,M                    ;Result of the subtraction.) Fetch the MSW of the
  940/ 691 : A0                                    ANA	A                    ;FPACC to the accumulator and test to see if result is
  941/ 692 : 50 A2 06                              JP	CTRUE              ;Positive or Negative. Set up the FPACC
  942/ 695 : 44 A7 06                              JMP	CFALSE             ;As a function of the result obtained
  943/ 698 : 46 1A 11                   NE:        CALL	FPSUB              ;Subtract contents of FPACC from FPOP to compare
  944/ 69B : 36 56                                 MVI	L, 126o               ;Set L to point to the MSW of the FPACC (Contains
  945/ 69D : C7                                    MOV	A,M                    ;Result of the subtraction.) Fetch the MSW of the
  946/ 69E : A0                                    ANA	A                    ;FPACC to the accumulator and test to see if result is
  947/ 69F : 68 A7 06                              JZ	CFALSE             ;Equal. Set up the FPACC as a function of the result.
  948/ 6A2 :                            CTRUE:
  949/ 6A2 : 36 04                      FPONE:     MVI	L, 004                ;Load L with address of floating point value +1.0
  950/ 6A4 : 44 A4 12                              JMP	FLOAD              ;Load FPACC with value +1.0 and exit to caller
  951/ 6A7 : 36 57                      CFALSE:    MVI	L, 127o               ;Load L with address of FPACC Exponent register
  952/ 6A9 : 3E 00                                 MVI	M, 000                ;Set the FPACC Exponent to zero and then set the
  953/ 6AB : 44 29 10                              JMP	FPZERO             ;Mantissa portion of the FPACC to zero. Exit to caller.
  954/ 6AE : C4                         AD4DE:     MOV	A,E                    ;Subroutine to add four to the value in register E.
  955/ 6AF : 04 04                                 ADI	004                ;Move contents of E to the ACC and add four.
  956/ 6B1 : E0                                    MOV	E,A                    ;Restore the updated value back to register E.
  957/ 6B2 : 07                                    RET                    ;Return to the caMVI L,ng routine.
  958/ 6B3 : 36 56                      INTEXP:    MVI	L, 126o               ;Load L with address of WSW of FPACC (Floating Point
  959/ 6B5 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** ACCumulator). Load H with page of FPACC.
  960/ 6B7 : C7                                    MOV	A,M                    ;Fetch MSW of the FPACC into the accumulator.
  961/ 6B8 : 36 03                                 MVI	L, 003                ;Load L with address of EXP TEMP storage location
  962/ 6BA : F8                                    MOV	M,A                    ;Store the FPACC MSW value in EXP TEMP location
  963/ 6BB : A0                                    ANA	A                    ;Test contents of the MSW of the FPACC. ff zero, then
  964/ 6BC : 68 A2 06                              JZ	FPONE              ;Set FPACC equal to +1.0 (any nr to zero power = 1.0!)
  965/ 6BF : 72 82 10                              CM	 FPCOMP             ;If MSW indicates negative number, complement
  966/ 6C2 : 46 00 10                              CALL	FPFIX              ;The FPACC. Then convert floating point number to
  967/ 6C5 : 36 54                                 MVI	L, 124o               ;Fixed point. Load L with address of LSW of fixed nr
  968/ 6C7 : CF                                    MOV	B,M                    ;Fetch the LSW into CPU register B.
  969/ 6C8 : 36 0B                                 MVI	L, 013o               ;Set L to address of EXPONENT COUNTER
  970/ 6CA : F9                                    MOV	M,B                    ;Place the fixed value in the EXP CNTR to indicate
  971/ 6CB : 36 5C                                 MVI	L, 134o               ;Number of multiplications needed (power). Now set L
  972/ 6CD : 26 0C                                 MVI	E, 014o               ;To LSW of FPOP and E to address of FP TEMP (LSW)
  973/ 6CF : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to floating point working area page.
  974/ 6D1 : DD                                    MOV	D,H                    ;Set D to same page address.
  975/ 6D2 : 0E 04                                 MVI	B, 004o               ;Set transfer (precision) counter. Call subroutine to move
  976/ 6D4 : 46 0B 11                              CALL	MOVEIT             ;Contents of FPOP into FP TEMP registers to save
  977/ 6D7 : 46 A2 06                              CALL	FPONE              ;Original value of FPOP. Now set FPACC to +1.0.
  978/ 6DA : 36 03                                 MVI	L, 003                ;Load L with pointer to original value of FPACC
  979/ 6DC : C7                                    MOV	A,M                    ;(Stored in FP TEMP) MSW and fetch contents to ACC.
  980/ 6DD : A0                                    ANA	A                    ;Test to see if raising to a negative power. If so, divide
  981/ 6DE : 70 F2 06                              JM	DVLOOP             ;Instead of multiply!
  982/ 6E1 : 36 0C                      MULOOP:    MVI	L, 014o               ;Load L with address of LSW of FP TEMP (original
  983/ 6E3 : 46 BF 12                              CALL	FACXOP             ;Value in FPOP). Move FP TEMP into FPOP.
  984/ 6E6 : 46 26 11                              CALL	FPMULT             ;Multiply FPACC by FPOP. Result left in FPACC.
  985/ 6E9 : 36 0B                                 MVI	L, 013o               ;Load L with address of EXPONENT COUNTER.
  986/ 6EB : CF                                    MOV	B,M                    ;Fetch the counter value
  987/ 6EC : 09                                    DCR	B                    ;Decrement it
  988/ 6ED : F9                                    MOV	M,B                    ;Restore it to memory
  989/ 6EE : 48 E1 06                              JNZ	MULOOP             ;If counter not zero, continue exponentiation process
  990/ 6F1 : 07                                    RET                    ;When have raised to proper power, return to caller.
  991/ 6F2 : 36 0C                      DVLOOP:    MVI	L, 014o               ;Load L with address of LSW of FP TEMP (original
  992/ 6F4 : 46 BF 12                              CALL	FACXOP             ;Value in FPOP). Move FP TEMP into FPOP.
  993/ 6F7 : 46 D2 11                              CALL	FPDIV              ;Divide FPACC by FPOP. Result left in FPACC.
  994/ 6FA : 36 0B                                 MVI	L, 013o               ;Load L with address of EXPONENT COUNTER
  995/ 6FC : CF                                    MOV	B,M                    ;Fetch the counter value
  996/ 6FD : 09                                    DCR	B                    ;Decrement it
  997/ 6FE : F9                                    MOV	M,B                    ;Restore to memory
  998/ 6FF : 48 F2 06                              JNZ	DVLOOP             ;If counter not zero, continue exponentiation process
  999/ 702 : 07                                    RET                    ;When have raised to proper power, return to caller.
 1000/ 703 :                            
 1001/ 703 :                            ;;; The label PRIGHT: SHOULD BE UP TO 07 003 0703h
 1002/ 703 : 36 98                      PRIGHT:    MVI	L, 230o               ;Load L with address of F/A STACK pointer
 1003/ 705 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of F/A STACK pointer
 1004/ 707 : C7                                    MOV	A,M                    ;Fetch the pointer value into the ACC
 1005/ 708 : 86                                    ADD	L                    ;Form pointer to top of the F/A STACK
 1006/ 709 : F0                                    MOV	L,A                    ;Set L to point to top of the F/A STACK
 1007/ 70A : C7                                    MOV	A,M                    ;Fetch the contents of the top of the F/A STACK into
 1008/ 70B : 3E 00                                 MVI	M, 000                ;The ACC then clear the top of the F/A STACK
 1009/ 70D : 36 83                                 MVI	L, 203o               ;Load L with address of F /A STACK TEMP storage
 1010/ 70F : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Location. Set H to page of F/A STACK TEMP
 1011/ 711 : F8                                    MOV	M,A                    ;Store value from top of F/A STACK into temp loc.
 1012/ 712 : A0                                    ANA	A                    ;Test to see if token value in top of stack was zero
 1013/ 713 : 2B                                    RZ                    ;If so, just had simple grouping parenthesis!
 1014/ 714 : 70 00 2D                              JM	PRIGH1             ;@@ If token value minus, indicates array subscript
 1015/ 717 : 3C 01                                 CPI	001                ;For positive token value, look for appropriate function
 1016/ 719 : 68 A3 07                              JZ	INTX               ;If token value for INTeger function, go do it.
 1017/ 71C : 3C 02                                 CPI	002                ;Else, see if token value for SIGN function.
 1018/ 71E : 68 F0 07                              JZ	SGNX               ;If so, go do it.
 1019/ 721 : 3C 03                                 CPI	003                ;Else, see if token value for ABSolute function
 1020/ 723 : 68 E6 07                              JZ	ABSX               ;If so, go do it.
 1021/ 726 : 3C 04                                 CPI	004                ;If not, see if token value for SQuare Root function
 1022/ 728 : 68 00 1A                              JZ	SQRX               ;If so, go do it.
 1023/ 72B : 3C 05                                 CPI	005                ;If not, see if token value for TAB function
 1024/ 72D : 68 0F 08                              JZ	TABX               ;If so, go do it.
 1025/ 730 : 3C 06                                 CPI	006                ;If not, see if token value for RaNDom function
 1026/ 732 : 68 A0 1A                              JZ	RNDX               ;If so, go find a random number.
 1027/ 735 : 3C 07                                 CPI	007                ;If not, see if token value for CHaRacter function
 1028/ 737 : 68 FF 07                              JZ	CHRX               ;If so, go perform the function.
 1029/ 73A : 3C 08                                 CPI	010o               ;Else, see if token for user defined machine language
 1030/ 73C : 68 55 30                              JZ	UDEFX              ;# Function. If so, perform the User DEfined Function
 1031/ 73F : 00                                    HLT             ;Safety halt. Program should not reach this location!
 1032/ 740 :                            
 1033/ 740 :                            ;;; The label FUNARR SHOULD BE AT 07 100 0740h
 1034/ 740 : 36 50                      FUNARR:    MVI	L, 120o               ;Load L with starting address of SYMBOL BUFFER
 1035/ 742 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of SYMBOL BUFFER
 1036/ 744 : C7                                    MOV	A,M                    ;Fetch the (cc) for contents of buffer to the ACC
 1037/ 745 : A0                                    ANA	A                    ;See if (cc) is zero, if so buffer is empty, return to
 1038/ 746 : 2B                                    RZ                    ;Caller as have simple grouping parenthesis sign
 1039/ 747 : 36 82                                 MVI	L, 202o               ;Else set L to TEMP COUNTER location
 1040/ 749 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to TEMP COUNTER page
 1041/ 74B : 3E 00                                 MVI	M, 000                ;Initialize TEMP COUNTER to zero
 1042/ 74D : 36 82                      FUNAR1:    MVI	L, 202o               ;Load L with address of TEMP COUNTER
 1043/ 74F : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of TEMP COUNTER
 1044/ 751 : CF                                    MOV	B,M                    ;Fetch the counter value to register B
 1045/ 752 : 08                                    INR	B                    ;Increment the counter
 1046/ 753 : F9                                    MOV	M,B                    ;Restore the updated value to memory
 1047/ 754 : 16 02                                 MVI	C, 002                ;Initialize C to a value of two for future ops
 1048/ 756 : 36 BC                                 MVI	L, 274o               ;Load L with starting address (less four) of FUNCTION
 1049/ 758 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** LOOK-UP TABLE. Set H to table page.
 1050/ 75A : 46 98 07                              CALL	TABADR             ;Find address of next entry in the table
 1051/ 75D : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Load D with page of SYMBOL BUFFER
 1052/ 75F : 26 50                                 MVI	E, 120o               ;Load E with starting address of SYMBOL BUFFER
 1053/ 761 : 46 DA 02                              CALL	STRCP              ;Compare entry in FUNCTION LOOK-UP TABLE with
 1054/ 764 : 68 87 07                              JZ	FUNAR4             ;Contents of SYMBOL BUFFER. If find match, go set
 1055/ 767 : 36 82                                 MVI	L, 202o               ;Up the function token value. Else, set L to the TEMP
 1056/ 769 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** COUNTER and set H to the proper page. Fetch the
 1057/ 76B : C7                                    MOV	A,M                    ;Current counter value and see if have tried all eight
 1058/ 76C : 3C 08                                 CPI	010o               ;Possible functions in the table.
 1059/ 76E : 48 4D 07                              JNZ	FUNAR1             ;If not, go back and check the next entry.
 1060/ 771 : 36 82                                 MVI	L, 202o               ;If have tried all of the entries in the table, set L
 1061/ 773 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** As well as H to the address of the TEMP COUI,.7ER
 1062/ 775 : 3E 00                                 MVI	M, 000                ;And reset it to zero. Now go see if have subscripted
 1063/ 777 : 44 2C 2D                              JMP	FUNAR2             ;@@ Array (unless array capability not in program).
 1064/ 77A : 36 98                      FAERR:     MVI	L, 230o               ;Load L with address of F/A STACK pointer
 1065/ 77C : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of F/A STACK pointer
 1066/ 77E : 3E 00                                 MVI	M, 000                ;Clear the F/A STACK pointer to reset on an error
 1067/ 780 : 06 C6                                 MVI	A, 306o               ;Load the ASCII code for letter F into the ACC
 1068/ 782 : 16 C1                                 MVI	C, 301o               ;Load the ASCII code for letter A into register C
 1069/ 784 : 44 96 02                              JMP	ERROR              ;Go display the FA error message
 1070/ 787 : 36 82                      FUNAR4:    MVI	L, 202o               ;Load L with address of TEMP COUNTER
 1071/ 789 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of TEMP COUNTER
 1072/ 78B : CF                                    MOV	B,M                    ;Load value in counter to register B. This is FUNCTION
 1073/ 78C : 36 98                                 MVI	L, 230o               ;TOKEN VALUE. Cbange- L to F/A STACK pointer.
 1074/ 78E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of F/A STACK pointer.
 1075/ 790 : D7                                    MOV	C,M                    ;Fetch the F/A STACK pointer value into register C.
 1076/ 791 : 46 1E 13                              CALL	INDEXC             ;Form the address to the top of the F/A STACK.
 1077/ 794 : F9                                    MOV	M,B                    ;Store the FUNCTION TOKEN VALUE in the F/A
 1078/ 795 : 44 AD 02                              JMP	CLESYM             ;STACK. Then exit by clearing the SYMBOL BUFFER.
 1079/ 798 : C1                         TABADR:    MOV	A,B                    ;Move the TEMP COUNTER value from B to ACC
 1080/ 799 : 02                         TABAD1:    RLC                    ;Multiply by four using this loop to form value equal
 1081/ 79A : 11                                    DCR	C                    ;To number of bytes per entry (4) times current entry
 1082/ 79B : 48 99 07                              JNZ	TABAD1             ;In the FUNCTION LOOK-UP TABLE.
 1083/ 79E : 86                                    ADD	L                    ;Add this value to the starting address of the table.
 1084/ 79F : F0                                    MOV	L,A                    ;Form pointer to next entry in table
 1085/ 7A0 : 03                                    RNC                    ;If no carry return to caller
 1086/ 7A1 : 28                                    INR	H                    ;Else, increment H before
 1087/ 7A2 : 07                                    RET                    ;Returning to caller
 1088/ 7A3 :                            
 1089/ 7A3 :                            ;;; The label INTX SHOULD BE AT 07 243 07a3h
 1090/ 7A3 : 36 56                      INTX:      MVI	L, 126o               ;Load L with address of MSW of the FPACC
 1091/ 7A5 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with the page of the PPACC
 1092/ 7A7 : C7                                    MOV	A,M                    ;Fetch the MSW of the FPACC into the accumulator
 1093/ 7A8 : A0                                    ANA	A                    ;Test the sign of the number in the FPACC. If
 1094/ 7A9 : 50 D7 07                              JP	INT1               ;Positive jump ahead to integerize
 1095/ 7AC : 36 0C                                 MVI	L, 014o               ;If negative, load L with address of FP TEMP registers
 1096/ 7AE : 46 AD 12                              CALL	FSTORE             ;Store the value in the FPACC in FP TEMP
 1097/ 7B1 : 46 00 10                              CALL	FPFIX              ;Convert the value in FPACC from floating point to
 1098/ 7B4 : 36 53                                 MVI	L, 123o               ;Fixed point. Load L with address of FPACC
 1099/ 7B6 : 3E 00                                 MVI	M, 000                ;Extension register and clear it.
 1100/ 7B8 : 46 34 10                              CALL	FPFLT              ;Convert fixed binary back to FP to integerize
 1101/ 7BB : 36 0C                                 MVI	L, 014o               ;Load L with address of FP TEMP registers
 1102/ 7BD : 46 B6 12                              CALL	OPLOAD             ;Load the value in FP TEMP into FPOP
 1103/ 7C0 : 46 1A 11                              CALL	FPSUB              ;Subtract integerized value from original
 1104/ 7C3 : 36 56                                 MVI	L, 126o               ;Set L to address of MSW of FPACC
 1105/ 7C5 : C7                                    MOV	A,M                    ;Fetch the MSW of the FPACC into the accumulator
 1106/ 7C6 : A0                                    ANA	A                    ;See if original value and integerized value the same
 1107/ 7C7 : 68 E1 07                              JZ	INT2               ;If so, have integer value in FP TEMP
 1108/ 7CA : 36 0C                                 MVI	L, 014o               ;Else, load L with address of FP TEMP registers
 1109/ 7CC : 46 A4 12                              CALL	FLOAD              ;Restore FPACC to original (non-integerized) value
 1110/ 7CF : 36 14                                 MVI	L, 024o               ;Set L to register containing small value
 1111/ 7D1 : 46 BF 12                              CALL	FACXOP             ;Set up to add small value to original value in FPACC
 1112/ 7D4 : 46 89 10                              CALL	FPADD              ;Perform the addition
 1113/ 7D7 : 46 00 10                   INT1:      CALL	FPFIX              ;Convert the number in FPACC from floating point
 1114/ 7DA : 36 53                                 MVI	L, 123o               ;To fixed point. Load L with address of FPACC
 1115/ 7DC : 3E 00                                 MVI	M, 000                ;Extension register and clear it. Now convert the number
 1116/ 7DE : 44 34 10                              JMP	FPFLT              ;Back to floating point to integerize it and exit to caller
 1117/ 7E1 : 36 0C                      INT2:      MVI	L, 014o               ;Load L with address of FP TEMP registers. Transfer
 1118/ 7E3 : 44 A4 12                              JMP	FLOAD              ;Number from FP TEMP (orig) to FPACC and return.
 1119/ 7E6 : 36 56                      ABSX:      MVI	L, 126o               ;Load L with address of MSW of the FPACC
 1120/ 7E8 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of the FPACC
 1121/ 7EA : C7                                    MOV	A,M                    ;Fetch the MSW of the FPACC into the accumulator
 1122/ 7EB : A0                                    ANA	A                    ;Test the sign of the number to see if it is positive.
 1123/ 7EC : 70 82 10                              JM	FPCOMP             ;If negative, complement the number before returning.
 1124/ 7EF : 07                                    RET                    ;Else, just return with absolute value in the FPACC.
 1125/ 7F0 : 36 56                      SGNX:      MVI	L, 126o               ;Load L with address of MSW of the FPACC
 1126/ 7F2 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with the page of the FPACC
 1127/ 7F4 : C7                                    MOV	A,M                    ;Fetch the MSW of the FPACC into the accumulator
 1128/ 7F5 : A0                                    ANA	A                    ;Test to see if the FPACC is zero
 1129/ 7F6 : 2B                                    RZ                    ;Return to caller if FPACC is zero
 1130/ 7F7 : 50 A2 06                              JP	FPONE              ;If FPACC is positive, load +1.0 into FPACC and exit
 1131/ 7FA : 36 14                                 MVI	L, 024o               ;If FPACC is negative, set up to load -1.0 into the
 1132/ 7FC : 44 A4 12                              JMP	FLOAD              ;FPACC and exit to caller
 1133/ 7FF : 46 00 10                   CHRX:      CALL	FPFIX              ;Convert contents of FPACC from floating point to
 1134/ 802 : 36 54                                 MVI	L, 124o               ;Fixed point. Load L with address of LSW of fixed
 1135/ 804 : C7                                    MOV	A,M                    ;Value. Fetch this byte into the accumulator.
 1136/ 805 : 46 82 03                              CALL	ECHO               ;Display the value.
 1137/ 808 : 36 7F                                 MVI	L, 177o               ;Set L to address of the TAB FLAG
 1138/ 80A : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of the TAB FLAG
 1139/ 80C : 3E FF                                 MVI	M, 377o               ;Set TAB FLAG (to inhibit display of FP value)
 1140/ 80E : 07                                    RET                    ;Exit to caller.
 1141/ 80F : 46 00 10                   TABX:      CALL	FPFIX              ;Convert contents of FPACC from floating point to
 1142/ 812 : 36 54                      TAB1:      MVI	L, 124o               ;Fixed point. Load L with address of 1,SW of fixed
 1143/ 814 : C7                                    MOV	A,M                    ;Value. Fetch this byte into the accumulator.
 1144/ 815 : 36 23                                 MVI	L, 043o               ;Load L with address of COLUMN COUNTER
 1145/ 817 : 97                                    SUB	M                    ;Subtract value in C-OLUMN COUNTER from desired
 1146/ 818 : 36 7F                                 MVI	L, 177o               ;TAB position. Load L with address of the TAB FLAG.
 1147/ 81A : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of the TAB FLAG.
 1148/ 81C : 3E FF                                 MVI	M, 377o               ;Set TAB FLAG (to inhibit display of FP value)
 1149/ 81E : 70 8F 19                              JM	BACKSP             ;If beyond TAB point desired, simulate back spacing
 1150/ 821 : 2B                                    RZ                    ;Return to caller if at desired TAB location
 1151/ 822 : D0                         TABC:      MOV	C,A                    ;Else, put difference count in register C
 1152/ 823 : 06 A0                                 MVI	A, 240o               ;Place ASCII code for space in ACC
 1153/ 825 : 46 82 03                   TABLOP:    CALL	ECHO               ;Display space on output device
 1154/ 828 : 11                                    DCR	C                    ;Decrement displacement counter
 1155/ 829 : 48 25 08                              JNZ	TABLOP             ;If have not reached TAB position, continue to space
 1156/ 82C : 07                                    RET                    ;Else, return to calling routine.
 1157/ 82D :                            
 1158/ 82D :                            ;;; The label STOSYM should be AT 10 055 082dh
 1159/ 82D : 36 81                      STOSYM:    MVI	L, 201o               ;Load L with address of ARRAY FLAG
 1160/ 82F : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of ARRAY FLAG
 1161/ 831 : C7                                    MOV	A,M                    ;Fetch the value of the ARRAY FLAG into the ACC
 1162/ 832 : A0                                    ANA	A                    ;Check to see if the flag is set indicating processing an
 1163/ 833 : 68 40 08                              JZ	STOSY1             ;Array variable value. Jump ahead if flag not set.
 1164/ 836 : 3E 00                                 MVI	M, 000                ;If ARRAY FLAG was set, clear it for next time.
 1165/ 838 : 36 84                                 MVI	L, 204o               ;Then load L with address of array address storage loc
 1166/ 83A : F7                                    MOV	L,M                    ;Fetch the array storage address as new pointer
 1167/ 83B : 2E 2F                                 MVI	H,PG57 ;\HB\OLDPG57   ;tt Set H to ARRAY VALUES page   ****************
 1168/ 83D : 44 AD 12                              JMP	FSTORE             ;Store the array variable value and exit to caller.
 1169/ 840 : 36 F8                      STOSY1:    MVI	L, 370o               ;Load L with address of TEMP CNTR
 1170/ 842 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of TEMP CNTR
 1171/ 844 : 3E 00                                 MVI	M, 000                ;Initialize the TEMP CNTR by clearing it
 1172/ 846 : 36 50                                 MVI	L, 120o               ;Load L with starting address of SYMBOL BUFFER
 1173/ 848 : 1E 17                                 MVI	D,PG27 ;\HB\OLDPG27   ;** Load D with page of VARIABLES LOOK-UP table
 1174/ 84A : 26 88                                 MVI	E, 210o               ;Load E with starting addr of VARIABLES LOOK-UP
 1175/ 84C : C7                                    MOV	A,M                    ;Table. Fetch the (cc) for the SYMBOL BUFFER into
 1176/ 84D : 3C 01                                 CPI	001                ;The ACC and see if length of variable name is just one
 1177/ 84F : 48 56 08                              JNZ	STOSY2             ;Character. If not, skip next couple of instructions.
 1178/ 852 : 36 52                                 MVI	L, 122o               ;Else, set pointer to second character location in the
 1179/ 854 : 3E 00                                 MVI	M, 000                ;SYMBOL BUFFER and set it to zero
 1180/ 856 : 36 51                      STOSY2:    MVI	L, 121o               ;load L with address of first character in the SYMBOL
 1181/ 858 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** BUFFER. Load H with page of the buffer.
 1182/ 85A : 46 EE 12                              CALL	SWITCH             ;Exchange pointer to buffer for pointer to VARIABLES
 1183/ 85D : C7                                    MOV	A,M                    ;LOOK-UP table. Fetch first char in a name from the
 1184/ 85E : 30                                    INR	L                    ;Table. Advance the pointer to second char in a name.
 1185/ 85F : CF                                    MOV	B,M                    ;Fetch the second character into register B.
 1186/ 860 : 30                                    INR	L                    ;Advance the pointer to first byte of a value in the table.
 1187/ 861 : 46 EE 12                              CALL	SWITCH             ;Exchange table pointer for pointer to SYMBOL BUFF
 1188/ 864 : BF                                    CMP	M                    ;Compare first character in buffer against first character
 1189/ 865 : 48 6E 08                              JNZ	STOSY3             ;In table entry. If no match, try next entry in the table.
 1190/ 868 : 30                                    INR	L                    ;If match, advance pointer to second character in buffer.
 1191/ 869 : C1                                    MOV	A,B                    ;Move second character obtained from table into ACC.
 1192/ 86A : BF                                    CMP	M                    ;Compare second characters in table and buffer.
 1193/ 86B : 68 97 08                              JZ	STOSY5             ;If same, have found the variable name in the table.
 1194/ 86E : 46 AE 06                   STOSY3:    CALL	AD4DE              ;Add four to pointer in registers D&E to skip over value
 1195/ 871 : 36 F8                                 MVI	L, 370o               ;Portion of entry in table. Load L with address of TEMP
 1196/ 873 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** CNTR. Load H with page of TEMP CNTR.
 1197/ 875 : CF                                    MOV	B,M                    ;Fetch the counter
 1198/ 876 : 08                                    INR	B                    ;Increment the counter
 1199/ 877 : F9                                    MOV	M,B                    ;Restore it to storage
 1200/ 878 : 36 3F                                 MVI	L, 077o               ;Set L to address of VARIABLES CNTR (indicates
 1201/ 87A : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Number of variables currently in table.) Set H too
 1202/ 87C : C1                                    MOV	A,B                    ;Move the TEMP CNTR value into the ACC. (Number of
 1203/ 87D : BF                                    CMP	M                    ;Entries checked.) Compare with number of entries in
 1204/ 87E : 48 56 08                              JNZ	STOSY2             ;The table. If have not checked all entries, try next one.
 1205/ 881 : 36 3F                                 MVI	L, 077o               ;If have checked all entries, load L with address of the
 1206/ 883 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** VARIABLES CNTR. Set H too. Fetch the counter
 1207/ 885 : CF                                    MOV	B,M                    ;Value and incrernent it to account for
 1208/ 886 : 08                                    INR	B                    ;New variable nwne that will now be
 1209/ 887 : F9                                    MOV	M,B                    ;Added to the table. Save the new value.
 1210/ 888 : C1                                    MOV	A,B                    ;Place the new counter value into the accumulator
 1211/ 889 : 3C 15                                 CPI	025o               ;And check to see that adding new variable name to the
 1212/ 88B : 50 92 02                              JP	BIGERR             ;Table will not cause table overflow. Big Error if it does!
 1213/ 88E : 36 51                                 MVI	L, 121o               ;If room available in table, set L to address of first
 1214/ 890 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Caracter in the SYMBOL BUFFER. Set H too.
 1215/ 892 : 0E 02                                 MVI	B, 002                ;Set a counter for number of characters to transfer.
 1216/ 894 : 46 0B 11                              CALL	MOVEIT             ;Move the variable name from buffer to table.
 1217/ 897 : 46 EE 12                   STOSY5:    CALL	SWITCH             ;Exchange buffer pointer for table pointer.
 1218/ 89A : 46 AD 12                              CALL	FSTORE             ;Transfer new mathematical value into the table.
 1219/ 89D : 44 AD 02                              JMP	CLESYM             ;Clear the SYMBOL BUFFER and exit to calling routine.
 1220/ 8A0 :                            
 1221/ 8A0 :                                                              ;The subroutines below are used by some of the routines
 1222/ 8A0 :                                                              ;in this chapter as well as other parts of the program.
 1223/ 8A0 :                            
 1224/ 8A0 : 36 50                      SAVESY:    MVI	L, 120o               ;Load L with the address of the start of the SYMBOL
 1225/ 8A2 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** BUFFER. Load H with the page of the buffer.
 1226/ 8A4 : DD                                    MOV	D,H                    ;Load register D with the page of the AUX SYMBOL
 1227/ 8A5 : 26 64                                 MVI	E, 144o               ;BUFFER and set register E to start of that buffer.
 1228/ 8A7 : 44 B1 08                              JMP	MOVECP             ;Transfer SYMBOL BF contents to AUX SYMBOL BF
 1229/ 8AA :                            
 1230/ 8AA : 36 64                      RESTSY:    MVI	L, 144o               ;Load L with address of start of AUX SYMBOL BUFF
 1231/ 8AC : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of AUX SYMBOL BUFFER
 1232/ 8AE : DD                                    MOV	D,H                    ;Set D to page of SYMBOL BUFFER (same as H)
 1233/ 8AF : 26 50                                 MVI	E, 120o               ;Load E with start of SYMBOL BUFFER
 1234/ 8B1 : CF                         MOVECP:    MOV	B,M                    ;Load (cc) for source string (first byte in source buffer)
 1235/ 8B2 : 08                                    INR	B                    ;Add one to (cc) to include (cc) byte itself
 1236/ 8B3 : 44 0B 11                              JMP	MOVEIT             ;Move the source string to destination buffer
 1237/ 8B6 :                            
 1238/ 8B6 :                            ;;; The label Exec SHOULD BE AT 10 266 (This is the start of the code) 08b6h
 1239/ 8B6 : 36 EA                      EXEC:      MVI	L, 352o               ;Load L with address of READY message
 1240/ 8B8 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of READY message
 1241/ 8BA : 46 51 03                              CALL	TEXTC              ;Call subroutine to display the READY message
 1242/ 8BD :                            
 1243/ 8BD : 36 00                      EXEC1:     MVI	L, 000                ;Load L with starting address of INPUT LINE BUFFER
 1244/ 8BF : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of INPUT LINE BUFFER
 1245/ 8C1 : 46 0C 03                              CALL	STRIN              ;Call subroutine to input a line into the buffer
 1246/ 8C4 : C7                                    MOV	A,M                    ;The STRIN subroutine will exit with pointer set to the
 1247/ 8C5 : A0                                    ANA	A                    ;CHARACTER COUNT for the line inputted. Fetch the
 1248/ 8C6 : 68 BD 08                              JZ	EXEC1              ;Value of the counter, if it is zero then line was blank.
 1249/ 8C9 : 36 DD                                 MVI	L, 335o               ;Load L with address of LIST in look up table
 1250/ 8CB : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;Load H with address of LIST in look up table
 1251/ 8CD : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;Load D with page of line input buffer
 1252/ 8CF : 26 00                                 MVI	E, 000                ;Load E with start of line input buffer
 1253/ 8D1 : 46 DA 02                              CALL	STRCP              ;Call string compare subroutine to see if first word in
 1254/ 8D4 : 48 EC 08                              JNZ	NOLIST             ;Input buffer is LIST. Jump 3 ahead if not LIST.
 1255/ 8D7 : 36 00                                 MVI	L, 000                ;If LIST, set up pointers to start of USER PROGRAM
 1256/ 8D9 : 2E 1B                                 MVI	H, BGNPGRAM           ;BUFFER. (Note user could alter this starting addr)   *****
 1257/ 8DB :                            
 1258/ 8DB :                                                              ;Next portion of program will LIST the contents of the
 1259/ 8DB :                                                              ;USER PROGRAM BUFFER until an end of buffer
 1260/ 8DB :                                                              ;(zero byte) indicator is detected.
 1261/ 8DB :                            
 1262/ 8DB : C7                         LIST:      MOV	A,M                    ;Fetch the first byte of a line in the USER PROGRAM
 1263/ 8DC : A0                                    ANA	A                    ;BUFFER and see if it is zero. If so, have finished LIST
 1264/ 8DD : 68 B6 08                              JZ	EXEC               ;So go back to start of Executive and display READY.
 1265/ 8E0 : 46 51 03                              CALL	TEXTC              ;Else call subroutine to display a line of information
 1266/ 8E3 : 46 FF 02                              CALL	ADV                ;Now call subroutine to advance buffer pointer to
 1267/ 8E6 : 46 61 03                              CALL	CRLF               ;Character count in next line. Also display a CR & LF.
 1268/ 8E9 : 44 DB 08                              JMP	LIST               ;Continue LISTing process
 1269/ 8EC :                            
 1270/ 8EC :                                                              ;If line inputted by operator did not contain a LIST comman
 1271/ 8EC :                                                              ;continue program to see if RUN or SCRatch command.
 1272/ 8EC :                            
 1273/ 8EC : 36 E2                      NOLIST:    MVI	L, 342o               ;Load L with address of RUN in look up table
 1274/ 8EE : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with address of RUN in look up table
 1275/ 8F0 : 26 00                                 MVI	E, 000                ;Load E with start of line input buffer
 1276/ 8F2 : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Load D with page of line input buffer
 1277/ 8F4 : 26 00                                 MVI	E, 000                ;(Reserve 2 locs in case of patching by duplicating above)
 1278/ 8F6 : 46 DA 02                              CALL	STRCP              ;Call string compare subroutine to see if first word in
 1279/ 8F9 : 68 38 0B                              JZ	RUN                ;Input buffer is RUN. Go to RUN routine if match.
 1280/ 8FC : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** If not RUN command, reset address pointers back
 1281/ 8FE : 26 00                                 MVI	E, 000                ;To the start of the line input buffer
 1282/ 900 : 36 E6                                 MVI	L, 346o               ;Load L with address of SCR in look up table
 1283/ 902 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of SCR in look up table
 1284/ 904 : 46 DA 02                              CALL	STRCP              ;Call string compare subroutine to see if first word in
 1285/ 907 : 48 39 09                              JNZ	NOSCR              ;Input buffer is SCR. If not then jump ahead.
 1286/ 90A : 2E 16                      ENTRY_SCR: MVI	H,PG26 ;\HB\OLDPG26   ;** If found SCR command then load memory pointer
 1287/ 90C : 36 F4                                 MVI	L, 364o               ;With address of a pointer storage location. Set that
 1288/ 90E : 3E 1B                                 MVI	M, BGNPGRAM           ;tt Storage location to page of start of USER PRO-  *******
 1289/ 910 : 30                                    INR	L                    ;GRAM BUFFER. (Buffer start loc may be altered).
 1290/ 911 : 3E 00                                 MVI	M, 000                ;Then adv pntr and do same for low addr portion of pntr
 1291/ 913 : 36 3F                                 MVI	L, 077o               ;Now set pointer to address of VARIABLES counter
 1292/ 915 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Storage location. Initialize this counter by placing
 1293/ 917 : 3E 01                                 MVI	M, 001                ;The count of one into it. Now change the memory pntr
 1294/ 919 :                            ;MGA 3/31/12 put it back to 001; solves nested FOR/NEXT, but limits vars to 19
 1295/ 919 :                            ;   as the letter from James Tucker (1/77) mentioned
 1296/ 919 :                            ;   apparently, James didn't test FOR/NEXT; original Loboyko didn't have this
 1297/ 919 :                            ;;;           LMI 001                ;The count of one into it. Now change the memory pntr
 1298/ 919 :                            ;;; Apparently, in Page 3 of Issue 4 of Scelbal update (1/77) they say the above should change.
 1299/ 919 :                            ;;; This makes the SCR command clear the whole variable space, otherwise one space is lost.  
 1300/ 919 : 36 3D                                 MVI	L, 075o               ;To storage location for number of dimensioned arrays
 1301/ 91B : 3E 00                                 MVI	M, 000                ;@@ And initialize to zero. (@@ = Substitute NOPs if
 1302/ 91D : 36 50                                 MVI	L, 120o               ;@@ DIMension capability not used in package.) Also
 1303/ 91F : 3E 00                                 MVI	M, 000                ;@@ Initialize l'st byte of array name table to zero.
 1304/ 921 : 36 88                                 MVI	L, 210o               ;Set pointer to storage location for the first byte of the
 1305/ 923 : 3E 00                                 MVI	M, 000                ;VARIABLES symbol table. Initialize it to zero too.
 1306/ 925 : 30                                    INR	L                    ;Advance the pointer and zero the second location
 1307/ 926 : 3E 00                                 MVI	M, 000                ;In the Variables table also.
 1308/ 928 : 2E 1B                                 MVI	H, BGNPGRAM           ;tt Load H with page of start of USER PROGRAM    **********
 1309/ 92A : 36 00                                 MVI	L, 000                ;BUFFER. (Buffer start location could be altered.)
 1310/ 92C : 3E 00                                 MVI	M, 000                ;Clear first location to indicate end of user program.
 1311/ 92E : 2E 2F                                 MVI	H,PG57 ;\HB\OLDPG57   ;@@ Load H with page of ARRAYS storage
 1312/ 930 : 3E 00                      SCRLOP:    MVI	M, 000                ;@@ And form a loop to clear out all the locations
 1313/ 932 : 30                                    INR	L                    ;@@ On the ARRAYS storage page. (@@ These become
 1314/ 933 : 48 30 09                              JNZ SCRLOP             ;@@ NOPs if DIMension capability deleted fm package.)
 1315/ 936 : 44 B6 08                              JMP EXEC               ;SCRatch operations completed, go back to EXEC.
 1316/ 939 :                            
 1317/ 939 :                                                              ;If line inputted did not contain RUN or SCRatch com-
 1318/ 939 :                                                              ;mand, program continues by testing for SAVE or LOAD
 1319/ 939 :                                                              ;commands. If it does not find either of these com-
 1320/ 939 :                                                              ;mands, then operator did not input an executive com-
 1321/ 939 :                                                              ;mand. Program then sets up to see if the first entry in
 1322/ 939 :                                                              ;the line inputted is a LINE NUMBER.
 1323/ 939 :                            
 1324/ 939 : 26 BA                      NOSCR:     MVI	E, 272o               ;Load E with address of SAVE in look up table
 1325/ 93B : 1E 01                                 MVI	D,PG01 ;\HB\OLDPG1    ;Load D with page of look up table
 1326/ 93D : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;Load H with page of input line buffer
 1327/ 93F : 36 00                                 MVI	L, 000                ;Set L to start of input line buffer
 1328/ 941 : 46 DA 02                              CALL	STRCP              ;Call string compare subroutine to see if first word in
 1329/ 944 : 68 56 30                              JZ	SAVE               ;tt Input buffer is SAVE. If so, go to user's SAVE rtn
 1330/ 947 : 36 BF                                 MVI	L, 277o               ;If not SAVE then load L with address of LOAD in look
 1331/ 949 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;Up table and load H with page of look up table
 1332/ 94B : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;Load D with page of input line buffer
 1333/ 94D : 26 00                                 MVI	E, 000                ;And L to start of input line buffer
 1334/ 94F : 46 DA 02                              CALL	STRCP              ;Call string compare subroutine to see if first word in
 1335/ 952 : 68 56 30                              JZ	LOAD               ;tt Input buffer is LOAD. If so, go to user's LOAD rtn
 1336/ 955 : 36 F0                                 MVI	L, 360o               ;If not LOAD then set pointer to address of storage loc
 1337/ 957 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** For USER PROGRAM BUFFER pointer. Initialize this
 1338/ 959 : 3E 1B                                 MVI	M, BGNPGRAM           ;tt Pointer to the starting address of the program buffer.
 1339/ 95B : 30                                    INR	L                    ;Advance memory pntr. Since pointer storage requires
 1340/ 95C : 3E 00                                 MVI	M, 000                ;Two locations, initialize the low addr portion also.
 1341/ 95E : 46 00 02                              CALL	SYNTAX             ;Call the SYNTAX subroutine to obtain a TOKEN indi-
 1342/ 961 : 36 83                                 MVI	L, 203o               ;Cator which will be stored in this location. Upon return
 1343/ 963 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** From SYNTAX subroutine set memory pointer to
 1344/ 965 : C7                                    MOV	A,M                    ;The TOKEN indicator storage location and fetch the
 1345/ 966 : A0                                    ANA	A                    ;Value of the TOKEN. If the value of the syntax TOKEN
 1346/ 967 : 50 71 09                              JP	SYNTOK             ;Is positive then have a valid entry.
 1347/ 96A : 06 D3                      SYNERR:    MVI	A, 323o               ;However, if SYNTAX returns a negative value TOKEN
 1348/ 96C : 16 D9                                 MVI	C, 331o               ;Then have an error condition. Set up the letters SY in
 1349/ 96E : 44 96 02                              JMP	ERROR              ;ASCII code and go to display error message to operator.
 1350/ 971 : 36 E0                      SYNTOK:    MVI	L, 340o               ;Set pointer to start of LINE NUMBER storage area
 1351/ 973 : C7                                    MOV	A,M                    ;First byte there will contain the length of the line
 1352/ 974 : A0                                    ANA	A                    ;Number character string. Fetch that value (cc).
 1353/ 975 : 68 89 0B                              JZ	DIRECT             ;DIRECT If line number blank, have a DIRECT statement!
 1354/ 978 : 36 F0                                 MVI	L, 360o               ;If have a line number must get line in input buffer into
 1355/ 97A : 3E 1B                                 MVI	M, BGNPGRAM           ;tt User program buffer. Initialize pointer to user buffer.
 1356/ 97C : 30                                    INR	L                    ;This is a two byte pointer so after initializing page addr
 1357/ 97D : 3E 00                                 MVI	M, 000                ;Advance pointer and initialize location on page address
 1358/ 97F :                            
 1359/ 97F :                                                              ;If the line in the LINE INPUT BUFFER has a line num-
 1360/ 97F :                                                              ;ber then the line is to be placed in the USER PRO-
 1361/ 97F :                                                              ;GRAM BUFFER. It is now necessary to determine
 1362/ 97F :                                                              ;where the new line is to be placed in the USER PRO-
 1363/ 97F :                                                              ;GRAM BUFFER. This is dictated by the value of the
 1364/ 97F :                                                              ;new line number in relation to the line numbers cur-
 1365/ 97F :                                                              ;rently in the program buffer. The next portion of the
 1366/ 97F :                                                              ;program goes through the contents of the USER PRO-
 1367/ 97F :                                                              ;GRAM BUFFER comparing the values of the line num-
 1368/ 97F :                                                              ;bers already stored against the value of the line number
 1369/ 97F :                                                              ;currently being held in the LINE INPUT BUFFER.
 1370/ 97F :                                                              ;Appropriate action is then taken to Insert or Append,
 1371/ 97F :                                                              ;Change, or Delete a line in the program buffer.
 1372/ 97F :                            
 1373/ 97F : 36 81                      GETAUX:    MVI	L, 201o               ;Set memory pointer to line character pointer storage
 1374/ 981 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Location and then initialize that storage location
 1375/ 983 : 3E 01                                 MVI	M, 001                ;To point to the 1'st character in a line
 1376/ 985 : 36 E8                                 MVI	L, 350o               ;Set memory pointer to addr of start of auxiliary line
 1377/ 987 : 3E 00                                 MVI	M, 000                ;Number storage area and initialize first byte to zero
 1378/ 989 : 36 81                      GETAU0:    MVI	L, 201o               ;Set memory pointer to line character pointer storage loc
 1379/ 98B : 46 53 0A                              CALL	GETCHP             ;Fetch a char in line pointed to by line pointer
 1380/ 98E : 68 A2 09                              JZ	GETAU1             ;If character is a space, skip it by going to advance pntrs
 1381/ 991 : 3C B0                                 CPI	260o               ;If not a space check to see if character represents a
 1382/ 993 : 70 B7 09                              JM	GETAU2             ;Valid decimal digit in the range 0 to 9 by testing the
 1383/ 996 : 3C BA                                 CPI	272o               ;ASCII code value obtained. If not a deciznal digit then
 1384/ 998 : 50 B7 09                              JP	GETAU2             ;Assume have obtained the line number. Go process.
 1385/ 99B : 36 E8                                 MVI	L, 350o               ;If valid decimal digit want to append the digit to the
 1386/ 99D : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Current string being built up in the auxiliary line
 1387/ 99F : 46 CC 02                              CALL	CONCT1             ;Number storage area so call sub to concat a character.
 1388/ 9A2 : 36 81                      GETAU1:    MVI	L, 201o               ;Reset memory pointer to line character pntr storage loc
 1389/ 9A4 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;On the appropriate page.
 1390/ 9A6 : CF                                    MOV	B,M
 1391/ 9A7 : 08                                    INR	B                    ;Fetch the pointer, increment it, and restore new value
 1392/ 9A8 : F9                                    MOV	M,B
 1393/ 9A9 : 36 F0                                 MVI	L, 360o               ;Set memory pointer to pgm buff line pntr storage loc
 1394/ 9AB : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   
 1395/ 9AD : D7                                    MOV	C,M                    ;Bring the high order byte of this double byte pointer
 1396/ 9AE : 30                                    INR	L                    ;Into CPU register C. Then advance the memory pntr
 1397/ 9AF : F7                                    MOV	L,M                    ;And bring the low order byte into register L. Now trans-
 1398/ 9B0 : EA                                    MOV	H,C                    ;Fer the higher order portion into memory pointer H.
 1399/ 9B1 : C7                                    MOV	A,M                    ;Obtain the char cntr (cc) which indicates the length of
 1400/ 9B2 : 09                                    DCR	B                    ;The line being pointed to by the user program line pntr
 1401/ 9B3 : B9                                    CMP	B                    ;Compare this with the value of the chars processed so
 1402/ 9B4 : 48 89 09                              JNZ	GETAU0             ;Far in current line. If not equal, continue getting line n
 1403/ 9B7 : 36 F0                      GETAU2:    MVI	L, 360o               ;Reset mem pntr to pgm buffer line pntr storage
 1404/ 9B9 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** On this page and place the high order byte
 1405/ 9BB : DF                                    MOV	D,M                    ;Of this pointer into CPU register D
 1406/ 9BC : 30                                    INR	L                    ;Advance the memory pointer, fetch the second
 1407/ 9BD : F7                                    MOV	L,M                    ;Byte of the pgm buffer line pointer into register L
 1408/ 9BE : EB                                    MOV	H,D                    ;Now make the memory pointer equal to this value
 1409/ 9BF : C7                                    MOV	A,M                    ;Fetch the first byte of a line in the program buffer
 1410/ 9C0 : A0                                    ANA	A                    ;Test to see if end of contents of pgm buff (zero byte)
 1411/ 9C1 : 48 DE 09                              JNZ	NOTEND             ;If not zero continue processing. If zero have reached
 1412/ 9C4 : 44 05 0A                              JMP	NOSAME             ;End of buffer contents so go APPEND line to buffer.
 1413/ 9C7 :                            ;;; there are some open addresses here.  Above JUMP starts at 11-304;
 1414/ 9C7 :                            ;;; The below label patch3 should start at 11 307 09c7h
 1415/ 9C7 : 36 81                      PATCH3:	   MVI	L, 201o               ; ptr to A/V storage
 1416/ 9C9 : 2E 17                      	   MVI	H,PG27 ;\HB\OLDPG27   ; MGA 3/31/12 make relocatable; prev: LHI 027
 1417/ 9CB : 3E 00                      	   MVI	M, 000o               ; clear A/V flag
 1418/ 9CD : 44 B6 08                   	   JMP	EXEC
 1419/ 9D0 :                            
 1420/ 9D0 :                            ;	db	(09deh-$) dup 0
 1421/ 9D0 :                            
 1422/ 9DE :                                       ORG	09deh              ;011#336
 1423/ 9DE : 36 E8                      NOTEND:    MVI	L, 350o               ;Load L with addr of auxiliary line number storage loc
 1424/ 9E0 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;Load H with addr of aux line number storage loc
 1425/ 9E2 : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;Load D with addr of line number buffer location
 1426/ 9E4 : 26 E0                                 MVI	E, 340o               ;Load E with address of line number buffer location
 1427/ 9E6 : 46 DA 02                              CALL	STRCP              ;Compare line nr in input buffer with line number in
 1428/ 9E9 : 70 3B 0A                              JM	CONTIN             ;User program buffer. If lesser in value keep looking.
 1429/ 9EC : 48 05 0A                              JNZ	NOSAME             ;If greater in value then go to Insert line in pgm buffer
 1430/ 9EF : 36 F0                                 MVI	L, 360o               ;If same values then must remove the line with the same
 1431/ 9F1 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Line number from the user program buffer. Set up
 1432/ 9F3 : D7                                    MOV	C,M                    ;The CPU memory pointer to point to the current
 1433/ 9F4 : 30                                    INR	L                    ;Position in the user program buffer by retrieving that
 1434/ 9F5 : F7                                    MOV	L,M                    ;Pointer from its storage location. Then obtain the first
 1435/ 9F6 : EA                                    MOV	H,C                    ;Byte of data pointed to which will be the character
 1436/ 9F7 : CF                                    MOV	B,M                    ;Count for that line (cc). Add one to the cc value to take
 1437/ 9F8 : 08                                    INR	B                    ;Account of the (cc) byte itself and then remove that
 1438/ 9F9 : 46 64 0A                              CALL	REMOVE             ;Many bytes to effectively delete the line fm the user
 1439/ 9FC : 36 83                                 MVI	L, 203o               ;Program buffer. Now see if line in input buffer consists
 1440/ 9FE : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Only of a line number by checking SYNTAX
 1441/ A00 : C7                                    MOV	A,M                    ;TOKEN value. Fetch the TOKEN value from its
 1442/ A01 : A0                                    ANA	A                    ;Storage location. If it is zero then input buffer only
 1443/ A02 : 68 B6 08                              JZ	EXEC               ;Contains a line number. Action is a pure Delete.
 1444/ A05 : 36 F0                      NOSAME:    MVI	L, 360o               ;Reset memory pointer to program buffer
 1445/ A07 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;Line pointer storage location
 1446/ A09 : DF                                    MOV	D,M                    ;Load high order byte into CPU register D
 1447/ A0A : 30                                    INR	L                    ;Advance memory pointer
 1448/ A0B : E7                                    MOV	E,M                    ;Load low order byte into CPU register E
 1449/ A0C : 36 00                                 MVI	L, 000                ;Load L with address of start of line input buffer
 1450/ A0E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Do same for CPU register H
 1451/ A10 : CF                                    MOV	B,M                    ;Get length of line input buffer
 1452/ A11 : 08                                    INR	B                    ;Advance length by one to include (cc) byte
 1453/ A12 : 46 85 0A                              CALL	INSERT             ;Go make room to insert line into user program buffer
 1454/ A15 : 36 F0                                 MVI	L, 360o               ;Reset memory pointer to program buffer
 1455/ A17 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Line pointer storage location
 1456/ A19 : DF                                    MOV	D,M                    ;Load higher byte into CPU register D
 1457/ A1A : 30                                    INR	L                    ;Advance memory pointer
 1458/ A1B : E7                                    MOV	E,M                    ;Load low order byte into CPU register E
 1459/ A1C : 36 00                                 MVI	L, 000                ;Load L with address of start of line input buffer
 1460/ A1E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Do same for CPU register H
 1461/ A20 : 46 26 0A                              CALL	MOVEC              ;Call subroutine to Insert line in input buffer into the
 1462/ A23 : 44 BD 08                              JMP	EXEC1              ;User program buffer then go back to start of EXEC.
 1463/ A26 : CF                         MOVEC:     MOV	B,M                    ;Fetch length of string in line input buffer
 1464/ A27 : 08                                    INR	B                    ;Increment that value to provide for (cc)
 1465/ A28 : C7                         MOVEPG:    MOV	A,M                    ;Fetch character from line input buffer
 1466/ A29 : 46 FF 02                              CALL	ADV                ;Advance pointer for line input buffer
 1467/ A2C : 46 EE 12                              CALL	SWITCH             ;Switch memory pointer to point to user pgm buffer
 1468/ A2F : F8                                    MOV	M,A                    ;Deposit character fm input buff into user pgm buff
 1469/ A30 : 46 FF 02                              CALL	ADV                ;Advance pointer for user program buffer
 1470/ A33 : 46 EE 12                              CALL	SWITCH             ;Switch memory pntr back to point to input buffer
 1471/ A36 : 09                                    DCR	B                    ;Decrement character counter stored in CPU register B
 1472/ A37 : 48 28 0A                              JNZ	MOVEPG             ;If counter does not go to zero continue transfer ops
 1473/ A3A : 07                                    RET                    ;When counter equals zero return to caMVI L,ng routine
 1474/ A3B : 36 F0                      CONTIN:    MVI	L, 360o               ;Reset memory pointer to program buffer
 1475/ A3D : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Line pointer storage location
 1476/ A3F : DF                                    MOV	D,M                    ;Load high order byte into CPU register D
 1477/ A40 : 30                                    INR	L                    ;Advance memory pointer
 1478/ A41 : E7                                    MOV	E,M                    ;Load low order byte into CPU register E
 1479/ A42 : EB                                    MOV	H,D                    ;Now set CPU register H to high part of address
 1480/ A43 : F4                                    MOV	L,E                    ;And set CPU register L to low part of address
 1481/ A44 : CF                                    MOV	B,M                    ;Fetch the character counter (cc) byte fm line in
 1482/ A45 : 08                                    INR	B                    ;Program buffer and add one to compensate for (cc)
 1483/ A46 : 46 C5 0A                              CALL	ADBDE              ;Add length of line value to old value to get new pointer
 1484/ A49 : 36 F0                                 MVI	L, 360o               ;Reset memory pointer to program buffer
 1485/ A4B : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Line pointer storage location
 1486/ A4D : FB                                    MOV	M,D                    ;Restore new high portion
 1487/ A4E : 30                                    INR	L                    ;Advance memory pointer
 1488/ A4F : FC                                    MOV	M,E                    ;And restore new low portion
 1489/ A50 : 44 7F 09                              JMP	GETAUX             ;Continue til find point at which to enter new line
 1490/ A53 : 2E 16                      GETCHP:    MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with pointer page (low portion set upon
 1491/ A55 : CF                                    MOV	B,M                    ;Entry). Now fetch pointer into CPU register B.
 1492/ A56 : 36 F0                                 MVI	L, 360o               ;Reset pntr to pgm buffer line pointer storage location
 1493/ A58 : DF                                    MOV	D,M                    ;Load high order byte into CPU register D
 1494/ A59 : 30                                    INR	L                    ;Advance memory pointer
 1495/ A5A : E7                                    MOV	E,M                    ;Load low order byte into CPU register E
 1496/ A5B : 46 C5 0A                              CALL	ADBDE              ;Add pointer to pgm buffer pointer to obtain address of
 1497/ A5E : EB                                    MOV	H,D                    ;Desired character. Place high part of new addr in H.
 1498/ A5F : F4                                    MOV	L,E                    ;And low part of new address in E.
 1499/ A60 : C7                                    MOV	A,M                    ;Fetch character from position in line in user pgm buffer
 1500/ A61 : 3C A0                                 CPI	240o               ;See if it is the ASCII code for space
 1501/ A63 : 07                                    RET                    ;Return to caller with flags set to indicate result
 1502/ A64 : 46 7C 03                   REMOVE:    CALL	INDEXB             ;Add (cc) plus one to addr of start of line
 1503/ A67 : D7                                    MOV	C,M                    ;Obtain byte from indexed location and
 1504/ A68 : 46 4B 03                              CALL	SUBHL              ;Subtract character count to obtain old location
 1505/ A6B : FA                                    MOV	M,C                    ;Put new byte in old location
 1506/ A6C : C2                                    MOV	A,C                    ;As well as in the Accumulator
 1507/ A6D : A0                                    ANA	A                    ;Test to see if zero byte to indicate end of user pgm buff
 1508/ A6E : 68 77 0A                              JZ	REMOV1             ;If it is end of user pgm buffer, go complete process
 1509/ A71 : 46 FF 02                              CALL	ADV                ;Otherwise add one to the present pointer value
 1510/ A74 : 44 64 0A                              JMP	REMOVE             ;And continue removing chamcters from the user pgm bf
 1511/ A77 : 36 F4                      REMOV1:    MVI	L, 364o               ;Load L with end of user pgm buffer pointer storage loc
 1512/ A79 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of that pointer storage location
 1513/ A7B : DF                                    MOV	D,M                    ;Get page portion of end of pgm buffer address
 1514/ A7C : 30                                    INR	L                    ;Advance memory pointer
 1515/ A7D : C7                                    MOV	A,M                    ;And get low portion of end of pgm buffer address into
 1516/ A7E : 91                                    SUB	B                    ;Accumulator then subtract displacement value in B
 1517/ A7F : F8                                    MOV	M,A                    ;Restore new low portion of end of pgm buffer address
 1518/ A80 : 03                                    RNC                    ;If subtract did not cause carry can return now
 1519/ A81 : 31                                    DCR	L                    ;Otherwise decrement memory pointer back to page
 1520/ A82 : 19                                    DCR	D                    ;Storage location, decrement page value to give new page
 1521/ A83 : FB                                    MOV	M,D                    ;And store new page value back in buffer pntr storage loc
 1522/ A84 : 07                                    RET                    ;Then return to calling routine
 1523/ A85 : 36 F4                      INSERT:    MVI	L, 364o               ;Load L with end of user pgm buffer pointer storage loc
 1524/ A87 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of that pointer storage location
 1525/ A89 : C7                                    MOV	A,M                    ; Get page portion of end of program buffer address
 1526/ A8A : 30                                    INR	L                    ;Advance memory pointer
 1527/ A8B : F7                                    MOV	L,M                    ;Load low portion of end of program buffer address
 1528/ A8C : E8                                    MOV	H,A                    ;Into L and finish setting up memory pointer
 1529/ A8D : 46 7C 03                              CALL	INDEXB             ;Add (cc) of line in input buffer to form new end of
 1530/ A90 : C5                                    MOV	A,H                    ;Program buffer address. Fetch new end of buffer page
 1531/ A91 : 3C 2D                                 CPI	ENDPGRAM           ;tt Address and see if this value would exceed user's
 1532/ A93 : 50 92 02                              JP	BIGERR             ;System capabilit'y. Go display error message if so!
 1533/ A96 : 46 4B 03                              CALL	SUBHL              ;Else restore original value of end of buffer address
 1534/ A99 : D7                         INSER1:    MOV	C,M                    ;Bring byte pointed to by H & L into CPU register C
 1535/ A9A : 46 7C 03                              CALL	INDEXB             ;Add displacement value to current memory pointer
 1536/ A9D : FA                                    MOV	M,C                    ;Store the byte in the new location
 1537/ A9E : 46 4B 03                              CALL	SUBHL              ;Now subtract displacement value from H & L
 1538/ AA1 : 46 BF 0A                              CALL	CPHLDE             ;Compare this with the address stored in D & E
 1539/ AA4 : 68 AD 0A                              JZ	INSER3             ;If same then go finish up Insert operation
 1540/ AA7 : 46 74 03                              CALL	DEC                ;Else set pointer to the byte before the byte just
 1541/ AAA : 44 99 0A                              JMP	INSER1             ;Processed and continue the Insert operation
 1542/ AAD :                            INSER3:
 1543/ AAD : 36 00                      INCLIN:    MVI	L, 000                ;Load L with start of line input buffer
 1544/ AAF : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of start of line input buffer
 1545/ AB1 : CF                                    MOV	B,M                    ;Fetch length of the line in line input buffer
 1546/ AB2 : 08                                    INR	B                    ;Increment value by one to include (cc) byte
 1547/ AB3 : 36 F4                                 MVI	L, 364o               ;Set memory pointer to end of user pgrn buffer pointer
 1548/ AB5 : DF                                    MOV	D,M                    ;Storage location on same page and fetch page address
 1549/ AB6 : 30                                    INR	L                    ;Of this pointer into D. Then advance memory pointer
 1550/ AB7 : E7                                    MOV	E,M                    ;And get low part of this pointer into CPU register E.
 1551/ AB8 : 46 C5 0A                              CALL	ADBDE              ;Now add displacement (cc) of line in input buffer to
 1552/ ABB : FC                                    MOV	M,E                    ;The end of program buffer pointer. Replace the updated
 1553/ ABC : 31                                    DCR	L                    ;Low portion of the new pointer value back in stomge
 1554/ ABD : FB                                    MOV	M,D                    ;And restore the new page value back into storage
 1555/ ABE : 07                                    RET                    ;Then return to calling routine
 1556/ ABF : C5                         CPHLDE:    MOV	A,H                    ;Subroutine to compare if the contents of CPU registers
 1557/ AC0 : BB                                    CMP	D                    ;H & L are equal to registers D & E. First compare
 1558/ AC1 : 0B                                    RNZ                    ;Register H to D. Return with flags set if not equal. If
 1559/ AC2 : C6                                    MOV	A,L                    ;Equal continue by comparing register L to E.
 1560/ AC3 : BC                                    CMP	E                    ;IF L equals E then H & L equal to D & E so return to
 1561/ AC4 : 07                                    RET                    ;Calling routines with flags set to equality status
 1562/ AC5 : C4                         ADBDE:     MOV	A,E                    ;Subroutine to add the contents of CPU register B (single
 1563/ AC6 : 81                                    ADD	B                    ;Byte value) to the double byte value in registers D & E.
 1564/ AC7 : E0                                    MOV	E,A                    ;First add B to E to form new least significant byte
 1565/ AC8 : 03                                    RNC                    ;Restore new value to E and exit if no carry resulted
 1566/ AC9 : 18                                    INR	D                    ;If had a carry then must increment most significant byte
 1567/ ACA : 07                                    RET                    ;In register D before returning to calling routine
 1568/ ACB : 06 DE                      CTRLC:     MVI	A, 336o               ;Set up ASCII code for t (up arrow) in Accumulator.
 1569/ ACD : 16 C3                                 MVI	C, 303o               ;Set up ASCII code for letter 'C' in CPU register C.
 1570/ ACF : 44 96 02                              JMP	ERROR              ;Go display the 'Control C' condition message.
 1571/ AD2 : 36 E0                      FINERR:    MVI	L, 340o               ;Load L with starting address of line number storage area
 1572/ AD4 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of line number storage area
 1573/ AD6 : C7                                    MOV	A,M                    ;Get (cc) for line number string. If length is zero meaning
 1574/ AD7 : A0                                    ANA	A                    ;There is no line number stored in the buffer then jump
 1575/ AD8 : 68 E9 0A                              JZ	FINER1             ;Ahead to avoid displaying "AT LINE" message
 1576/ ADB : 36 F6                                 MVI	L, 366o               ;Else load L with address of start of "AT LINE" message
 1577/ ADD : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Stored on this page
 1578/ ADF : 46 51 03                              CALL	TEXTC              ;Call subroutine to display the "AT LINE" message
 1579/ AE2 : 36 E0                                 MVI	L, 340o               ;Now reset L to starting address of line number storage
 1580/ AE4 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Area and do same for CPU register H
 1581/ AE6 : 46 51 03                              CALL	TEXTC              ;Call subroutine to display the line number
 1582/ AE9 : 46 61 03                   FINER1:    CALL	CRLF               ;Call subroutine to provide a carriage-return and line-feed
 1583/ AEC : 44 C7 09                   	   JMP	PATCH3 
 1584/ AEF :                            ;;; The following is the old code, before patch 3
 1585/ AEF :                            ;;;        JMP	EXEC               ;To the display device then return to EXECUTIVE.
 1586/ AEF : 06 C4                      DVERR:     MVI	A, 304o               ;Set up ASCII code for letter 'D' in Accumulator
 1587/ AF1 : 16 DA                                 MVI	C, 332o               ;Set up ASCII code for letter 'Z' in CPU register C
 1588/ AF3 : 44 96 02                              JMP	ERROR              ;Go display the 'DZ' (divide by zero) error message
 1589/ AF6 : 06 C6                      FIXERR:    MVI	A, 306o               ;Set up ASCII code for letter 'F' in Accumulator
 1590/ AF8 : 16 D8                                 MVI	C, 330o               ;Set up ASCII code for letter 'X' in CPU register C
 1591/ AFA : 44 96 02                              JMP	ERROR              ;Go display the 'FX' (FiX) error message
 1592/ AFD : 06 C9                      NUMERR:    MVI	A, 311o               ;Set up ASCII code for letter 'I' in Accumulator
 1593/ AFF : 16 CE                                 MVI	C, 316o               ;Set up ASCII code for letter 'N' in CPU register C
 1594/ B01 : 36 90                                 MVI	L, 220o               ;Load L with address of pointer used by DINPUT
 1595/ B03 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Routine. Do same for register H.
 1596/ B05 : 3E 00                                 MVI	M, 000                ;Clear the location
 1597/ B07 : 44 96 02                              JMP	ERROR              ;Go display the'IN'(Illegal Number) error message
 1598/ B0A :                            
 1599/ B0A :                                                              ;The following subroutine, used by various sections of
 1600/ B0A :                                                              ;SCELBAL, will search the LINE INPUT BUGGER for
 1601/ B0A :                                                              ;a character string which is contained in a buffer starting
 1602/ B0A :                                                              ;at the address pointed to by CPU registers H & L when
 1603/ B0A :                                                              ;the subroutine is entered.
 1604/ B0A :                            
 1605/ B0A : 1E 16                      INSTR:     MVI	D,PG26 ;\HB\OLDPG26   ;**Set D to starting page of LINE INPUT BUFFER
 1606/ B0C : 26 00                                 MVI	E, 000                ;Load E with starting location of LINE INPUT BUFFER
 1607/ B0E : 46 34 0B                   INSTR1:    CALL	ADVDE              ;Advancer D & E pointer to the next location (input
 1608/ B11 : 46 CF 12                              CALL	SAVEHL             ;Buffer). Now save contents of d, E, H & L vefore the
 1609/ B14 : CF                                    MOV	B,M                    ;Compare operations. Get length of TEST buffer in B.
 1610/ B15 : 46 FF 02                              CALL	ADV                ;Advance H & L buffer to first char in TEST buffer.
 1611/ B18 : 46 F8 02                              CALL	STRCPC             ;Compare contents of TEST buffer against input buffer
 1612/ B1B : 68 DF 12                              JZ	RESTHL             ;For length B. If match, restore pntrs and exit to caller.
 1613/ B1E : 46 DF 12                              CALL	RESTHL             ;If no match, restore pointers for loop test.
 1614/ B21 : 36 00                                 MVI	L, 000                ;Load L with start of input buffer (to get the char cntr).
 1615/ B23 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;**Load H with page of input buffer.
 1616/ B25 : C7                                    MOV	A,M                    ;Get length of buffer (cc) into the accumulator.
 1617/ B26 : BC                                    CMP	E                    ;Compare with current input buffer pointer value.
 1618/ B27 : 68 31 0B                              JZ	INSTR2             ;If at end of buffer, jump ahead.
 1619/ B2A : 46 DF 12                              CALL	RESTHL             ;Else restore test string address (H&L) and input buffer
 1620/ B2D : 44 0E 0B                              JMP	INSTR1             ;Address (D&E). Look gor occurrence of test string in ln.
 1621/ B30 : 00                                    HLT             ;Safety halt. If program reaches here have system failure.
 1622/ B31 : 26 00                      INSTR2:    MVI	E, 000                ;If reach end of input buffer without finding a match
 1623/ B33 : 07                                    RET                    ;Load E with 000 as an indicator and return to caller.
 1624/ B34 : 20                         ADVDE:     INR	E                    ;Subroutine to advance the pointer in the register
 1625/ B35 : 0B                                    RNZ                    ;Pair D & E. Advance contents of E. Return if not zero.
 1626/ B36 : 18                                    INR	D                    ;If register E goes to 0 when advanced, then advance
 1627/ B37 : 07                                    RET                    ;Register D too. Exit to calling routine.
 1628/ B38 :                            
 1629/ B38 :                            ;;; The label RUN should start at 13-170 0b78h
 1630/ B38 : 36 3B                      RUN:       MVI	L, 073o               ;Load L with addr of GOSUB/RETURN stack pointer
 1631/ B3A : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of same pointer
 1632/ B3C : 3E 00                                 MVI	M, 000                ;Initialize the GOSUB/RETURN stack pointer to zero
 1633/ B3E : 36 85                                 MVI	L, 205o               ;Load L with addr of FOR/NEXT stack pointer
 1634/ B40 : 3E 00                                 MVI	M, 000                ;Initialize the FOR/NEXT stack pointer to zero
 1635/ B42 : 36 F0                                 MVI	L, 360o               ;Load L with addr of user pgm buffer line pointer
 1636/ B44 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of user pgm buffer line pointer
 1637/ B46 : 3E 1B                                 MVI	M, BGNPGRAM           ;tt Initialize pointer (may be altered by user)   *******
 1638/ B48 : 30                                    INR	L                    ;Advance memory pointer to low portion of user pgm
 1639/ B49 : 3E 00                                 MVI	M, 000                ;Buffer pointer and initialize to start of buffer
 1640/ B4B : 44 6E 0B                              JMP	SAMLIN             ;Start executing user program with first line in buffer
 1641/ B4E : 36 F0                      NXTLIN:    MVI	L, 360o               ;Load L with addr of user program buffer line pointer
 1642/ B50 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of user pgm buffer line pointer
 1643/ B52 : DF                                    MOV	D,M                    ;Place page addr of pgm buffer line pointer in D
 1644/ B53 : 30                                    INR	L                    ;Advance the memory pointer
 1645/ B54 : E7                                    MOV	E,M                    ;Place low addr of pgm buffer line pointer in E
 1646/ B55 : EB                                    MOV	H,D                    ;Also put page addr of pgm buffer line pointer in H
 1647/ B56 : F4                                    MOV	L,E                    ;And low addr of pgm buffer line pointer in L
 1648/ B57 : CF                                    MOV	B,M                    ;Now fetch the (cc) of current line into register B
 1649/ B58 : 08                                    INR	B                    ;Add one to account for (cc) byte itself
 1650/ B59 : 46 C5 0A                              CALL	ADBDE              ;Add value in B to D&E to point to next line in
 1651/ B5C : 36 F0                                 MVI	L, 360o               ;User program buffer. Reset L to addr of user logrn
 1652/ B5E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Buffer pointer storage location. Store the new
 1653/ B60 : FB                                    MOV	M,D                    ;Updated user pgm line pointer in pointer storage
 1654/ B61 : 30                                    INR	L                    ;Location. Store both the high portion
 1655/ B62 : FC                                    MOV	M,E                    ;And low portion. (Now points to next line to be
 1656/ B63 : 36 E0                                 MVI	L, 340o               ;Processed from user program buffer.) Change pointer
 1657/ B65 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** To address of line number buffer. Fetch the last
 1658/ B67 : C7                                    MOV	A,M                    ;Line number (length) processed. Test to see if it was
 1659/ B68 : A0                                    ANA	A                    ;Blank. If it was blank
 1660/ B69 : 68 B6 08                              JZ	EXEC               ;Then stop processing and return to the Executive
 1661/ B6C : C0                                    MOV	A,A                    ;Insert two effective NOPs here
 1662/ B6D : C0                                    MOV	A,A                    ;In case of patching
 1663/ B6E : 36 F0                      SAMLIN:    MVI	L, 360o               ;Load L with addr of user program buffer line pointer
 1664/ B70 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of same pointer
 1665/ B72 : D7                                    MOV	C,M                    ;Fetch the high portion of the pointer into register C
 1666/ B73 : 30                                    INR	L                    ;Advance the memory pointer
 1667/ B74 : F7                                    MOV	L,M                    ;Fetch the low portion of the pointer into register L
 1668/ B75 : EA                                    MOV	H,C                    ;Now move the high portion into register H
 1669/ B76 : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Set D to page of line input buffer
 1670/ B78 : 26 00                                 MVI	E, 000                ;Set E to address of start of line input buffer
 1671/ B7A : 46 26 0A                              CALL	MOVEC              ;Move the line ftom the user program buffer into the
 1672/ B7D : 36 00                                 MVI	L, 000                ;Line input buffer. Now reset the pointer to the start
 1673/ B7F : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Of the line input buffer.
 1674/ B81 : C7                                    MOV	A,M                    ;Fetch the first byte of the line input buffer (cc)
 1675/ B82 : A0                                    ANA	A                    ;Test (cc) value to see if fetched a blank line
 1676/ B83 : 68 B6 08                              JZ	EXEC               ;If fetched a blank line, return to the Executive
 1677/ B86 : 46 00 02                              CALL	SYNTAX             ;Else call subrtn to strip off line nr & set statement toke
 1678/ B89 :                            
 1679/ B89 : 36 83                      DIRECT:    MVI	L, 203o               ;Load L with address of syntax TOKEN storage location
 1680/ B8B : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of syntax TOKEN location
 1681/ B8D : C7                                    MOV	A,M                    ;Fetch the TOKEN value into the accumulator
 1682/ B8E : 3C 01                                 CPI	001                ;Is it token value for REM statement? If so, ignore the
 1683/ B90 : 68 4E 0B                              JZ	NXTLIN             ;Current line and go on to the next line in pgm buffer.
 1684/ B93 : 3C 02                                 CPI	002                ;Is it token value for IF statement?
 1685/ B95 : 68 17 0E                              JZ	IF                 ;If yes, then go to the IF statement routine.
 1686/ B98 : 3C 03                                 CPI	003                ;Is it token value for LET statement? (Using keyword)
 1687/ B9A : 68 19 0D                              JZ	LET                ;If yes, then go to the LET statement routine.
 1688/ B9D : 3C 04                                 CPI	004                ;Is it token value for GOTO statement?
 1689/ B9F : 68 7C 0D                              JZ	GOTO               ;If yes, then go to the GOTO statement routine.
 1690/ BA2 : 3C 05                                 CPI	005                ;Is it token value for PRINT statement?
 1691/ BA4 : 68 E5 0B                              JZ	PRINT              ;If yes, then go to the PRINT statement routine.
 1692/ BA7 : 3C 06                                 CPI	006                ;Is it token value for INPUT statement?
 1693/ BA9 : 68 F5 0E                              JZ	INPUT              ;If yes, then go to the INPUT statement routine.
 1694/ BAC : 3C 07                                 CPI	007                ;Is it token value for FOR statement?
 1695/ BAE : 68 74 0F                              JZ	FOR                ;If yes, then go to the FOR statement routine.
 1696/ BB1 : 3C 08                                 CPI	010o               ;Is it token value for NEXT statement?
 1697/ BB3 : 68 0B 18                              JZ	NEXT               ;If yes, then go to the NEXT statement routine.
 1698/ BB6 : 3C 09                                 CPI	011o               ;Is it token value for GOSUB statement?
 1699/ BB8 : 68 9E 0E                              JZ	GOSUB              ;If yes, then go to the GOSUB statement routine.
 1700/ BBB : 3C 0A                                 CPI	012o               ;Is it token value for RETURN statement?
 1701/ BBD : 68 C4 0E                              JZ	RETURN             ;If yes, then go to the RETURN statement routine.
 1702/ BC0 : 3C 0B                                 CPI	013o               ;Is it token value for DIM statement?
 1703/ BC2 : 68 F5 2D                              JZ	DIM                ;If yes, then go to the DIM statement routine.
 1704/ BC5 : 3C 0C                                 CPI	014o               ;Is it token value for END statement?
 1705/ BC7 : 68 B6 08                              JZ	EXEC               ;If yes, then go back to the Executive, user pgm finished!
 1706/ BCA : 3C 0D                                 CPI	015o               ;Is it token value for IMPLIED LET statement?
 1707/ BCC : 68 0B 0D                              JZ	LET0               ;If yes, then go to special LET entry point.
 1708/ BCF : 3C 0E                                 CPI	016o               ;@@ Is it token value for ARRAY IMPLIED LET?
 1709/ BD1 : 48 6A 09                              JNZ	SYNERR             ;If not, then assume a syntax error condition.
 1710/ BD4 : 46 6B 2D                              CALL	ARRAY1             ;@@ Else, perform array storage set up subroutine.
 1711/ BD7 : 36 86                                 MVI	L, 206o               ;@@ Set L to array pointer storage location.
 1712/ BD9 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;@@ * * Set H to array pointer storage location.
 1713/ BDB : CF                                    MOV	B,M                    ;@@ Fetch array pointer to register B.
 1714/ BDC : 36 82                                 MVI	L, 202o               ;@@ Change memory pointer to syntax pntr storage loc.
 1715/ BDE : F9                                    MOV	M,B                    ;@@ Save array pointer value there.
 1716/ BDF : 46 A0 08                              CALL	SAVESY             ;@@ Save array name in auxiliary symbol buffer
 1717/ BE2 : 44 22 0D                              JMP	LET1
 1718/ BE5 : 36 82                      PRINT:     MVI	L, 202o               ;Load L with address of SCAN pointer storage location
 1719/ BE7 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of SCAN pointer
 1720/ BE9 : C7                                    MOV	A,M                    ;Fetch the pointer value (last character scanned by the
 1721/ BEA : 36 00                                 MVI	L, 000                ;SYNTAX routine). Change pointer to line buffer (cc).
 1722/ BEC : BF                                    CMP	M                    ;Compare pointer value to buffer length. If not equal
 1723/ BED : 70 F6 0B                              JM	PRINT1             ;Then line contains more than stand alone PRINT state-
 1724/ BF0 : 46 61 03                              CALL	CRLF               ;Ment. However, if just have PRINT statement then issue
 1725/ BF3 : 44 4E 0B                              JMP	NXTLIN             ;A carriage-return & line-feed combination, then exit.
 1726/ BF6 : 46 AD 02                   PRINT1:    CALL	CLESYM             ;Initialize the SYMBOL buffer for new entry.
 1727/ BF9 : 36 82                                 MVI	L, 202o               ;Load L with address of SCAN buffer pointer
 1728/ BFB : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of SCAN pointer
 1729/ BFD : CF                                    MOV	B,M                    ;Pointer points to last char scanned by SYNTAX. Need
 1730/ BFE : 08                                    INR	B                    ;To increment it to point to next char in statement line.
 1731/ BFF : 36 83                                 MVI	L, 203o               ;Load L with address of former TOKEN value. Use it as
 1732/ C01 : F9                                    MOV	M,B                    ;Storage location for a PRINT statement pointer.
 1733/ C02 : 36 83                      PRINT2:    MVI	L, 203o               ;Set memory pointer to PRINT pointer storage location
 1734/ C04 : 46 A0 02                              CALL	GETCHR             ;Fetch character in input buffer pointed to by PRINT
 1735/ C07 : 3C A7                                 CPI	247o               ;Pointer. See if it is ASCII code for single quote mark.
 1736/ C09 : 68 83 0C                              JZ	QUOTE              ;If so, go to QUOTE section to process text string.
 1737/ C0C : 3C A2                                 CPI	242o               ;If not, see if it is ASCII code for double quote mark.
 1738/ C0E : 68 83 0C                              JZ	QUOTE              ;If so, go to QUOTE section to process text string.
 1739/ C11 : 3C AC                                 CPI	254o               ;If not, see if it is ASCII code for comma sign.
 1740/ C13 : 68 23 0C                              JZ	PRINT3             ;If so, go evaluate expression.
 1741/ C16 : 3C BB                                 CPI	273o               ;If not, see if it is ASCII code for semi-colon sign.
 1742/ C18 : 68 23 0C                              JZ	PRINT3             ;If so, go evaluate expression.
 1743/ C1B : 36 83                                 MVI	L, 203o               ;Load L with address of PRINT pointer storage location.
 1744/ C1D : 46 03 03                              CALL	LOOP               ;Increment pointer and test for end of line.
 1745/ C20 : 48 02 0C                              JNZ	PRINT2             ;If not end of line, fetch the next character.
 1746/ C23 : 36 82                      PRINT3:    MVI	L, 202o               ;Load L with address of SCAN pointer storage location
 1747/ C25 : CF                                    MOV	B,M                    ;Fetch value of the pointer (last letter of KEYWORD)
 1748/ C26 : 08                                    INR	B                    ;Add one to point to first character of expression
 1749/ C27 : 36 BE                                 MVI	L, 276o               ;Load L with addr of EVAL pointer storage location
 1750/ C29 : F9                                    MOV	M,B                    ;Store addr at which EVAL should start scanning
 1751/ C2A : 36 83                                 MVI	L, 203o               ;Load L with address of PRINT pointer
 1752/ C2C : CF                                    MOV	B,M                    ;Which points to field terminator
 1753/ C2D : 09                                    DCR	B                    ;Decrement pointer value to last character of expression
 1754/ C2E : 36 BF                                 MVI	L, 277o               ;Load L with address of EVAL FINISH pntr storage loc.
 1755/ C30 : F9                                    MOV	M,B                    ;Place address value of last char in PRINT field there
 1756/ C31 : 36 F7                                 MVI	L, 367o               ;Load L with address of QUOTE flag
 1757/ C33 : C7                                    MOV	A,M                    ;Fetch the value of the QUOTE flag into the ACC
 1758/ C34 : A0                                    ANA	A                    ;Test the QUOTE flag status
 1759/ C35 : 68 3D 0C                              JZ	PRINT4             ;If field not quoted, proceed to evaluate expression
 1760/ C38 : 3E 00                                 MVI	M, 000                ;If field quoted, then clear the QUOTE flag for next field
 1761/ C3A : 44 55 0C                              JMP	PRINT6             ;And skip the evaluation procedure
 1762/ C3D : 46 94 03                   PRINT4:    CALL	EVAL               ;Evaluate the current PRINT field
 1763/ C40 : 36 7F                                 MVI	L, 177o               ;Then load L,with address of the TAB flag
 1764/ C42 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with the page of the TAB flag
 1765/ C44 : C7                                    MOV	A,M                    ;Fetch the value of the TAB flag into the accumulator
 1766/ C45 : A0                                    ANA	A                    ;Test the TAB flag
 1767/ C46 : 36 48                                 MVI	L, 110o               ;Change L to the FIXED/FLOAT flag location
 1768/ C48 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Change H to the FIXED/FLOAT flag page
 1769/ C4A : 3E FF                                 MVI	M, 377o               ;Set FIXED/FLOAT flag to fixed point
 1770/ C4C : 6A CC 0C                   PRINT5:    CZ	PFPOUT             ;If TAB flag not set, display value of expression
 1771/ C4F : 36 7F                                 MVI	L, 177o               ;Load L with address of TAB flag
 1772/ C51 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of TAB flag
 1773/ C53 : 3E 00                                 MVI	M, 000                ;Reset TAB flag for next PRINT field
 1774/ C55 : 36 83                      PRINT6:    MVI	L, 203o               ;Load L with address of PRINT pointer stomge location
 1775/ C57 : 46 A0 02                              CALL	GETCHR             ;Fetch the character pointed to by the PRINT pointer
 1776/ C5A : 3C AC                                 CPI	254o               ;See if the last character scanned was a comma sign
 1777/ C5C : 6A EF 0C                              CZ	PCOMMA             ;If so, then display spaces to next TA.B location
 1778/ C5F : 36 83                                 MVI	L, 203o               ;Reset L to address of PRINT pointer storage location
 1779/ C61 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Reset H to page of PRINT pointer stomge location
 1780/ C63 : CF                                    MOV	B,M                    ;Fetch the value of the pointer into register B
 1781/ C64 : 36 82                                 MVI	L, 202o               ;Change L to SCAN pointer storage location
 1782/ C66 : F9                                    MOV	M,B                    ;Place end of last field processed into SCAN pointer
 1783/ C67 : 36 00                                 MVI	L, 000                ;Change pointer to start of line input buffer
 1784/ C69 : C1                                    MOV	A,B                    ;Place pntr to last char scanned into the accumulator
 1785/ C6A : BF                                    CMP	M                    ;Compare this value to the (cc) for the line buffer
 1786/ C6B : 70 F6 0B                              JM	PRINT1             ;If not end of line, continue to process next field
 1787/ C6E : 36 00                                 MVI	L, 000                ;If end of line, fetch the last character in the line
 1788/ C70 : 46 A0 02                              CALL	GETCHR             ;And check to see if it
 1789/ C73 : 3C AC                                 CPI	254o               ;Was a comma. If it was, go on to the next line in the
 1790/ C75 : 68 4E 0B                              JZ	NXTLIN             ;User program buffer without displaying a CR & LF.
 1791/ C78 : 3C BB                                 CPI	273o               ;If not a comma, check to see if it was a semi-colon.
 1792/ C7A : 68 4E 0B                              JZ	NXTLIN             ;If so, do not provide a CR & LF combination.
 1793/ C7D : 46 61 03                              CALL	CRLF               ;If not comma or semi-colon, provide CR & LF at end
 1794/ C80 : 44 4E 0B                              JMP	NXTLIN             ;Of a PRINT statement. Go process next line of pgrm.
 1795/ C83 : 36 F7                      QUOTE:     MVI	L, 367o               ;Load L with address of QUOTE flag
 1796/ C85 : F8                                    MOV	M,A                    ;Store type of quote in flag storage location
 1797/ C86 : 46 AD 02                              CALL	CLESYM             ;Initialize the SYMBOL buffer for new entry
 1798/ C89 : 36 83                                 MVI	L, 203o               ;Load L with address of PRINT pointer
 1799/ C8B : CF                                    MOV	B,M                    ;Fetch the PRINT pointer into register B
 1800/ C8C : 08                                    INR	B                    ;Add one to advance over quote character
 1801/ C8D : 36 84                                 MVI	L, 204o               ;Load L with address of QUOTE pointer
 1802/ C8F : F9                                    MOV	M,B                    ;Store the beginning of the QUOTE field pointer
 1803/ C90 : 36 84                      QUOTE1:    MVI	L, 204o               ;Load L with address of QUOTE pointer
 1804/ C92 : 46 A0 02                              CALL	GETCHR             ;Fetch the next character in the TEXT field
 1805/ C95 : 36 F7                                 MVI	L, 367o               ;Load L with the QUOTE flag (type of quote)
 1806/ C97 : BF                                    CMP	M                    ;Compare to see if latest character this quote mark
 1807/ C98 : 68 B3 0C                              JZ	QUOTE2             ;If so, finish up this quote field
 1808/ C9B : 46 82 03                              CALL	ECHO               ;If not, display the character as part of TEXT
 1809/ C9E : 36 84                                 MVI	L, 204o               ;Reset L to QUOTE pointer storage location
 1810/ CA0 : 46 03 03                              CALL	LOOP               ;Increment QUOTE pointer and test for end of line
 1811/ CA3 : 48 90 0C                              JNZ	QUOTE1             ;If not end of line, continue processing TEXT field
 1812/ CA6 : 06 C9                      QUOTER:    MVI	A, 311o               ;If end of line before closing quote mark have an error
 1813/ CA8 : 16 D1                                 MVI	C, 321o               ;So load ACC with I and register C with Q
 1814/ CAA : 36 F7                                 MVI	L, 367o               ;Load L with the address of the QUOTE flag
 1815/ CAC : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with the page of the QUOTE flag
 1816/ CAE : 3E 00                                 MVI	M, 000                ;Clear the QUOTE flag for future use
 1817/ CB0 : 44 96 02                              JMP	ERROR              ;Go display the IQ (Illegal Quote) error message
 1818/ CB3 : 36 84                      QUOTE2:    MVI	L, 204o               ;Load L with address of QUOTE pointer
 1819/ CB5 : CF                                    MOV	B,M                    ;Fetch the QUOTE pointer into register B
 1820/ CB6 : 36 82                                 MVI	L, 202o               ;Load L with address of SCAN pointer storage location
 1821/ CB8 : F9                                    MOV	M,B                    ;Store former QUOTE vointer as start of next field
 1822/ CB9 : C1                                    MOV	A,B                    ;Place QUOTE pointer into the accumulator
 1823/ CBA : 36 00                                 MVI	L, 000                ;Change L to point to start of the input line buffer
 1824/ CBC : BF                                    CMP	M                    ;Compare QUOTE pointer value with (cc) value
 1825/ CBD : 48 F6 0B                              JNZ	PRINT1             ;If not end of line, process next PRINT field
 1826/ CC0 : 46 61 03                              CALL	CRLF               ;Else display a CR & LF combination at the end of line
 1827/ CC3 : 36 F7                                 MVI	L, 367o               ;Load L with the address of the TAB flag
 1828/ CC5 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with the page of the TAB flag
 1829/ CC7 : 3E 00                                 MVI	M, 000                ;Clear the TAB flag for future use
 1830/ CC9 : 44 4E 0B                              JMP	NXTLIN             ;Go process next line of the program.
 1831/ CCC :                            
 1832/ CCC :                                                              ;The following subroutines are utilized by the PRINT
 1833/ CCC :                                                              ;routine.
 1834/ CCC :                            ;;; The label PFPOUT SHOULD BE AT 14 314 0ccch
 1835/ CCC : 36 56                      PFPOUT:    MVI	L, 126o               ;Load L with the address of the FPACC MSW (Floating
 1836/ CCE : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Point ACC). Load H with page of the FPACC MSW.
 1837/ CD0 : C7                                    MOV	A,M                    ;Fetch the FPACC MSW into the accumulator. Test to
 1838/ CD1 : A0                                    ANA	A                    ;See if the FPACC MSW is zero. If so, then simply go and
 1839/ CD2 : 68 DE 0C                              JZ	ZERO               ;Display the value "0"
 1840/ CD5 : 30                                    INR	L                    ;Else advance the pointer to the FPACC Exponent
 1841/ CD6 : C7                                    MOV	A,M                    ;Fetch the FPACC Exponent into the accumulator
 1842/ CD7 : A0                                    ANA	A                    ;See if any exponent value. If not, mantissa is in range
 1843/ CD8 : 68 E8 0C                              JZ	FRAC               ;0.5 to 1.0. Treat number as a fraction.
 1844/ CDB : 44 75 14                              JMP	FPOUT              ;Else perform regular numerical output routine.
 1845/ CDE : 06 A0                      ZERO:      MVI	A, 240o               ;Load ASCII code for space into the ACC
 1846/ CE0 : 46 82 03                              CALL	ECHO               ;Display the space
 1847/ CE3 : 06 B0                                 MVI	A, 260o               ;Load ASCII code for 0 into the ACC
 1848/ CE5 : 44 82 03                              JMP	ECHO               ;Display 0 and exit to calling routine
 1849/ CE8 : 36 48                      FRAC:      MVI	L, 110o               ;Load L with address of FIXED/FLOAT flag
 1850/ CEA : 3E 00                                 MVI	M, 000                ;Reset it to indicate floating point mode
 1851/ CEC : 44 75 14                              JMP	FPOUT              ;Display floating point number and return to caller
 1852/ CEF : 36 00                      PCOMMA:    MVI	L, 000                ;Load L with address of (cc) in line input buffer
 1853/ CF1 : C7                                    MOV	A,M                    ;Fetch the (cc) for the line into the ACC
 1854/ CF2 : 36 83                                 MVI	L, 203o               ;Change pointer to PRINT pointer storage location
 1855/ CF4 : 97                                    SUB	M                    ;Subtract value of PRINT pointer from line (cc)
 1856/ CF5 : 33                                    RM                    ;If at end of buffer, do not TAB
 1857/ CF6 : 36 23                                 MVI	L, 043o               ;If not end, load L with address of COLUMN COUNTER
 1858/ CF8 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of COLUMN COUNTER
 1859/ CFA : C7                                    MOV	A,M                    ;Fetch COLUMN COUNTER into the accumulator
 1860/ CFB : 24 F0                                 ANI	360o               ;Find the last TAB position (multiple of 16 decimal)
 1861/ CFD : 04 10                                 ADI	020o               ;Add 16 (decimal) to get new TAB position
 1862/ CFF : 97                                    SUB	M                    ;Subtract current position from next TAB position
 1863/ D00 : D0                                    MOV	C,A                    ;Store this value in register C as a counter
 1864/ D01 : 06 A0                                 MVI	A, 240o               ;Load the ACC with the ASCII code for space
 1865/ D03 : 46 82 03                   PCOM1:     CALL	ECHO               ;Display the space
 1866/ D06 : 11                                    DCR	C                    ;Decrement the loop counter
 1867/ D07 : 48 03 0D                              JNZ	PCOM1              ;Continue displaying spaces until loop counter is zero
 1868/ D0A : 07                                    RET                    ;Then return to calling routine
 1869/ D0B : 46 A0 08                   LET0:      CALL	SAVESY             ;Entry point for IMPLIED LET statement. Save the
 1870/ D0E : 36 82                                 MVI	L, 202o               ;Variable (to left of the equal sign). Set L to the SCAN
 1871/ D10 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Pointer. Set H to the page of the SCAN pointer.
 1872/ D12 : CF                                    MOV	B,M                    ;Fetch value of SCAN pointer. (Points to = sign in In bf)
 1873/ D13 : 36 83                                 MVI	L, 203o               ;Change pointer to LET pointer (was TOKEN value)
 1874/ D15 : F9                                    MOV	M,B                    ;Place the SCAN pointer value into the LET pointer
 1875/ D16 : 44 61 0D                              JMP	LET5               ;Continue processing the LET statement line
 1876/ D19 : 46 AD 02                   LET:       CALL	CLESYM             ;Initialize the SYMBOL BUFFER for new entry
 1877/ D1C : 36 64                                 MVI	L, 144o               ;Load L with address of start of AUX SYMBOL BUFF
 1878/ D1E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of AUX SYMBOL BUFFER
 1879/ D20 : 3E 00                                 MVI	M, 000                ;Initialize AUX SYMBOL BUFFER
 1880/ D22 : 36 82                      LET1:      MVI	L, 202o               ;Entry point for ARRAY IMPLIED LET statement.
 1881/ D24 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set pointer to SCAN pointer storage location
 1882/ D26 : CF                                    MOV	B,M                    ;Fetch the SCAN pointer value (last letter scanned by
 1883/ D27 : 08                                    INR	B                    ;SYNTAX subroutine) and add one to next character
 1884/ D28 : 36 83                                 MVI	L, 203o               ;Change L to LET pointer storage location
 1885/ D2A : F9                                    MOV	M,B                    ;Store former SCAN value (updated) in LET pointer
 1886/ D2B : 36 83                      LET2:      MVI	L, 203o               ;Set L to gtorage location of LET pointer
 1887/ D2D : 46 A0 02                              CALL	GETCHR             ;Fetch the character pointed to by the LET pointer
 1888/ D30 : 68 52 0D                              JZ	LET4               ;If character is a space, ignore it
 1889/ D33 : 3C BD                                 CPI	275o               ;See if character is the equal (=) sign
 1890/ D35 : 68 61 0D                              JZ	LET5               ;If so, go process other side of the statement (after
 1891/ D38 : 3C A8                                 CPI	250o               ;@@ If not, see if character is a right parenthesis
 1892/ D3A : 48 4B 0D                              JNZ	LET3               ;If not, continue looking for equal sign
 1893/ D3D : 46 65 2D                              CALL	ARRAY              ;@@ If so, have subscript. Call array set up subroutine.
 1894/ D40 : 36 86                                 MVI	L, 206o               ;@@ Load L with address of ARRAY pointer
 1895/ D42 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;@@ ** Load H with page of ARRAY pointer
 1896/ D44 : CF                                    MOV	B,M                    ;@@ Fetch value (points to ")" character of subscript)
 1897/ D45 : 36 83                                 MVI	L, 203o               ;@@ Load L with address of LET pointer
 1898/ D47 : F9                                    MOV	M,B                    ;@@ Place ARRAY pointer value as new LET pointer
 1899/ D48 : 44 52 0D                              JMP	LET4               ;@@ Continue to look for = sign in statement line
 1900/ D4B : 36 64                      LET3:      MVI	L, 144o               ;Reset L to start of AUX SYMBOL BUFFER
 1901/ D4D : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ** Load H with page of AUX SYMBOL BUFFER
 1902/ D4F : 46 CC 02                              CALL	CONCT1             ;Concatenate character to the AUX SYMBOL BUFFER
 1903/ D52 : 36 83                      LET4:      MVI	L, 203o               ;Load L with address of LET pointer storage location
 1904/ D54 : 46 03 03                              CALL	LOOP               ;Add one to pointer and test for end of line input buffer
 1905/ D57 : 48 2B 0D                              JNZ	LET2               ;If not end of line, continue looking for the equal sign
 1906/ D5A : 06 CC                      LETERR:    MVI	A, 314o               ;If do not find an equal sign in the LET statement line
 1907/ D5C : 16 C5                                 MVI	C, 305o               ;Then have a LE (Let Error). Load the code for L and E
 1908/ D5E : 44 96 02                              JMP	ERROR              ;Into registers ACC and C and go display the error msg.
 1909/ D61 : 36 83                      LET5:      MVI	L, 203o               ;When find the equal sign, reset L to point to the LET
 1910/ D63 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Pointer and H to the proper page. Fetch the pointer
 1911/ D65 : CF                                    MOV	B,M                    ;Value into register B and add one to advance pointer
 1912/ D66 : 08                                    INR	B                    ;Over the equal sign to first char in the expression.
 1913/ D67 : 36 BE                                 MVI	L, 276o               ;Set L to point to the address of the EVAL pointer
 1914/ D69 : F9                                    MOV	M,B                    ;Set EVAL pointer to start evaluating right after the
 1915/ D6A : 36 00                                 MVI	L, 000                ;Equal sign. Now change L to start of line input buffer.
 1916/ D6C : CF                                    MOV	B,M                    ;Fetch the (cc) value into register B. (Length of line.)
 1917/ D6D : 36 BF                                 MVI	L, 277o               ;Load L with EVAL FINISH pointer storage location.
 1918/ D6F : F9                                    MOV	M,B                    ;Set it to stop evaluating at end of the line.
 1919/ D70 : 46 94 03                              CALL	EVAL               ;Call the subroutine to evaluate the expression.
 1920/ D73 : 46 AA 08                              CALL	RESTSY             ;Restore the name of the variable to receive new value.
 1921/ D76 : 46 2D 08                              CALL	STOSYM             ;Store the new value for the variable in variables table.
 1922/ D79 : 44 4E 0B                              JMP	NXTLIN             ;Go process next line of the program.
 1923/ D7C : 36 E8                      GOTO:      MVI	L, 350o               ;Load L with start of AUX LINE NR BUFFER
 1924/ D7E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of AUX LINE NR BUFFER
 1925/ D80 : 3E 00                                 MVI	M, 000                ;Initialize the AUX LINE NR BUFFER to zero
 1926/ D82 : 36 82                                 MVI	L, 202o               ;Load L with address of SCAN pointer storage location
 1927/ D84 : CF                                    MOV	B,M                    ;Fetch pointer value (last char scanned by SYNTAX)
 1928/ D85 : 08                                    INR	B                    ;Add one to skip over the last 0 in GOTO keyword
 1929/ D86 : 36 83                                 MVI	L, 203o               ;Change pointer to GOTO pointer (formerly TOKEN)
 1930/ D88 : F9                                    MOV	M,B                    ;Store the updated SCAN pointer as the GOTO pointer
 1931/ D89 : 36 83                      GOTO1:     MVI	L, 203o               ;Load L with address of GOTO pointer
 1932/ D8B : 46 A0 02                              CALL	GETCHR             ;Fetch the character pointed to by the GOTO pointer
 1933/ D8E : 68 A0 0D                              JZ	GOTO2              ;If character was a space, ignore it
 1934/ D91 : 3C B0                                 CPI	260o               ;See if character is in the range of a decimal digit
 1935/ D93 : 70 A8 0D                              JM	GOTO3              ;If not, must have end of the line number digit string
 1936/ D96 : 3C BA                                 CPI	272o               ;Continue to test for decitnal digit
 1937/ D98 : 50 A8 0D                              JP	GOTO3              ;If not, mugt have end of the line number digit string
 1938/ D9B : 36 E8                                 MVI	L, 350o               ;If valid decimal digit, load L with addr of AUX LINE
 1939/ D9D : 46 CC 02                              CALL	CONCT1             ;NR BUFFER and concatenate digit to the buffer.
 1940/ DA0 : 36 83                      GOTO2:     MVI	L, 203o               ;Reset pointer to GOTO pointer storage location
 1941/ DA2 : 46 03 03                              CALL	LOOP               ;Advance the pointer value and test for end of line
 1942/ DA5 : 48 89 0D                              JNZ	GOTO1              ;If not end of line, fetch next digit in GOTO line number
 1943/ DA8 : 36 F0                      GOTO3:	   MVI	L, 360o               ;Set L to user program buffer pointer storage location
 1944/ DAA : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of program buffer pointer
 1945/ DAC : 3E 1B                                 MVI	M, BGNPGRAM           ;Initialize high part of pointer to start of pgm buffer
 1946/ DAE : 30                                    INR	L                    ;Advance the memory point
 1947/ DAF : 3E 00                                 MVI	M, 000                ;Initialize the low part of pointer to start of pgm buffer
 1948/ DB1 : 46 AD 02                   GOTO4:     CALL	CLESYM             ;Clear the SYMBOL BUFFER
 1949/ DB4 : 36 84                                 MVI	L, 204o               ;Load L with address of GOTO SEARCH pointer
 1950/ DB6 : 3E 01                                 MVI	M, 001                ;Initialize to one for first char of line
 1951/ DB8 : 36 84                      GOTO5:     MVI	L, 204o               ;Load L with address of GOTO SEARCH pointer
 1952/ DBA : 46 53 0A                              CALL	GETCHP             ;Fetch character pointed to by GOTO SEARCH pointer
 1953/ DBD : 68 CD 0D                              JZ	GOTO6              ;From line pointed to in user program buffer. Ignore
 1954/ DC0 : 3C B0                                 CPI	260o               ;Spaces. Check to see if character is a decirnal digit.
 1955/ DC2 : 70 E0 0D                              JM	GOTO7              ;If not, then have processed line number at the start of
 1956/ DC5 : 3C BA                                 CPI	272o               ;The current line. Continue the check for a valid decimal
 1957/ DC7 : 50 E0 0D                              JP	GOTO7              ;Digit. If have a decirnal digit then concatenate the digit
 1958/ DCA : 46 C8 02                              CALL	CONCTS             ;Onto the current string in the SYMBOL BUFFER,
 1959/ DCD : 36 84                      GOTO6:     MVI	L, 204o               ;Change L to the address of the GOTO SEARCH pointer
 1960/ DCF : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** And H to the proper page of the pointer
 1961/ DD1 : CF                                    MOV	B,M                    ;Fetch the GOTO SEARCH pointer value
 1962/ DD2 : 08                                    INR	B                    ;Increment the GOTO SEARCH pointer
 1963/ DD3 : F9                                    MOV	M,B                    ;And restore it back to memory
 1964/ DD4 : 36 F0                                 MVI	L, 360o               ;Change L to address of user program buffer pointer
 1965/ DD6 : D7                                    MOV	C,M                    ;Save the high part of this pointer value in register C
 1966/ DD7 : 30                                    INR	L                    ;Advance L to the low part of the pgrn buffer pointer
 1967/ DD8 : F7                                    MOV	L,M                    ;Now load it into L
 1968/ DD9 : EA                                    MOV	H,C                    ;And transfer C into H to point to start of the line
 1969/ DDA : C7                                    MOV	A,M                    ;Fetch the (cc) of the current line being pointed to in the
 1970/ DDB : 09                                    DCR	B                    ;User pgm buff. Decrernent B to previous value. Compare
 1971/ DDC : B9                                    CMP	B                    ;GOTO SEARCH pointer value to length of current line.
 1972/ DDD : 48 B8 0D                              JNZ	GOTO5              ;If not end of line then continue getting current line nr.
 1973/ DE0 : 36 50                      GOTO7:     MVI	L, 120o               ;Load L with address of start of the SYMBOL BUFFER
 1974/ DE2 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;Set H to the page of the SYMBOL BUFFER
 1975/ DE4 : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;Set D to the page of the AUX LINE NR BUFFER
 1976/ DE6 : 26 E8                                 MVI	E, 350o               ;Set E to the start of the AUX LINE NR BUFFER
 1977/ DE8 : 46 DA 02                              CALL	STRCP              ;Compare GOTO line number against current line nr.
 1978/ DEB : 68 6E 0B                              JZ	SAMLIN             ;If they match, found GOTO line. Pick up ops there!
 1979/ DEE : 36 F0                                 MVI	L, 360o               ;Else, set L to user program buffer pntr storage location
 1980/ DF0 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of user program buffer pointer
 1981/ DF2 : DF                                    MOV	D,M                    ;Fetch the high part of this pointer into register D
 1982/ DF3 : 30                                    INR	L                    ;Advance the memory pointer
 1983/ DF4 : E7                                    MOV	E,M                    ;Fetch the low part into register E
 1984/ DF5 : EB                                    MOV	H,D                    ;Transfer the pointer to H
 1985/ DF6 : F4                                    MOV	L,E                    ;And L. Fetch the (cc) of the current line into register
 1986/ DF7 : CF                                    MOV	B,M                    ;B and then add one to account for the (cc) byte to get
 1987/ DF8 : 08                                    INR	B                    ;Total length of the current line in the user pgm buffer
 1988/ DF9 : 46 C5 0A                              CALL	ADBDE              ;Add the total length to the pointer value in D & E
 1989/ DFC : 36 F0                                 MVI	L, 360o               ;To get the starting address of the next line in the user
 1990/ DFE : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** User program buffer. Place the new value for the user
 1991/ E00 : FB                                    MOV	M,D                    ;Program buffer pointer back into the user program
 1992/ E01 : 30                                    INR	L                    ;Buffer pointer storage locations so that it points to the
 1993/ E02 : FC                                    MOV	M,E                    ;Next line to be processed in the user program buffer.
 1994/ E03 : 36 F4                                 MVI	L, 364o               ;Load L with address of end of user pgm buffer storage
 1995/ E05 : C3                                    MOV	A,D                    ;Location (page address) and fetch end of buffer page.
 1996/ E06 : BF                                    CMP	M                    ;Compare this with next line pointer (updated).
 1997/ E07 : 48 B1 0D                              JNZ	GOTO4              ;If not end of buffer, keep looking for the specified line
 1998/ E0A : 30                                    INR	L                    ;If have same page addresses, check the low address
 1999/ E0B : C4                                    MOV	A,E                    ;Portions to see if
 2000/ E0C : BF                                    CMP	M                    ;Have reached end of user program buffer
 2001/ E0D : 48 B1 0D                              JNZ	GOTO4              ;If not, continue looking. If end of buffer without
 2002/ E10 : 06 D5                      GOTOER:    MVI	A, 325o               ;Finding specified line, then have an error condition.
 2003/ E12 : 16 CE                                 MVI	C, 316o               ;Load ACC and register C with code for "UN" and go
 2004/ E14 : 44 96 02                              JMP	ERROR              ;Display "Undefined Line" error message.
 2005/ E17 : 36 82                      IF:        MVI	L, 202o               ;Set L to SCAN pointer storage location.
 2006/ E19 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H to page of SCAN pointer storage location.
 2007/ E1B : CF                                    MOV	B,M                    ;Fetch the SCAN pointer value to register B.
 2008/ E1C : 08                                    INR	B                    ;Add one to advance pointer over last char scanned.
 2009/ E1D : 36 BE                                 MVI	L, 276o               ;Change L to address of EVAL pointer. Set up EVAL
 2010/ E1F : F9                                    MOV	M,B                    ;Pointer to begin evaluation with next char in the line.
 2011/ E20 : 46 AD 02                              CALL	CLESYM             ;Clear the SYMBOL BUFFER.
 2012/ E23 : 36 D0                                 MVI	L, 320o               ;Set L to starting address of THEN in look-up table.
 2013/ E25 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of the look-up table.
 2014/ E27 : 46 0A 0B                              CALL	INSTR              ;Search for occurrence of THEN in the line input buffer.
 2015/ E2A : C4                                    MOV	A,E                    ;Transfer register E to ACC. If THEN not found
 2016/ E2B : A0                                    ANA	A                    ;The value in E will be zero.
 2017/ E2C : 48 42 0E                              JNZ	IF1                ;If THEN found, can evaluate the IF expression.
 2018/ E2F : 36 0B                                 MVI	L, 013o               ;If THEN not found, set L to Auting address of GOTO
 2019/ E31 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** In the KEYWORD look-up table. Set H to table
 2020/ E33 : 46 0A 0B                              CALL	INSTR              ;Search for occurrence of GOTO in the line input buffer.
 2021/ E36 : C4                                    MOV	A,E                    ;Transfer E to ACC. If GOTO not found
 2022/ E37 : A0                                    ANA	A                    ;The value in E will be zero.
 2023/ E38 : 48 42 0E                              JNZ	IF1                ;If GOTO found, can evaluate the IF expression.
 2024/ E3B : 06 C9                      IFERR:     MVI	A, 311o               ;Set ASCII code for letter I in ACC
 2025/ E3D : 16 C6                                 MVI	C, 306o               ;And code for letter F in register C
 2026/ E3F : 44 96 02                              JMP	ERROR              ;Go display the IF error message
 2027/ E42 : 36 BF                      IF1:       MVI	L, 277o               ;Load L with addr of EVAL FINISH pointer storage loc
 2028/ E44 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of storage location
 2029/ E46 : 21                                    DCR	E                    ;Subtract one from pointer in E and set the EVAL
 2030/ E47 : FC                                    MOV	M,E                    ;FINISH pointer so that it will evaluate up to the THEN
 2031/ E48 : 46 94 03                              CALL	EVAL               ;Or GOTO directive. Evaluate the expression.
 2032/ E4B : 36 56                                 MVI	L, 126o               ;Load L with address of FPACC Most Significant Word
 2033/ E4D : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of FPACC MSW
 2034/ E4F : C7                                    MOV	A,M                    ;Fetch the FPACC MSW into the accumulator
 2035/ E50 : A0                                    ANA	A                    ;Test the value of the FPACC MSW
 2036/ E51 : 68 4E 0B                              JZ	NXTLIN             ;If it is zero, IF condition failed, ignore rest of line.
 2037/ E54 : 36 BF                                 MVI	L, 277o               ;If not, load L with addr of EVAL FINISH pointer
 2038/ E56 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to the appmpriate page
 2039/ E58 : C7                                    MOV	A,M                    ;Fetch the value in the EVAL FINISH pointer
 2040/ E59 : 04 05                                 ADI	005                ;Add five to skip over THEN or GOTO directive
 2041/ E5B : 36 82                                 MVI	L, 202o               ;Change L to SCAN pointer stomge location
 2042/ E5D : F8                                    MOV	M,A                    ;Set up the SCAN pointer to location after THEN or
 2043/ E5E : C8                                    MOV	B,A                    ;GOTO directive. Also put this value in register B.
 2044/ E5F : 08                                    INR	B                    ;Add one to the value in B to point to next character
 2045/ E60 : 36 84                                 MVI	L, 204o               ;After THEN or GOTO. Change L to addr of THEN pntr
 2046/ E62 : F9                                    MOV	M,B                    ;Storage location and store the pointer value.
 2047/ E63 : 36 84                      IF2:       MVI	L, 204o               ;Load L with the address of the THEN pointer
 2048/ E65 : 46 A0 02                              CALL	GETCHR             ;Fetch the character pointed to by the THEN pointer
 2049/ E68 : 48 76 0E                              JNZ	IF3                ;If character is not a space, exit this loop
 2050/ E6B : 36 84                                 MVI	L, 204o               ;If fetch a space, ignore. Reset L to the THEN pointer
 2051/ E6D : 46 03 03                              CALL	LOOP               ;Add one to the THEN pointer and test for end of line
 2052/ E70 : 48 63 0E                              JNZ	IF2                ;If not end of line, keep looking for a character other
 2053/ E73 : 44 3B 0E                              JMP	IFERR              ;Than a space. If reach end of line first, then error
 2054/ E76 : 3C B0                      IF3:       CPI	260o               ;When find a character see if it is numeric.
 2055/ E78 : 70 80 0E                              JM	IF4                ;If not numeric, then should have a new type of
 2056/ E7B : 3C BA                                 CPI	272o               ;Statement. If numeric, then should have a line number.
 2057/ E7D : 70 7C 0D                              JM	GOTO               ;So process as though have a GOTO statement!
 2058/ E80 : 36 00                      IF4:       MVI	L, 000                ;Load L with addr of start of line input buffer.
 2059/ E82 : C7                                    MOV	A,M                    ;Fetch the (cc) byte to get length of line value.
 2060/ E83 : 36 84                                 MVI	L, 204o               ;Change L to current value of THEN pointer (where first
 2061/ E85 : 97                                    SUB	M                    ;Non-space char. found after THEN or GOTO). Subtract
 2062/ E86 : C8                                    MOV	B,A                    ;This value from length of line to get remainder. Now
 2063/ E87 : 08                                    INR	B                    ;Have length of second statement portion. Add one for
 2064/ E88 : D7                                    MOV	C,M                    ;(cc) count. Save THEN pointer value in register C.
 2065/ E89 : 36 00                                 MVI	L, 000                ;Reset L to start of line input buffer. Now put length of
 2066/ E8B : F9                                    MOV	M,B                    ;Second statement into (cc) position of input buffer.
 2067/ E8C : F2                                    MOV	L,C                    ;Set L to where second statement starts.
 2068/ E8D : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Set D to page of line input buffer.
 2069/ E8F : 26 01                                 MVI	E, 001                ;Set E to first character position of line input buffer.
 2070/ E91 : 46 0B 11                              CALL	MOVEIT             ;Move the second statement up in line to become first!
 2071/ E94 : 36 82                                 MVI	L, 202o               ;Load L with address of new SCAN pointer. Load
 2072/ E96 : 3E 01                                 MVI	M, 001                ;It with starting position for SYNTAX scan.
 2073/ E98 : 46 37 02                              CALL	SYNTX4             ;Use special entry to SYNTAX to get new TOKEN value.
 2074/ E9B : 44 89 0B                              JMP	DIRECT             ;Process the second statement in the original line.
 2075/ E9E : 36 E0                      GOSUB:     MVI	L, 340o               ;Load L with start of LINE NUMBER BUFFER
 2076/ EA0 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;Fetch (cc) of cuffent line number into register D
 2077/ EA2 : DF                                    MOV	D,M                    ;Fetch high value (page) of pgm line pointer to D
 2078/ EA3 : 18                                    INR	D                    ;Test contents of register by first incrementing
 2079/ EA4 : 19                                    DCR	D                    ;And then decrementing the value in the register
 2080/ EA5 : 68 AD 0E                              JZ	GOSUB1             ;If no line number, then processing a DIRECT statement
 2081/ EA8 : 36 F0                                 MVI	L, 360o               ;Else, load L with address of user pgm buff line pointer
 2082/ EAA : DF                                    MOV	D,M                    ;Fetch high value (page) of pgm line pointer to D
 2083/ EAB : 30                                    INR	L                    ;Advance the memory pointer
 2084/ EAC : E7                                    MOV	E,M                    ;Fetch the low part of pgm line pointer to E
 2085/ EAD : 36 3B                      GOSUB1:    MVI	L, 073o               ;Set L to address of GOSUB STACK POINTER
 2086/ EAF : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of GOSUB STACK POINTER
 2087/ EB1 : C7                                    MOV	A,M                    ;Fetch value in GOSUB stack pointer to ACC
 2088/ EB2 : 04 02                                 ADI	002                ;Add two to current stack pointer for new data to be
 2089/ EB4 : 3C 11                                 CPI	021o               ;Placed on the stack and see if stack overflows
 2090/ EB6 : 50 E7 0E                              JP	GOSERR             ;If stack filled, have an error condition
 2091/ EB9 : F8                                    MOV	M,A                    ;Else, store updated stack pointer
 2092/ EBA : 36 3E                                 MVI	L, 076o               ;Load L with address of start of stack less offset (2)
 2093/ EBC : 86                                    ADD	L                    ;Add GOSUB stack pointer to base address
 2094/ EBD : F0                                    MOV	L,A                    ;To get pointer to top of stack (page byte)
 2095/ EBE : FB                                    MOV	M,D                    ;Store page part of pgm buffer line pointer in stack
 2096/ EBF : 30                                    INR	L                    ;Advance pointer to next byte in stack
 2097/ EC0 : FC                                    MOV	M,E                    ;Store low part of pgm buffer line pointer in stack
 2098/ EC1 : 44 7C 0D                              JMP	GOTO               ;Proceed from here as though processing a GOTO
 2099/ EC4 : 36 3B                      RETURN:    MVI	L, 073o               ;Set L to address of GOSUB STACK POINTER
 2100/ EC6 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of GOSUB STACK POINTER
 2101/ EC8 : C7                                    MOV	A,M                    ;Fetch the value of GOSUB stack pointer to ACC
 2102/ EC9 : 14 02                                 SUI	002                ;Subtract two for data to be removed from stack
 2103/ ECB : 70 EE 0E                              JM	RETERR             ;If stack underflow, then have an error condition
 2104/ ECE : F8                                    MOV	M,A                    ;Restore new stack pointer to memory
 2105/ ECF : 04 02                                 ADI	002                ;Add two to point to previous top of stack
 2106/ ED1 : 36 3E                                 MVI	L, 076o               ;Load L with address of start of GOSUB stack less two
 2107/ ED3 : 86                                    ADD	L                    ;Add address of previous top of stack to base value
 2108/ ED4 : F0                                    MOV	L,A                    ;Set pointer to high address value in the stack
 2109/ ED5 : DF                                    MOV	D,M                    ;Fetch the high address value from stack to register D
 2110/ ED6 : 18                                    INR	D                    ;Exercise the register contents to see if high address
 2111/ ED7 : 19                                    DCR	D                    ;Obtained is zero. If so, original GOSUB statement was
 2112/ ED8 : 68 B6 08                              JZ	EXEC               ;A DIRECT statement. Must return to Executive!
 2113/ EDB : 30                                    INR	L                    ;Else, advance pointer to get low address value from the
 2114/ EDC : E7                                    MOV	E,M                    ;Stack into CPU register E.
 2115/ EDD : 36 F0                                 MVI	L, 360o               ;Load L with address of user pgm line pointer storage
 2116/ EDF : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Location. Load H with page of user pgm line pntr.
 2117/ EE1 : FB                                    MOV	M,D                    ;Put high address from stack into pgm line pointer.
 2118/ EE2 : 30                                    INR	L                    ;Advance the memory pointer
 2119/ EE3 : FC                                    MOV	M,E                    ;Put low address from stack into pgrn line pointer.
 2120/ EE4 : 44 4E 0B                              JMP	NXTLIN             ;Execute the next line after originating GOSUB line!
 2121/ EE7 : 06 C7                      GOSERR:    MVI	A, 307o               ;Load ASCII code for letter G into accumulator
 2122/ EE9 : 16 D3                                 MVI	C, 323o               ;Load ASCII code for letter S into register C
 2123/ EEB : 44 96 02                              JMP	ERROR              ;Go display GoSub (GS) error message.
 2124/ EEE : 06 D2                      RETERR:    MVI	A, 322o               ;Load ASCII code for letter R into accumulator
 2125/ EF0 : 16 D4                                 MVI	C, 324o               ;Load ASCII code for letter T into register C
 2126/ EF2 : 44 96 02                              JMP	ERROR              ;Go display ReTurn (RT) error message.
 2127/ EF5 : 46 AD 02                   INPUT:     CALL	CLESYM             ;Clear the SYMBOL BUFFER
 2128/ EF8 : 36 82                                 MVI	L, 202o               ;Load L with address of SCAN pointer storage location
 2129/ EFA : CF                                    MOV	B,M                    ;Fetch value of SCAN pointer to register B
 2130/ EFB : 08                                    INR	B                    ;Increment value to point to next chamcter
 2131/ EFC : 36 83                                 MVI	L, 203o               ;Change L to point to INPUT pointer (formerly TOKEN)
 2132/ EFE : F9                                    MOV	M,B                    ;Updated SCAN pointer becomes INPUT pointer
 2133/ EFF : 36 83                      INPUT1:    MVI	L, 203o               ;Load L with address of INPUT pointer
 2134/ F01 : 46 A0 02                              CALL	GETCHR             ;Fetch a character from the line input buffer
 2135/ F04 : 68 22 0F                              JZ	INPUT3             ;If character is a space, ignore it. Else,
 2136/ F07 : 3C AC                                 CPI	254o               ;See if character is a comma. If so, process the
 2137/ F09 : 68 33 0F                              JZ	INPUT4             ;Variable that preceeds the comma.
 2138/ F0C : 3C A8                                 CPI	250o               ;If not, see if character is a left parenthesis.
 2139/ F0E : 48 1F 0F                              JNZ	INPUT2             ;If not, continue processing to build up symbolic variable
 2140/ F11 : 46 70 2D                              CALL	ARRAY2             ;@@ If so, call array subscripting subroutine
 2141/ F14 : 36 86                                 MVI	L, 206o               ;@@ Load L with address of array set up pointer
 2142/ F16 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;@@ ** Load H with page of array set up pointer
 2143/ F18 : CF                                    MOV	B,M                    ;@@ Fetch pointer value (point to ")" of subscript)
 2144/ F19 : 36 83                                 MVI	L, 203o               ;@@ Change pointer to address of INPUT pointer
 2145/ F1B : F9                                    MOV	M,B                    ;@@ Update INPUT pointer
 2146/ F1C : 44 22 0F                              JMP	INPUT3             ;@@ Jump over concatenate instruction below
 2147/ F1F : 46 C8 02                   INPUT2:    CALL	CONCTS             ;Concatenate character to SYMBOL BUFFER
 2148/ F22 : 36 83                      INPUT3:    MVI	L, 203o               ;Load L with address of INPUT pointer
 2149/ F24 : 46 03 03                              CALL	LOOP               ;Increment INPUT pointer and test for end of line
 2150/ F27 : 48 FF 0E                              JNZ	INPUT1             ;If not end of line, go get next character
 2151/ F2A : 46 44 0F                              CALL	INPUTX             ;If end of buffer, get input for variable in the SYMBOL
 2152/ F2D : 46 2D 08                              CALL	STOSYM             ;BUFFER and store the value in the VARIABLES table
 2153/ F30 : 44 4E 0B                              JMP	NXTLIN             ;Then continue to interpret next statement line
 2154/ F33 : 46 44 0F                   INPUT4:    CALL	INPUTX             ;Get input from user for variable in SYMBOL BUFFER
 2155/ F36 : 46 2D 08                              CALL	STOSYM             ;Store the inputted value in the VARIABLES table
 2156/ F39 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of INPUT pointer
 2157/ F3B : 36 83                                 MVI	L, 203o               ;Set L to location of INPUT pointer
 2158/ F3D : CF                                    MOV	B,M                    ;Fetch pointer value for last character examined
 2159/ F3E : 36 82                                 MVI	L, 202o               ;Change L to point to SCAN pointer storage location
 2160/ F40 : F9                                    MOV	M,B                    ;Update the SCAN pointer
 2161/ F41 : 44 F5 0E                              JMP	INPUT              ;Continue processing statement line for next variable
 2162/ F44 : 36 50                      INPUTX:    MVI	L, 120o               ;Load L with start of SYMBOL BUFFER (contains cc)
 2163/ F46 : C7                                    MOV	A,M                    ;Fetch the (cc) (length of symbol in the buffer) to ACC
 2164/ F47 : 86                                    ADD	L                    ;Add (cc) to base address to set up
 2165/ F48 : F0                                    MOV	L,A                    ;Pointer to last character in the SYMBOL BUFFER
 2166/ F49 : C7                                    MOV	A,M                    ;Fetch the last character in the SYMBOL BUFFER
 2167/ F4A : 3C A4                                 CPI	244o               ;See if the last chamcter was a $ sign
 2168/ F4C : 48 60 0F                              JNZ	INPUTN             ;If not a $ sign, get variable value as a numerical entry
 2169/ F4F : 36 50                                 MVI	L, 120o               ;If $ sign, reset L to start of the SYMBOL BUFFER
 2170/ F51 : CF                                    MOV	B,M                    ;Fetch the (cc) for the variable in the SYMBOL BUFF
 2171/ F52 : 09                                    DCR	B                    ;Subtract one from (cc) to chop off the $ sign
 2172/ F53 : F9                                    MOV	M,B                    ;Restore the new (cc) for the SYMBOL BUFFER
 2173/ F54 : 46 6F 0F                              CALL	FP0                ;Call subroutine to zero the floating point accumulator
 2174/ F57 : 46 91 03                              CALL	CINPUT             ;Input one character from system input device
 2175/ F5A : 36 54                                 MVI	L, 124o               ;Load L with address of the LSW of the FPACC
 2176/ F5C : F8                                    MOV	M,A                    ;Place the ASCII code for the character inputted there
 2177/ F5D : 44 34 10                              JMP	FPFLT              ;Convert value to floating point format in FPACC
 2178/ F60 : 36 64                      INPUTN:    MVI	L, 144o               ;Load L with address of start of AUX SYMBOL BUFF
 2179/ F62 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of AUX SYMBOL BUFFER
 2180/ F64 : 06 BF                                 MVI	A, 277o               ;Load accumulator with ASCII code for ? mark
 2181/ F66 : 46 82 03                              CALL	ECHO               ;Call output subroutine to display the ? mark
 2182/ F69 : 46 0C 03                              CALL	STRIN              ;Input string of characters (number) fm input device
 2183/ F6C : 44 24 13                              JMP	DINPUT             ;Convert decimal string into binary floating point nr.
 2184/ F6F : 2E 01                      FP0:       MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with floating point working registers page
 2185/ F71 : 44 A7 06                              JMP	CFALSE             ;Zero the floating point accumulator & exit to caller
 2186/ F74 : 36 64                      FOR:       MVI	L, 144o               ;Load L with address of AUX SYMBOL BUFFER
 2187/ F76 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of AUX SYMBOL BUFFER
 2188/ F78 : 3E 00                                 MVI	M, 000                ;Initialize buffer by clearing first byte
 2189/ F7A : 36 66                                 MVI	L, 146o               ;Load L with location of second character in buffer
 2190/ F7C : 3E 00                                 MVI	M, 000                ;Clear that location in case of single character variable
 2191/ F7E : 36 85                                 MVI	L, 205o               ;Load L with address of FOR/NEXT STACK pointer
 2192/ F80 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of FOR/NEXT STACK pointer
 2193/ F82 : CF                                    MOV	B,M                    ;Fetch the FOR/NEXT STACK pointer
 2194/ F83 : 08                                    INR	B                    ;Increment it in preparation for pushing operation
 2195/ F84 : F9                                    MOV	M,B                    ;Restore it back to its storage location
 2196/ F85 : 36 F0                                 MVI	L, 360o               ;Load L with address of user pgrn buffer line pointer
 2197/ F87 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of line pointer
 2198/ F89 : DF                                    MOV	D,M                    ;Fetch page address of pgm buffer line pntr into D
 2199/ F8A : 30                                    INR	L                    ;Advance the memory pointer to pick up low part
 2200/ F8B : E7                                    MOV	E,M                    ;Fetch low address of pgm buffer line pntr into E
 2201/ F8C : C1                                    MOV	A,B                    ;Restore updated FOR/NEXT STACK pointer to ACC
 2202/ F8D : 02                                    RLC                    ;Rotate it left to multiply by two, then rotate it again to
 2203/ F8E : 02                                    RLC                    ;Multiply by four. Add this value to the base address of
 2204/ F8F : 04 5C                                 ADI	134o               ;The FOR/NEXT STACK to point to the new top of
 2205/ F91 : F0                                    MOV	L,A                    ;The FOR/NEXT STACK and set up to point to stack
 2206/ F92 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H for page of the FOR/NEXT STACK
 2207/ F94 : FB                                    MOV	M,D                    ;Store the page portion of the user pgrn buffer line pntr
 2208/ F95 : 30                                    INR	L                    ;In the FORINEXT STACK, advance register 4 then
 2209/ F96 : FC                                    MOV	M,E                    ;Store the low portion of the pgrn line pntr on the stack
 2210/ F97 : 36 D5                                 MVI	L, 325o               ;Change L to point to start of TO string which is stored
 2211/ F99 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** In a text strings storage area on this page
 2212/ F9B : 46 0A 0B                              CALL	INSTR              ;Search the statement line for the occurrence of TO
 2213/ F9E : C4                                    MOV	A,E                    ;Register E wiU be zero if TO not found. Move E to ACC
 2214/ F9F : A0                                    ANA	A                    ;To make a test
 2215/ FA0 : 48 AA 0F                              JNZ	FOR1               ;If TO found then proceed with FOR statement
 2216/ FA3 : 06 C6                      FORERR:    MVI	A, 306o               ;Else have a For Error. Load ACC with ASCII code for
 2217/ FA5 : 16 C5                                 MVI	C, 305o               ;Letter F and register C with code for letter E.
 2218/ FA7 : 44 96 02                              JMP	ERROR              ;Then go display the FE message.
 2219/ FAA : 36 82                      FOR1:      MVI	L, 202o               ;Load L with address of SCAN pointer storage location
 2220/ FAC : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of the SCAN pointer
 2221/ FAE : CF                                    MOV	B,M                    ;Fetch pointer value to ACC (points to letter R in the
 2222/ FAF : 08                                    INR	B                    ;For directive). Increment it to point to next character
 2223/ FB0 : 36 84                                 MVI	L, 204o               ;In the line. Change register L and set this value up
 2224/ FB2 : F9                                    MOV	M,B                    ;As an updated FOR pointer.
 2225/ FB3 : 36 83                                 MVI	L, 203o               ;Set L to address of TO pointer (formerly TOKEN)
 2226/ FB5 : FC                                    MOV	M,E                    ;Save pointer to TO in the TO pointer!
 2227/ FB6 : 36 84                      FOR2:      MVI	L, 204o               ;Load L with address of the FOR pointer
 2228/ FB8 : 46 A0 02                              CALL	GETCHR             ;Fetch a character from the statement line
 2229/ FBB : 68 C8 0F                              JZ	FOR3               ;If it is a space, ignore it
 2230/ FBE : 3C BD                                 CPI	275o               ;Test to see if character is the "=" sign
 2231/ FC0 : 68 D3 0F                              JZ	FOR4               ;If so, variable name is in the AUX SYMBOLBUFFER
 2232/ FC3 : 36 64                                 MVI	L, 144o               ;If not, then set L to point to start of the AUX SYMBOL
 2233/ FC5 : 46 CC 02                              CALL	CONCT1             ;BUFFER and concatenate the character onto the buffer
 2234/ FC8 : 36 84                      FOR3:      MVI	L, 204o               ;Reset L to address of the FOR pointer
 2235/ FCA : 46 03 03                              CALL	LOOP               ;Increment the pointer and see if end of line
 2236/ FCD : 48 B6 0F                              JNZ	FOR2               ;If not end of line, continue looking for the "=" sign
 2237/ FD0 : 44 A3 0F                              JMP	FORERR             ;If reach end of line before "=" sign, then have error
 2238/ FD3 : 36 84                      FOR4:      MVI	L, 204o               ;Set L with address of the FOR pointer
 2239/ FD5 : CF                                    MOV	B,M                    ;Fetch pointer value to ACC (pointing to sign)
 2240/ FD6 : 08                                    INR	B                    ;Increment it to skip over the "=" sign
 2241/ FD7 : 36 BE                                 MVI	L, 276o               ;Set L to address of the EVAL pointer
 2242/ FD9 : F9                                    MOV	M,B                    ;Restore the updated pointer to storage
 2243/ FDA : 36 83                                 MVI	L, 203o               ;Set L to the address of the TO pointer
 2244/ FDC : CF                                    MOV	B,M                    ;Fetch pointer value to ACC (pointing to letter T in TO)
 2245/ FDD : 09                                    DCR	B                    ;Decrement it to point to character before the T in TO
 2246/ FDE : 36 BF                                 MVI	L, 277o               ;Set L to EVAL FINISH pointer storage location
 2247/ FE0 : F9                                    MOV	M,B                    ;Store the EVAL FINISH pointer value
 2248/ FE1 : 46 94 03                              CALL	EVAL               ;Evaluate the expression between the "=" sign and TO
 2249/ FE4 : 46 AA 08                              CALL	RESTSY             ;Directive. Place the variable name in the variables table.
 2250/ FE7 : 36 64                                 MVI	L, 144o               ;Load L with starting address of the AUX SYMBOL BF
 2251/ FE9 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with the page of the AUX SYMBOL BUFF
 2252/ FEB : C7                                    MOV	A,M                    ;Fetch the (cc) for the name in the buffer
 2253/ FEC : 3C 01                                 CPI	001o               ;See if the symbol (name) length is just one character
 2254/ FEE : 48 A6 19                              JNZ	FOR5               ;If not, go directly to place name in FOR/NEXT STACK
 2255/ FF1 : 36 66                                 MVI	L, 146o               ;If so, set L to point to second character location in the
 2256/ FF3 : 3E 00                                 MVI	M, 000                ;AUX SYMBOL BUFFER and set it equal to zero.
 2257/ FF5 : 44 A6 19                              JMP	FOR5               ;This jump directs program over ontrs/cntrs/table area
 2258/ FF8 :                            ;;; LAST LINE SHOULD START AT 17 365 0ff5h
 2259/ FF8 :                            ;;; PATCH AREA FOLLOWS THIS
 2260/ FF8 :                            
 2261/ FF8 :                            ;	db	(1000h-$) dup 0
 2262/ FF8 :                            
 2263/1000 :                                       ORG	1000h              ;020#000
 2264/1000 :                            
 2265/1000 : 36 56                      FPFIX:     MVI	L, 126o               ;Set L to point to MSW of FPACC
 2266/1002 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to point to page of FPACC
 2267/1004 : C7                                    MOV	A,M                    ;Fetch MSW of FPACC
 2268/1005 : 36 40                                 MVI	L, 100o               ;Change pointer to SIGN indicator on same page
 2269/1007 : F8                                    MOV	M,A                    ;Place MSW of FPACC into SIGN indicator
 2270/1008 : A0                                    ANA	A                    ;Now test sign bit of MSW of FPACC
 2271/1009 : 72 82 10                              CM	FPCOMP             ;Two's complement value in FPACC if negative
 2272/100C : 36 57                                 MVI	L, 127o               ;Change pointer to FPACC Exponent register
 2273/100E : 06 17                                 MVI	A, 027o               ;Set accumulator to 23 (decimal) for number of bits
 2274/1010 : CF                                    MOV	B,M                    ;Load FPACC Exponent into CPU register B
 2275/1011 : 08                                    INR	B                    ;Exercise the value in register B
 2276/1012 : 09                                    DCR	B                    ;To set CPU flags
 2277/1013 : 70 29 10                              JM	FPZERO             ;If FPACC Exponent is negative set FPACC to zero
 2278/1016 : 91                                    SUB	B                    ;Subtract value of FPACC Exponent from 23 decimal
 2279/1017 : 70 F6 0A                              JM	FIXERR             ;If Exp larger than 23 decimal cannot convert
 2280/101A : D0                                    MOV	C,A                    ;Else place result in register C as counter for number
 2281/101B : 36 56                      FPFIXL:    MVI	L, 126o               ;Of rotate ops. Set pointer to MSW of FPACC
 2282/101D : 0E 03                                 MVI	B, 003                ;Set precision counter (number of bytes in mantissa)
 2283/101F : 46 89 12                              CALL	ROTATR             ;Rotate FPACC right the number of places indicated
 2284/1022 : 11                                    DCR	C                    ;By count in register C to effectively rotate all the
 2285/1023 : 48 1B 10                              JNZ	FPFIXL             ;Significant bits to the left of the floating point decimal
 2286/1026 : 44 7D 10                              JMP	RESIGN             ;Point. Go check original sign & negate answer if req'd.
 2287/1029 :                            
 2288/1029 :                                                              ;Following subroutine clears the FPACC to the zero
 2289/1029 :                                                              ;condition.
 2290/1029 :                            
 2291/1029 : 36 56                      FPZERO:    MVI	L, 126o               ;Set L to point to MSW of FPACC
 2292/102B : A8                                    XRA	A                    ;Clear the accumulator
 2293/102C : F8                                    MOV	M,A                    ;Set the MSW of FPACC to zero
 2294/102D : 31                                    DCR	L                    ;Decrement the pointer
 2295/102E : F8                                    MOV	M,A                    ;Set the next significant word of FPACC to zero
 2296/102F : 31                                    DCR	L                    ;Decrement the pointer
 2297/1030 : F8                                    MOV	M,A                    ;Set the LSW of FPACC to zero
 2298/1031 : 31                                    DCR	L                    ;Decrement the pointer
 2299/1032 : F8                                    MOV	M,A                    ;Set the auxiliary FPACC byte to zero
 2300/1033 : 07                                    RET                    ;Exit to calling routine
 2301/1034 :                            
 2302/1034 :                                                              ;The next instruction is a special entry point to
 2303/1034 :                                                              ;the FPNORM subroutine that is used when a number is
 2304/1034 :                                                              ;converted from fixed to floating point. The FPNORM
 2305/1034 :                                                              ;label is the entry point when a number already in float-
 2306/1034 :                                                              ;ing point fonnat is to be normalized.
 2307/1034 :                            
 2308/1034 : 0E 17                      FPFLT:     MVI	B, 027o               ;For fixed to float set CPU register B to 23 decimal
 2309/1036 : C1                         FPNORM:    MOV	A,B                    ;Get CPU register B into ACC to check for special case
 2310/1037 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of FPACC
 2311/1039 : 36 57                                 MVI	L, 127o               ;Set L to FPACC Exponent byte
 2312/103B : A0                                    ANA	A                    ;Set CPU flags to test what was in CPU register B
 2313/103C : 68 40 10                              JZ	NOEXC0             ;If B was zero then do standard normalization
 2314/103F : F9                                    MOV	M,B                    ;Else set Exponent of FPACC to 23 decimal
 2315/1040 : 31                         NOEXC0:    DCR	L                    ;Change pointer to MSW of FPACC
 2316/1041 : C7                                    MOV	A,M                    ;Fetch MSW of FPACC into accumulator
 2317/1042 : 36 40                                 MVI	L, 100o               ;Change pointer to SIGN indicator storage location
 2318/1044 : F8                                    MOV	M,A                    ;Place the MSW of FPACC there for future reference
 2319/1045 : A0                                    ANA	A                    ;Set CPU flags to test MSW of FPACC
 2320/1046 : 50 50 10                              JP	ACZERT             ;If sign bit not set then jump ahead to do next test
 2321/1049 : 0E 04                                 MVI	B, 004                ;If sign bit set, number in FPACC is negative. Set up
 2322/104B : 36 53                                 MVI	L, 123o               ;For two's complement operation
 2323/104D : 46 68 12                              CALL	COMPLM             ;And negate the value in the FPACC to make it positive
 2324/1050 : 36 56                      ACZERT:    MVI	L, 126o               ;Reset pointer to MSW of FPACC
 2325/1052 : 0E 04                                 MVI	B, 004                ;Set precision counter to number of bytes in FPACC
 2326/1054 : C7                         LOOK0:     MOV	A,M                    ;Plus one. Fetch a byte of the FPACC.
 2327/1055 : A0                                    ANA	A                    ;Set CPU flags
 2328/1056 : 48 63 10                              JNZ	ACNONZ             ;If find anything then FPACC is not zero
 2329/1059 : 31                                    DCR	L                    ;Else decrement pointer to NSW of FPACC
 2330/105A : 09                                    DCR	B                    ;Decrement precision counter
 2331/105B : 48 54 10                              JNZ	LOOK0              ;Continue checking to see if FPACC contains anything
 2332/105E : 36 57                                 MVI	L, 127o               ;Until precision counter is zero. If reach here then
 2333/1060 : A8                                    XRA	A                    ;Reset pointer to FPACC Exponent. Clear the ACC and
 2334/1061 : F8                                    MOV	M,A                    ;Clear out the FPACC Exponent. Value of FPACC is zip!
 2335/1062 : 07                                    RET                    ;Exit to calling routine
 2336/1063 : 36 53                      ACNONZ:    MVI	L, 123o               ;If FPACC has any value set pointer to LSW minus one
 2337/1065 : 0E 04                                 MVI	B, 004                ;Set precision counter to number of bytes in FPACC
 2338/1067 : 46 7F 12                              CALL	ROTATL             ;Plus one for special cases. Rotate the contents of the
 2339/106A : C7                                    MOV	A,M                    ;FPACC to the LEFT. Pointer will be set to MSW after
 2340/106B : A0                                    ANA	A                    ;Rotate ops. Fetch MSW and see if have anything in
 2341/106C : 70 76 10                              JM	ACCSET             ;Most significant bit position. If so, have rotated enough
 2342/106F : 30                                    INR	L                    ;If not, advance pointer to FPACC Exponent. Fetch
 2343/1070 : CF                                    MOV	B,M                    ;The value of the Exponent and decrement it by one
 2344/1071 : 09                                    DCR	B                    ;To compensate for the rotate left of the mantissa
 2345/1072 : F9                                    MOV	M,B                    ;Restore the new value of the Exponent
 2346/1073 : 44 63 10                              JMP	ACNONZ             ;Continue rotating ops to normalize the FPACC
 2347/1076 : 36 56                      ACCSET:    MVI	L, 126o               ;Set pntr to FPACC MSW. Now must provide room for
 2348/1078 : 0E 03                                 MVI	B, 003                ;Sign bit in nonnalized FPACC. Set precision counter.
 2349/107A : 46 89 12                              CALL	ROTATR             ;Rotate the FPACC once to the right now.
 2350/107D : 36 40                      RESIGN:    MVI	L, 100o               ;Set the pointer to SIGN indicator storage location
 2351/107F : C7                                    MOV	A,M                    ;Fetch the original sign of the FPACC
 2352/1080 : A0                                    ANA	A                    ;Set CPU flags
 2353/1081 : 13                                    RP                    ;If original sign of FPACC was positive, can exit now.
 2354/1082 :                            
 2355/1082 : 36 54                      FPCOMP:    MVI	L, 124o               ; However, if original sign was negative, must now restore
 2356/1084 : 0E 03                                 MVI	B, 003                ;The FPACC to negative by performing two's comple-
 2357/1086 : 44 68 12                              JMP	COMPLM             ;Ment on FPACC. Return to caring rtn via COMPLM.
 2358/1089 :                            
 2359/1089 :                                                              ;Floating point ADDITION. Adds contents of FPACC to
 2360/1089 :                                                              ;FPOP and leaves result in FPACC. Routine first checks
 2361/1089 :                                                              ;to see if either register contains zero. If so addition
 2362/1089 :                                                              ;result is already present!
 2363/1089 :                            
 2364/1089 : 36 56                      FPADD:     MVI	L, 126o               ;Set L to point to MSW of FPACC
 2365/108B : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Do same for register H
 2366/108D : C7                                    MOV	A,M                    ;Fetch MSW of FPACC to accumulator
 2367/108E : A0                                    ANA	A                    ;Set CPU flags after loading op
 2368/108F : 48 9D 10                              JNZ	NONZAC             ;If accumulator non-zero then FPACC has some value
 2369/1092 : 36 54                      MOVOP:     MVI	L, 124o               ;But, if accumulator was zero then normalized FPACC
 2370/1094 : DD                                    MOV	D,H                    ;Must also be zero. Thus answer to addition is simply the
 2371/1095 : E6                                    MOV	E,L                    ;Value in FPOP. Set up pointers to transfer contents of
 2372/1096 : 36 5C                                 MVI	L, 134o               ;FPOP to FPACC by pointing to the LSW of both
 2373/1098 : 0E 04                                 MVI	B, 004                ;Registers and perform the transfer. Then exit to calling
 2374/109A : 44 0B 11                              JMP	MOVEIT             ;Routine with answer in FPACC via MOVEIT.
 2375/109D : 36 5E                      NONZAC:    MVI	L, 136o               ;If FPACC was non-zero then check to see if FPOP has
 2376/109F : C7                                    MOV	A,M                    ;Some value by obtaining MSW of FPOP
 2377/10A0 : A0                                    ANA	A                    ;Set CPU flags after loading op. If MSW zero then
 2378/10A1 : 2B                                    RZ                    ;Normalized FPOP must be zero. Answer is in FPACC!
 2379/10A2 :                            
 2380/10A2 :                                                              ;If neither FPACC or FPOP was zero then must perform
 2381/10A2 :                                                              ;addition operation. Must first check to see if two num-
 2382/10A2 :                                                              ;bers are within significant mnge. If not, largest number
 2383/10A2 :                                                              ;is answer. If numbers within range, then must align ex-
 2384/10A2 :                                                              ;ponents before perforrning the addition of the man-
 2385/10A2 :                                                              ;tissa.
 2386/10A2 :                            
 2387/10A2 : 36 57                      CKEQEX:    MVI	L, 127o               ;Set pointer to FPACC Exponent storage location.
 2388/10A4 : C7                                    MOV	A,M                    ;Fetch the Exponent value to the accumulator.
 2389/10A5 : 36 5F                                 MVI	L, 137o               ;Change the pointer to the FPOP Exponent
 2390/10A7 : BF                                    CMP	M                    ;Compare the values of the exponents. If they are the
 2391/10A8 : 68 E1 10                              JZ	SHACOP             ;Same then can immediately proceed to add operations.
 2392/10AB : C8                                    MOV	B,A                    ;If not the same, store FPACC Exponent size in regis B
 2393/10AC : C7                                    MOV	A,M                    ;Fetch the FPOP Exponent size into the ACC
 2394/10AD : 99                                    SBB	B                    ;Subtract the FPACC Exponent from the FPOP Exp.
 2395/10AE : 50 B4 10                              JP	SKPNEG             ;If result is positive jump over the next few instructions
 2396/10B1 : C8                                    MOV	B,A                    ;If result was negative, store the result in B
 2397/10B2 : A8                                    XRA	A                    ;Clear the accumulator
 2398/10B3 : 99                                    SBB	B                    ;Subtract register B to negate the original value
 2399/10B4 : 3C 18                      SKPNEG:    CPI	030o               ;See if difference is less than 24 decimal.
 2400/10B6 : 70 C3 10                              JM	LINEUP             ;If so, can align exponents. Go do it.
 2401/10B9 : C7                                    MOV	A,M                    ;If not, find out which number is largest. Fetch FPOP
 2402/10BA : 36 57                                 MVI	L, 127o               ;Exponent into ACC. Change pointer to FPACC Exp.
 2403/10BC : 97                                    SUB	M                    ;Subtract FPACC from FPOP. If result is negative then
 2404/10BD : 33                                    RM                    ;was larger. Return with answer in FPACC.
 2405/10BE : 36 54                                 MVI	L, 124o               ;If result was positive, larger value in FPOP. Set pointers
 2406/10C0 : 44 92 10                              JMP	MOVOP              ;To transfer FPOP into FPACC and then exit to caller.
 2407/10C3 : C7                         LINEUP:    MOV	A,M                    ;Fetch FPOP Exponent into accumulator.
 2408/10C4 : 36 57                                 MVI	L, 127o               ;Change pointer to FPACC Exponent.
 2409/10C6 : 97                                    SUB	M                    ;Subtract FPACC Exponent from FPOP Exponent. If
 2410/10C7 : 70 D7 10                              JM	SHIFT0             ;Result is negative FPACC is larger. Go shift FPOP.
 2411/10CA : D0                                    MOV	C,A                    ;If result positive FPOP larger, must shift FPACC. Store
 2412/10CB : 36 57                      MORACC:    MVI	L, 127o               ;Difference count in C. Reset pointer to FPACC Exp
 2413/10CD : 46 FC 10                              CALL	SHLOOP             ;Call the SHift LOOP to rotate FPACC mantissa RIGHT
 2414/10D0 : 11                                    DCR	C                    ;And INCREMENT Exponent. Decr difference counter
 2415/10D1 : 48 CB 10                              JNZ	MORACC             ;Continue rotate operations until diff counter is zero
 2416/10D4 : 44 E1 10                              JMP	SHACOP             ;Go do final alignment and perform addition process
 2417/10D7 : D0                         SHIFT0:    MOV	C,A                    ;Routine to shift FPOP. Set difference count into reg. C
 2418/10D8 : 36 5F                      MOROP:     MVI	L, 137o               ;Set pointer to FPOP Exponent.
 2419/10DA : 46 FC 10                              CALL	SHLOOP             ;Call the SHift LOOP to rotate FPOP mantissa RIGHT
 2420/10DD : 10                                    INR	C                    ;And INCREMENT Exponent. Then incr difference cntr
 2421/10DE : 48 D8 10                              JNZ	MOROP              ;Continue rotate opemtions until diff counter is zero
 2422/10E1 :                            ;;; The below two instructions are changed by PATCH NR.1
 2423/10E1 :                            ;;;SHACOP:    LLI 123                ;Set pointer to FPACC LSW minus one to provide extra
 2424/10E1 :                            ;;;           LMI 000                ;Byte for addition ops. Clear that location to zero.
 2425/10E1 : 46 00 18                   SHACOP:	   CALL	PATCH1		; patch 1 inserts a few lines at 30-000
 2426/10E4 : C0                         	   MOV	A,A
 2427/10E5 :                            	
 2428/10E5 :                            ;;;           MVI L, 133
 2429/10E5 :                            ;;;           LMI 000                ;THIS IS PATCH #1
 2430/10E5 : 36 57                                 MVI	L, 127o               ;Change pointer to FPACC Exponent
 2431/10E7 : 46 FC 10                              CALL	SHLOOP             ;Rotate FPACC mantissa RIGHT & Increment Exponent
 2432/10EA : 36 5F                                 MVI	L, 137o               ;Change pointer to FPOP Exponent
 2433/10EC : 46 FC 10                              CALL	SHLOOP             ;Rotate FPOP mantissa RIGHT & Increment Exponent
 2434/10EF : DD                                    MOV	D,H                    ;Rotate ops provide room for overflow. Now set up
 2435/10F0 : 26 53                                 MVI	E, 123o               ;Pointers to LSW minus one for both FPACC & FPOP
 2436/10F2 : 0E 04                                 MVI	B, 004                ;(FPOP already set after SHLOOP). Set precision counter
 2437/10F4 : 46 57 12                              CALL	ADDER              ;Call quad precision ADDITION subroutine.
 2438/10F7 : 0E 00                                 MVI	B, 000                ;Set CPU register B to indicate standard normalization
 2439/10F9 : 44 36 10                              JMP	FPNORM             ;Go normalize the result and exit to caller.
 2440/10FC : CF                         SHLOOP:    MOV	B,M                    ;Shifting loop. First fetch Exponent currently being
 2441/10FD : 08                                    INR	B                    ;Pointed to and Increment the value by one.
 2442/10FE : F9                                    MOV	M,B                    ;Return the updated Exponent value to memory.
 2443/10FF : 31                                    DCR	L                    ;Decrement the pointer to mantissa portion MSW
 2444/1100 : 0E 04                                 MVI	B, 004                ;Set precision counter
 2445/1102 : C7                         FSHIFT:    MOV	A,M                    ;Fetch MSW of mantissa
 2446/1103 : A0                                    ANA	A                    ;Set CPU flags after load ops
 2447/1104 : 50 89 12                              JP	ROTATR             ;If MSB not a one can do normal rotate ops
 2448/1107 : 12                         BRING1:    RAL                    ;If MSB is a one need to set up carrv bit for the negative
 2449/1108 : 44 8A 12                              JMP	ROTR               ;Number case. Then make special entry to ROTATR sub
 2450/110B :                            
 2451/110B :                                                              ;The following subroutine moves the contents of a string
 2452/110B :                                                              ;of memory locations from the address pointed to by
 2453/110B :                                                              ;CPU registers H & L to the address specified by the con-
 2454/110B :                                                              ;tents of registers D & E when the routine is entered. The
 2455/110B :                                                              ;process continues until the counter in register B is zero.
 2456/110B :                            
 2457/110B : C7                         MOVEIT:    MOV	A,M                    ;Fetch a word from memory string A
 2458/110C : 30                                    INR	L                    ;Advance A string pointer
 2459/110D : 46 EE 12                              CALL	SWITCH             ;Switch pointer to string B
 2460/1110 : F8                                    MOV	M,A                    ;Put word from string A into string B
 2461/1111 : 30                                    INR	L                   ;Advance B string pointer
 2462/1112 : 46 EE 12                              CALL	SWITCH             ;Switch pointer back to string A
 2463/1115 : 09                                    DCR	B                    ;Decrement loop counter
 2464/1116 : 2B                                    RZ                    ;Return to calling routine when counter reaches zero
 2465/1117 : 44 0B 11                              JMP	MOVEIT             ;Else continue transfer operations
 2466/111A :                            
 2467/111A :                                                              ;The following subroutine SUBTRACTS the
 2468/111A :                                                              ;contents of the FLOATING POINT ACCUMULATOR from the
 2469/111A :                                                              ;contents of the FLOATING POINT OPERAND and
 2470/111A :                                                              ;leaves the result in the FPACC. The routine merely
 2471/111A :                                                              ;negates the value in the FPACC and then goes to the
 2472/111A :                                                              ;FPADD subroutine just presented.
 2473/111A :                            
 2474/111A : 36 54                      FPSUB:     MVI	L, 124o               ;Set L to address of LSW of FPACC
 2475/111C : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of FPACC
 2476/111E : 0E 03                                 MVI	B, 003                ;Set precision counter
 2477/1120 : 46 68 12                              CALL	COMPLM             ;Two's complement the value in the FPACC
 2478/1123 : 44 89 10                              JMP	FPADD              ;Now go add the negated value to perform subtraction!
 2479/1126 :                            
 2480/1126 :                                                              ;The first part of the FLOATING POINT MULTIPLI-
 2481/1126 :                                                              ;CATION subroutine calls a subroutine to check the
 2482/1126 :                                                              ;original signs of the numbers that are to be multi-
 2483/1126 :                                                              ;plied and perform working register clearing functions.
 2484/1126 :                                                              ;Next the exponents of the numbers to be multiplied
 2485/1126 :                                                              ;are added together.
 2486/1126 :                            
 2487/1126 : 46 76 11                   FPMULT:    CALL	CKSIGN             ;Call routine to set up registers & ck signs of numbers
 2488/1129 : 36 5F                      ADDEXP:    MVI	L, 137o               ;Set pointer to FPOP Exponent
 2489/112B : C7                                    MOV	A,M                    ;Fetch FPOP Exponent into the accumulator
 2490/112C : 36 57                                 MVI	L, 127o               ;Change pointer to FPACC Exponent
 2491/112E : 87                                    ADD	M                    ;Add FPACC Exponent to FPOP Exponent
 2492/112F : 04 01                                 ADI	001                ;Add one more to total for algorithm compensation
 2493/1131 : F8                                    MOV	M,A                    ;Store result in FPACC Exponent location
 2494/1132 : 36 42                      SETMCT:    MVI	L, 102o               ;Change pointer to bit counter storage location
 2495/1134 : 3E 17                                 MVI	M, 027o               ;Initialize bit counter to 23 decimal
 2496/1136 :                            
 2497/1136 :                                                              ;Next portion of the FPMULT routine is the iinplernen-
 2498/1136 :                                                              ;tation of the algorithm illustrated in the flow chart
 2499/1136 :                                                              ;above. This portion multiplies the values of the two
 2500/1136 :                                                              ;mantissas. The final value is rounded off to leave the
 2501/1136 :                                                              ;23 most significant bits as the answer that is stored
 2502/1136 :                                                              ;back in the FPACC.
 2503/1136 :                            
 2504/1136 : 36 56                      MULTIP:    MVI	L, 126o                ;Set pointer to MSW of FPACC mantissa
 2505/1138 : 0E 03                                 MVI	B, 003                ;Set precision counter
 2506/113A : 46 89 12                              CALL	ROTATR             ;Rotate FPACC (multiplier) RIGHT into carry bit
 2507/113D : 62 B8 11                              CC	ADOPPP             ;If carry is a one, add multiplicand to partial-product
 2508/1140 : 36 66                                 MVI	L, 146o                ;Set pointer to partial-product most significant byte
 2509/1142 : 0E 06                                 MVI	B, 006                ;Set precision counter (p-p register is double length)
 2510/1144 : 46 89 12                              CALL	ROTATR             ;Shift partial-product RIGHT
 2511/1147 : 36 42                                 MVI	L, 102o                ;Set pointer to bit counter storage location
 2512/1149 : D7                                    MOV	C,M                    ;Fetch current value of bit counter
 2513/114A : 11                                    DCR	C                    ;Decrement the value of the bit counter
 2514/114B : FA                                    MOV	M,C                    ;Restore the updated bit counter to its storage location
 2515/114C : 48 36 11                              JNZ	MULTIP             ;If have not multiplied for 23 (deciinal) bits, keep going
 2516/114F : 36 66                                 MVI	L, 146o                ;If have done 23 (decimal) bits, set pntr to p-p MSW
 2517/1151 : 0E 06                                 MVI	B, 006                ;Set precision counter (for double length)
 2518/1153 : 46 89 12                              CALL	ROTATR             ;Shift partial-product once more to the RIGHT
 2519/1156 : 36 63                                 MVI	L, 143o                ;Set pointer to access 24'th bit in partial-product
 2520/1158 : C7                                    MOV	A,M                    ;Fetch the byte containing the 24'th bit
 2521/1159 : 12                                    RAL                    ;Position the 24'th bit to be MSB in the accumulator
 2522/115A : A0                                    ANA	A                    ;Set the CPU flags after to rotate operation and test to
 2523/115B : 72 C2 11                              CM	MROUND             ;See if 24'th bit of p-p is a ONE. If so, must round-off
 2524/115E : 36 53                                 MVI	L, 123o                ;Now set up pointers
 2525/1160 : E6                                    MOV	E,L                    ;To perform transfer
 2526/1161 : DD                                    MOV	D,H                    ;Of the multiplication results
 2527/1162 : 36 63                                 MVI	L, 143o                ;From the partial-product location
 2528/1164 : 0E 04                                 MVI	B, 004                ;To the FPACC
 2529/1166 :                            
 2530/1166 :                            	
 2531/1166 : 46 0B 11                   EXMLDV:    CALL	MOVEIT             ;Perform the transfer from p-p to FPACC
 2532/1169 : 0E 00                                 MVI	B, 000                ;Set up CPU register B to indicate regular normalization
 2533/116B : 46 36 10                              CALL	FPNORM             ;Normalize the result of multiplication
 2534/116E : 36 41                                 MVI	L, 101o               ;Now set the pointer to the original SIGNS indicator
 2535/1170 : C7                                    MOV	A,M                    ;Fetch the indicator
 2536/1171 : A0                                    ANA	A                    ;Exercise the CPU flags
 2537/1172 : 0B                                    RNZ                    ;If indicator is non-zero, answer is positive, can exit her
 2538/1173 : 44 82 10                              JMP	FPCOMP             ;If not, answer must be negated, exit via 2's complement.
 2539/1176 :                            
 2540/1176 :                                                              ;The following portions of the FPMULT
 2541/1176 :                                                              ;routine set up working locations in memory by clearing
 2542/1176 :                                                              ;locations for an expanded FPOP area and the partial-produc
 2543/1176 :                                                              ;area. Next, the signs of the two numbers to be multiplied
 2544/1176 :                                                              ;are examined. Negative numbers are negated
 2545/1176 :                                                              ;in preparation for the multiplication
 2546/1176 :                                                              ;algorithm. A SIGNS indicator register is set up during
 2547/1176 :                                                              ;this process to indicate whether the final result of the
 2548/1176 :                                                              ;multiplication should be positive or negative. (Negative
 2549/1176 :                                                              ;if original signs of the two numbers to be multiplied are
 2550/1176 :                                                              ;different.)
 2551/1176 :                            
 2552/1176 : 36 60                      CKSIGN:    MVI	L, 140o               ;Set pointer to start of partial-product working area
 2553/1178 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to proper page
 2554/117A : 0E 08                                 MVI	B, 010o               ;Set up a loop counter in CPU register B
 2555/117C : A8                                    XRA	A                    ;Clear the accumulator
 2556/117D :                            
 2557/117D : F8                         CLRNEX:    MOV	M,A                    ;Now clear out locations for the partial-product
 2558/117E : 30                                    INR	L                    ;Working registers
 2559/117F : 09                                    DCR	B                    ;Until the loop counter
 2560/1180 : 48 7D 11                              JNZ	CLRNEX             ;Is zero
 2561/1183 : 0E 04                      CLROPL:    MVI	B, 004                ;Set a loop counter
 2562/1185 : 36 58                                 MVI	L, 130o               ;Set up pointer
 2563/1187 : F8                         CLRNX1:    MOV	M,A                    ;Clear out some extra registers so that the
 2564/1188 : 30                                    INR	L                    ;FPOP may be extended in length
 2565/1189 : 09                                    DCR	B                    ;Perform clearing ops until loop counter
 2566/118A : 48 87 11                              JNZ	CLRNX1             ;Is zero
 2567/118D : 36 41                                 MVI	L, 101o               ;Set pointer to M/D SIGNS indicator storage location
 2568/118F : 3E 01                                 MVI	M, 001                ;Set initial value of SIGNS indicator to plus one
 2569/1191 : 36 56                                 MVI	L, 126o               ;Change pointer to MSW of FPACC
 2570/1193 : C7                                    MOV	A,M                    ;Fetch MSW of mantissa into accumulator
 2571/1194 : A0                                    ANA	A                    ;Test flags
 2572/1195 : 70 A9 11                              JM	NEGFPA             ;If MSB in MSW of FPACC is a one, number is negative
 2573/1198 : 36 5E                      OPSGNT:    MVI	L, 136o               ;Set pointer to MSW of FPOP
 2574/119A : C7                                    MOV	A,M                    ;Fetch MSW of mantissa into accumulator
 2575/119B : A0                                    ANA	A                    ;Test flags
 2576/119C : 13                                    RP                    ;Return to caller if number in FPOP is positive
 2577/119D : 36 41                                 MVI	L, 101o               ;Else change pointer to M/D SIGNS indicator
 2578/119F : D7                                    MOV	C,M                    ;Fetch the value in the SIGNS indicator
 2579/11A0 : 11                                    DCR	C                    ;Decrement the value by one
 2580/11A1 : FA                                    MOV	M,C                    ;Restore the new value back to storage location
 2581/11A2 : 36 5C                                 MVI	L, 134o               ;Set pointer to LSW of FPOP
 2582/11A4 : 0E 03                                 MVI	B, 003                ;Set precision counter
 2583/11A6 : 44 68 12                              JMP	COMPLM             ;Two's complement value of FPOP & return to caller
 2584/11A9 : 36 41                      NEGFPA:    MVI	L, 101o               ;Set pointer to M/D SIGNS indicator
 2585/11AB : D7                                    MOV	C,M                    ;Fetch the value in the SIGNS indicator
 2586/11AC : 11                                    DCR	C                    ;Decrement the value by one
 2587/11AD : FA                                    MOV	M,C                    ;Restore the new value back to storage location
 2588/11AE : 36 54                                 MVI	L, 124o               ;Set pointer to LSW of FPACC
 2589/11B0 : 0E 03                                 MVI	B, 003                ;Set precision counter
 2590/11B2 : 46 68 12                              CALL	COMPLM             ;Two's complement value of FPACC
 2591/11B5 : 44 98 11                              JMP	OPSGNT             ;Proceed to check sign of FPOP
 2592/11B8 :                            
 2593/11B8 :                                                              ;The following subroutine adds the double length (six regis
 2594/11B8 :                                                              ;multiplicand in FPOP to the partial-product register when
 2595/11B8 :                                                              ;called on by the multiplication algorithm.
 2596/11B8 :                            
 2597/11B8 : 26 61                      ADOPPP:    MVI	E, 141o               ;Pointer to LSW of partial-product
 2598/11BA : DD                                    MOV	D,H                    ;On same page as FPOP
 2599/11BB : 36 59                                 MVI	L, 131o               ;LSIV of FPOP which contains extended multiplicand
 2600/11BD : 0E 06                                 MVI	B, 006                ;Set precision counter (double length working registers)
 2601/11BF : 44 57 12                              JMP	ADDER              ;Add multiplicand to partial-product & return to caller
 2602/11C2 :                            
 2603/11C2 : 0E 03                      MROUND:    MVI	B, 003                ;Set up precision counter
 2604/11C4 : 06 40                                 MVI	A, 100o               ;Prepare to add one to 24'th bit of partial-product
 2605/11C6 : 87                                    ADD	M                    ;Add one to the 24'th bit of the partial-product
 2606/11C7 : F8                         CROUND:    MOV	M,A                    ;Restore the updated byte to memory
 2607/11C8 : 30                                    INR	L                    ;Advance the memory pointer to next most significant
 2608/11C9 : 06 00                                 MVI	A, 000                ;Byte of partial-product, then clear ACC without
 2609/11CB : 8F                                    ADC	M                    ;Disturbing carry bit. Now perform add with carry to
 2610/11CC : 09                                    DCR	B                    ;Propagate any rounding in the partial-product registers.
 2611/11CD : 48 C7 11                              JNZ	CROUND             ;If cotinter is not zero continue propagating any carry
 2612/11D0 : F8                                    MOV	M,A                    ;Restore final byte to memory
 2613/11D1 : 07                                    RET                    ;Exit to CALLling routine
 2614/11D2 :                            
 2615/11D2 : 46 76 11                   FPDIV:     CALL	CKSIGN             ;Call routine to set up registers & ck signs of numbers
 2616/11D5 : 36 56                                 MVI	L, 126o               ;Set pointer to MSW of FPACC (divisor)
 2617/11D7 : C7                                    MOV	A,M                    ;Fetch MSW of FPACC to accumulator
 2618/11D8 : A0                                    ANA	A                    ;Exercise CPU flags
 2619/11D9 : 68 EF 0A                              JZ	DVERR              ;If MSW of FPACC is zero go display 'DZ' error message
 2620/11DC : 36 5F                      SUBEXP:    MVI	L, 137o               ;Set pointer to FPOP (dividend) Exponent
 2621/11DE : C7                                    MOV	A,M                    ;Get FPOP Exponent into accumulator
 2622/11DF : 36 57                                 MVI	L, 127o               ;Change pointer to FPACC (divisor) Exponent
 2623/11E1 : 97                                    SUB	M                    ;Subtract divisor exponent from dividend exponent
 2624/11E2 : 04 01                                 ADI	001                ;Add one for algorithm compensation
 2625/11E4 : F8                                    MOV	M,A                    ;Place result in FPACC Exponent
 2626/11E5 : 36 42                      SETDCT:    MVI	L, 102o               ;Set pointer to bit counter storage location
 2627/11E7 : 3E 17                                 MVI	M, 027o               ;Initialize bit counter to 23 decimal
 2628/11E9 :                            
 2629/11E9 :                                                              ;Main division algorithm for mantissas
 2630/11E9 :                            
 2631/11E9 : 46 41 12                   DIVIDE:    CALL	SETSUB             ;Go subtmct divisor from dividend
 2632/11EC : 70 FE 11                              JM	NOGO               ;If result is negative then place a zero bit in quotient
 2633/11EF : 26 5C                                 MVI	E, 134o               ;If result zero or positive then move remainder after
 2634/11F1 : 36 59                                 MVI	L, 131o               ;Subtraction from working area to become new dividend
 2635/11F3 : 0E 03                                 MVI	B, 003                ;Set up moving pointers and initialize precision counter
 2636/11F5 : 46 0B 11                              CALL	MOVEIT             ;Perform the transfer
 2637/11F8 : 06 01                                 MVI	A, 001                ;Place a one into least significant bit of accumulator
 2638/11FA : 1A                                    RAR                    ;And rotate it out into the carry bit
 2639/11FB : 44 FF 11                              JMP	QUOROT             ;Proceed to rotate the carry bit into the current quotient
 2640/11FE : A8                         NOGO:      XRA	A                    ;When result is negative, put a zero in the carry bit, then
 2641/11FF : 36 64                      QUOROT:    MVI	L, 144o               ;Set up pointer to LSW of quotient register
 2642/1201 : 0E 03                                 MVI	B, 003                ;Set precision counter
 2643/1203 : 46 80 12                              CALL	ROTL               ;Rotate carry bit into quotient by using special entry to
 2644/1206 : 36 5C                                 MVI	L, 134o               ;ROTATL subroutine. Now set up pointer to dividend
 2645/1208 : 0E 03                                 MVI	B, 003                ;LSW and set precision counter
 2646/120A : 46 7F 12                              CALL	ROTATL             ;Rotate the current dividend to the left
 2647/120D : 36 42                                 MVI	L, 102o               ;Set pointer to bit counter storage location
 2648/120F : D7                                    MOV	C,M                    ;Fetch the value of the bit counter
 2649/1210 : 11                                    DCR	C                    ;Decrement the value by one
 2650/1211 : FA                                    MOV	M,C                    ;Restore the new counter value to storage
 2651/1212 : 48 E9 11                              JNZ	DIVIDE             ;If bit counter is not zero, continue division process
 2652/1215 : 46 41 12                              CALL	SETSUB             ;After 23 (decimal) bits, do subtraction once more for
 2653/1218 : 70 38 12                              JM	DVEXIT             ;Possible rounding. Jump ahead if no rounding required.
 2654/121B : 36 64                                 MVI	L, 144o               ;If rounding required set pointer to LSW of quotient
 2655/121D : C7                                    MOV	A,M                    ;Fetch LSW of quotient to accumulator
 2656/121E : 04 01                                 ADI	001                ;Add one to 23rd bit of quotient
 2657/1220 : F8                                    MOV	M,A                    ;Restore updated LSW of quotient
 2658/1221 : 06 00                                 MVI	A, 000                ;Clear accumulator without disturbing carry bit
 2659/1223 : 30                                    INR	L                    ;Advance pointer to next significant byte of quotient
 2660/1224 : 8F                                    ADC	M                    ;Propagate any carry as part of rounding process
 2661/1225 : F8                                    MOV	M,A                    ;Restore the updated byte of quotient
 2662/1226 : 06 00                                 MVI	A, 000                ;Clear ACC again without disturbing carry bit
 2663/1228 : 30                                    INR	L                    ;Advance pointer to MSW of quotient
 2664/1229 : 8F                                    ADC	M                    ;Propagate any carry to finish rounding process
 2665/122A : F8                                    MOV	M,A                    ;Restore the updated byte of quotient
 2666/122B : 50 38 12                              JP	DVEXIT             ;If most significant bit of quotient is zero, go finish up
 2667/122E : 0E 03                                 MVI	B, 003                ;If not, set precision counter
 2668/1230 : 46 89 12                              CALL	ROTATR             ;And rotate quotient to the right to clear the sign bit
 2669/1233 : 36 57                                 MVI	L, 127o               ;Set pointer to FPACC Exponent
 2670/1235 : CF                                    MOV	B,M                    ;Fetch FPACC exponent
 2671/1236 : 08                                    INR	B                    ;Increment the value to compensate for the rotate right
 2672/1237 : F9                                    MOV	M,B                    ;Restore the updated exponent value
 2673/1238 : 36 63                      DVEXIT:    MVI	L, 143o               ;Set up pointers
 2674/123A : 26 53                                 MVI	E, 123o               ;To transfer the quotient into the FPACC
 2675/123C : 0E 04                                 MVI	B, 004                ;Set precision counter
 2676/123E :                                                              ;THIS IS A CORRECTION FOUND IN THE NOTES
 2677/123E : 44 66 11                              JMP	EXMLDV             ;And exit through FPMULT routine at EXMLDV
 2678/1241 :                            
 2679/1241 :                                                              ;Subroutine to subtract divisor from dividend. Used by
 2680/1241 :                                                              ;main DIVIDE subroutine.
 2681/1241 :                            
 2682/1241 : 26 59                      SETSUB:    MVI	E, 131o               ;Set pointer to LSW of working area
 2683/1243 : DD                                    MOV	D,H                    ;On same page as FPACC
 2684/1244 : 36 54                                 MVI	L, 124o               ;Set pointer to LSW of FPACC (divisor)
 2685/1246 : 0E 03                                 MVI	B, 003                ;Set precision counter
 2686/1248 : 46 0B 11                              CALL	MOVEIT             ;Perform transfer
 2687/124B : 26 59                                 MVI	E, 131o               ;Reset pointer to LSW of working area (now divisor)
 2688/124D : 36 5C                                 MVI	L, 134o               ;Reset pointer to LSW of FPOP (dividend)
 2689/124F : 0E 03                                 MVI	B, 003                ;Set precision counter
 2690/1251 : 46 93 12                              CALL	SUBBER             ;Subtract divisor from dividend
 2691/1254 : C7                                    MOV	A,M                    ;Get MSW of the result of the subtraction operations
 2692/1255 : A0                                    ANA	A                    ;Exercise CPU flags
 2693/1256 : 07                                    RET                    ;Return to caller with status
 2694/1257 : A0                         ADDER:     ANA	A                    ;Initialize the carry bit to zero upon entry
 2695/1258 : C7                         ADDMOR:    MOV	A,M                    ;Fetch byte from register group A
 2696/1259 : 46 EE 12                              CALL	SWITCH             ;Switch memory pointer to register group B
 2697/125C : 8F                                    ADC	M                    ;Add byte from A to byte from B with carry
 2698/125D : F8                                    MOV	M,A                    ;Leave result in register group B
 2699/125E : 09                                    DCR	B                    ;Decrement number of bytes (precision) counter
 2700/125F : 2B                                    RZ                    ;Return to caller when all bytes in group processed
 2701/1260 : 30                                    INR	L                    ;Else advance pointer for register group B
 2702/1261 : 46 EE 12                              CALL	SWITCH             ;Switch memory pointer back to register group A
 2703/1264 : 30                                    INR	L                    ;Advance the pointer for register group A
 2704/1265 : 44 58 12                              JMP	ADDMOR             ;Continue the multi-byte addition operation
 2705/1268 :                            
 2706/1268 :                                                              ;N'th precision two's complement (negate)
 2707/1268 :                                                              ;subroutine. Performs a two's complement on the multi-byte
 2708/1268 :                                                              ;registers tarting at the address pointed
 2709/1268 :                                                              ; to by H & L (least significant byte) upon entry.
 2710/1268 :                            
 2711/1268 : C7                         COMPLM:    MOV	A,M                    ;Fetch the least significant byte of the number to ACC
 2712/1269 : 2C FF                                 XRI	377o               ;Exclusive OR to complement the byte
 2713/126B : 04 01                                 ADI	001                ;Add one to form two's complement of byte
 2714/126D : F8                         MORCOM:    MOV	M,A                    ;Restore the negated byte to memory
 2715/126E : 1A                                    RAR                   ;Save the carry bit
 2716/126F : D8                                    MOV	D,A                    ;In CPU register D
 2717/1270 : 09                                    DCR	B                    ;Decrement number of bytes (precision) counter
 2718/1271 : 2B                                    RZ                    ;Return to caller when all bytes in number processed
 2719/1272 : 30                                    INR	L                    ;Else advance the pointer
 2720/1273 : C7                                    MOV	A,M                    ;Fetch the next byte of the number to ACC
 2721/1274 : 2C FF                                 XRI	377o               ;Exclusive OR to complement the byte
 2722/1276 : E0                                    MOV	E,A                    ;Save complemented value in register E temporarily
 2723/1277 : C3                                    MOV	A,D                    ;Restore previous carry status to ACC
 2724/1278 : 12                                    RAL                    ;And rotate it out to the carry bit
 2725/1279 : 06 00                                 MVI	A, 000                ;Clear ACC without disturbing carry status
 2726/127B : 8C                                    ADC	E                    ;Add in any carry to complemented value
 2727/127C : 44 6D 12                              JMP	MORCOM             ;Continue the two's complement procedure as req'd
 2728/127F :                            
 2729/127F :                                                              ;N'th precision rotate left subroutine. Rotates a multi-
 2730/127F :                                                              ;byte number left starting at the address initially
 2731/127F :                                                              ;specified by the contents of CPU registers H & L upon
 2732/127F :                                                              ;subroutine entry (LSW). First entry point will clear
 2733/127F :                                                              ;the carry bit before beginning rotate operations. Second
 2734/127F :                                                              ;entry point does not clear the carry bit.
 2735/127F :                            
 2736/127F : A0                         ROTATL:    ANA	A                    ;Clear the carry bit at this entry point
 2737/1280 : C7                         ROTL:      MOV	A,M                    ;Fetch a byte from memory
 2738/1281 : 12                                    RAL                    ;Rotate it left (bring carry into LSB, push MSB to carry)
 2739/1282 : F8                                    MOV	M,A                    ;Restore rotated word to memory
 2740/1283 : 09                                    DCR	B                    ;Decrement precision counter
 2741/1284 : 2B                                    RZ                    ;Exit to caller when finished
 2742/1285 : 30                                    INR	L                    ;Else advance pointer to next byte
 2743/1286 : 44 80 12                              JMP	ROTL               ;Continue rotate left operations
 2744/1289 :                            
 2745/1289 :                            
 2746/1289 :                                                              ;N'th precision rotate
 2747/1289 :                                                              ;right subroutine. Opposite of
 2748/1289 :                                                              ;above subroutine.
 2749/1289 :                            
 2750/1289 : A0                         ROTATR:    ANA	A                    ;Clear the carry bit at this entry point
 2751/128A : C7                         ROTR:      MOV	A,M                    ;Fetch a byte from memory
 2752/128B : 1A                                    RAR                    ;Rotate it right (carry into MSB, LSB to carry)
 2753/128C : F8                                    MOV	M,A                    ;Restore rotated word to memory
 2754/128D : 09                                    DCR	B                    ;Decrement precision counter
 2755/128E : 2B                                    RZ                    ;Exit to caller when finished
 2756/128F : 31                                    DCR	L                    ;Else decrement pointer to next byte
 2757/1290 : 44 8A 12                              JMP	ROTR               ;Continue rotate right operations
 2758/1293 :                            
 2759/1293 :                                                              ;N'th precision subtraction subroutine.
 2760/1293 :                                                              ;Number starting at location pointed to by D & E (least
 2761/1293 :                                                              ;significant byte) is subtracted from number starting at
 2762/1293 :                                                              ;address specified by contents of H & L.
 2763/1293 :                            
 2764/1293 : A0                         SUBBER:    ANA	A                    ;Initialize the carry bit to zero upon entry
 2765/1294 : C7                         SUBTRA:    MOV	A,M                    ;Fetch byte from register group A
 2766/1295 : 46 EE 12                              CALL	SWITCH             ;Switch memory pointer to register group B
 2767/1298 : 9F                                    SBB	M                    ;Subtract byte from group B ftom that in group A
 2768/1299 : F8                                    MOV	M,A                    ;Leave result in register group B
 2769/129A : 09                                    DCR	B                    ;Decrement number of bytes (precision) counter
 2770/129B : 2B                                    RZ                    ;Return to caller when all bytes in group processed
 2771/129C : 30                                    INR	L                    ;Else advance pointer for register group B
 2772/129D : 46 EE 12                              CALL	SWITCH             ;Switch memory pointer back to register group A
 2773/12A0 : 30                                    INR	L                    ;Advance the pointer for register group A
 2774/12A1 : 44 94 12                              JMP	SUBTRA             ;Continue the multi-byte subtraction operation
 2775/12A4 :                            
 2776/12A4 :                                                              ;The next subroutine will transfer the four byte
 2777/12A4 :                                                              ;register string (generally a number in floating point
 2778/12A4 :                                                              ;format) from the starting address pointed to by CPU
 2779/12A4 :                                                              ;registers H & L when the subroutine is entered to
 2780/12A4 :                                                              ;the FPACC (floating point accumulator registers).
 2781/12A4 :                            
 2782/12A4 : 1E 01                      FLOAD:     MVI	D,PG01 ;\HB\OLDPG1    ;** Set page address of FPACC
 2783/12A6 : 26 54                                 MVI	E, 124o               ;Set address of least signficant byte of FPACC
 2784/12A8 : 0E 04                                 MVI	B, 004                ;Set precision counter to four bytes (mantissa bytes
 2785/12AA : 44 0B 11                              JMP	MOVEIT             ;Plus Exponent) and exit via the transfer routine
 2786/12AD :                            
 2787/12AD :                                                              ;The next several subroutines are used to perform
 2788/12AD :                                                              ;floating pojnt register loading and transfer operations.
 2789/12AD :                            
 2790/12AD : E6                         FSTORE:    MOV	E,L                    ;Transfer contents of register L to E
 2791/12AE : DD                                    MOV	D,H                    ;Transfer contents of register H to D
 2792/12AF : 36 54                                 MVI	L, 124o               ;Set L to least significant byte of FPACC mantissa
 2793/12B1 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set page to FPACC storage area
 2794/12B3 : 44 BA 12                              JMP	SETIT              ;Go transfer FPACC contents to area pointed to by D&E
 2795/12B6 : 1E 01                      OPLOAD:    MVI	D,PG01 ;\HB\OLDPG1    ;** Set page to FPOP storage area
 2796/12B8 : 26 5C                                 MVI	E, 134o               ;Set pointer to least significant byte of FPOP
 2797/12BA : 0E 04                      SETIT:     MVI	B, 004                ;Set precision counter. Transfer from H & L area to
 2798/12BC : 44 0B 11                              JMP	MOVEIT             ;Locations pointed to by D & E
 2799/12BF :                            
 2800/12BF :                                                              ;The next subroutine perforins a double transfer opera-
 2801/12BF :                                                              ;tion. It first transfers the contents of the FPACC into
 2802/12BF :                                                              ;the FPOP. It then transfers new data (as pointed to by
 2803/12BF :                                                              ;H & L upon entry to the subroutine) into the FPACC.
 2804/12BF :                            
 2805/12BF : 46 CF 12                   FACXOP:    CALL	SAVEHL             ;Save contents of H & L upon entry to subroutine
 2806/12C2 : 36 54                                 MVI	L, 124o               ;Set pointer to FPACC LSW
 2807/12C4 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set pointer to page of FPACC
 2808/12C6 : 46 B6 12                              CALL	OPLOAD             ;Transfer FPACC to FPOP
 2809/12C9 : 46 DF 12                              CALL	RESTHL             ;Recover original subroutine entry values for H & L
 2810/12CC : 44 A4 12                              JMP	FLOAD              ;Transfer registers pointed to by H & L into the FPACC
 2811/12CF :                            
 2812/12CF :                                                              ;Subroutine to save the contents of CPU registers D, E, H
 2813/12CF :                                                              ;and L in a temporary storage area in memory.
 2814/12CF :                            
 2815/12CF : C5                         SAVEHL:    MOV	A,H                    ;Transfer value in H to ACC
 2816/12D0 : CE                                    MOV	B,L                    ;And value in L to B
 2817/12D1 : 36 80                                 MVI	L, 200o               ;Now set L to start of tempomry storage locations
 2818/12D3 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** And set H to storage area page
 2819/12D5 : F8                                    MOV	M,A                    ;Save A (entry value of H) in memory
 2820/12D6 : 30                                    INR	L                    ;Advance pointer
 2821/12D7 : F9                                    MOV	M,B                    ;Save B (entry value of L) in memory
 2822/12D8 : 30                                    INR	L                    ;Advance pointer
 2823/12D9 : FB                                    MOV	M,D                    ;Save D in memory
 2824/12DA : 30                                    INR	L                    ;Advance pointer
 2825/12DB : FC                                    MOV	M,E                    ;Save E in memory
 2826/12DC : E8                                    MOV	H,A                    ;Restore entry value of H
 2827/12DD : F1                                    MOV	L,B                    ;Restore entry value of L
 2828/12DE : 07                                    RET                    ;Exit to calling routine
 2829/12DF :                            
 2830/12DF :                                                              ;Subroutine to restore the contents of CPU registers D,
 2831/12DF :                                                              ;E, H and L from temporary storage in memory.
 2832/12DF :                            
 2833/12DF : 36 80                      RESTHL:    MVI	L, 200o               ;Set L to start of temporary storage locations
 2834/12E1 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to storage area page
 2835/12E3 : C7                                    MOV	A,M                    ;Fetch stored value for li iii ACC
 2836/12E4 : 30                                    INR	L                    ;Advance pointer
 2837/12E5 : CF                                    MOV	B,M                    ;Fetch stored value for L into B
 2838/12E6 : 30                                    INR	L                    ;Advance pointer
 2839/12E7 : DF                                    MOV	D,M                    ;Fetch stored value for T.)
 2840/12E8 : 30                                    INR	L                    ;Advance pointer
 2841/12E9 : E7                                    MOV	E,M                    ;Fetch stored value for
 2842/12EA : E8                                    MOV	H,A                    ;Restore  saved value for H
 2843/12EB : F1                                    MOV	L,B                    ;Restore saved value for L
 2844/12EC : C7                                    MOV	A,M                    ;Leave stored value for E in ACC
 2845/12ED : 07                                    RET                    ;Exit to calling routine
 2846/12EE :                            
 2847/12EE :                                                              ;Subroutine to exchange the contents of H & L with
 2848/12EE :                                                              ;D & E.
 2849/12EE :                            
 2850/12EE : D5                         SWITCH:    MOV	C,H                    ;Transfer register H to C temporarily
 2851/12EF : EB                                    MOV	H,D                    ;Place value of D into H
 2852/12F0 : DA                                    MOV	D,C                    ;Now put former H from C into D
 2853/12F1 : D6                                    MOV	C,L                    ;Transfer register L to C temporarily
 2854/12F2 : F4                                    MOV	L,E                    ;Place value of E into L
 2855/12F3 : E2                                    MOV	E,C                    ;Now put former L from C into E
 2856/12F4 : 07                                    RET                    ;Exit to calling routine
 2857/12F5 : 2E 01                      GETINP:    MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of GETINP character counter
 2858/12F7 : 36 90                                 MVI	L, 220o               ;Set L to address of GETINP character counter
 2859/12F9 : D7                                    MOV	C,M                    ;Load counter value into CPU register C
 2860/12FA : 10                                    INR	C                    ;Exercise the counter in order
 2861/12FB : 11                                    DCR	C                    ;To set CPU flags. If counter is non-zero, then indexing
 2862/12FC : 48 08 13                              JNZ	NOT0               ;Register (GETINP counter) is all set so jump ahead.
 2863/12FF : F4                                    MOV	L,E                    ;But, if counter zero, then starting to process a new
 2864/1300 : EB                                    MOV	H,D                    ;Character string. Transfer char string buffer pointer into
 2865/1301 : D7                                    MOV	C,M                    ;H & L and fetch the string's character count value (cc)
 2866/1302 : 10                                    INR	C                    ;Increment the (cc) by one to take account of (cc) byte
 2867/1303 : 46 1E 13                              CALL	INDEXC             ;Add contents of regis C to H & L to point to end of the
 2868/1306 : 3E 00                                 MVI	M, 000                ;Character string in buffer and place a zero byte marker
 2869/1308 : 36 90                      NOT0:      MVI	L, 220o               ;Set L back to address of GETINP counter which is used
 2870/130A : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** As an indexing value. Set H to correct page.
 2871/130C : D7                                    MOV	C,M                    ;Fetch the value of GETINP counter into register C
 2872/130D : 10                                    INR	C                    ;Increment the value in C
 2873/130E : FA                                    MOV	M,C                    ;Restore the updated value for future use
 2874/130F : F4                                    MOV	L,E                    ;Bring the base address of the character string buffer into
 2875/1310 : EB                                    MOV	H,D                    ;CPU registers H & L
 2876/1311 : 46 1E 13                              CALL	INDEXC             ;Add contents of register C to form indexed address of
 2877/1314 : C7                                    MOV	A,M                    ;Next character to be fetched as input. Fetch the next
 2878/1315 : A0                                    ANA	A                    ;Character. Exercise the CPU flags.
 2879/1316 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Restore page pointer to floating point working area
 2880/1318 : 0B                                    RNZ                    ;If character is non-zero, not end of string, exit to calle
 2881/1319 : 36 90                                 MVI	L, 220o               ;If zero character, must reset GETINP counter for next
 2882/131B : 3E 00                                 MVI	M, 000                ;String. Reset pointer and clear GETINP counter to zero
 2883/131D : 07                                    RET                    ;Then exit to calling routine
 2884/131E :                            
 2885/131E :                                                              ;Following subroutine causes register C to be used as an
 2886/131E :                                                              ;indexing register. Value in C is added to address in H
 2887/131E :                                                              ;and L to form new address.
 2888/131E :                            
 2889/131E : C6                         INDEXC:    MOV	A,L                    ;Place value from register L into accumulator
 2890/131F : 82                                    ADD	C                    ;Add quantity in register C
 2891/1320 : F0                                    MOV	L,A                    ;Restore updated value back to L
 2892/1321 : 03                                    RNC                    ;Exit to caller if no carry from addition
 2893/1322 : 28                                    INR	H                    ;But, if have carry then must increment register H
 2894/1323 : 07                                    RET                    ;Before returning to calling routine
 2895/1324 :                            
 2896/1324 :                                                              ;Main Decimal INPUT subroutine to convert strings of
 2897/1324 :                                                              ;ASCII characters representing decimal fixed or floating
 2898/1324 :                                                              ;point numbers to binary floating point numbers.
 2899/1324 :                            
 2900/1324 : E6                         DINPUT:    MOV	E,L                    ;Save entry value of register L in E. (Pointer to buffer
 2901/1325 : DD                                    MOV	D,H                    ;Containing ASCII character string.) Do same for H to D.
 2902/1326 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of floating point working registers
 2903/1328 : 36 68                                 MVI	L, 150o               ;Set L to start of decirnal-to-binary working area
 2904/132A : A8                                    XRA	A                    ;Clear the accumulator
 2905/132B : 0E 08                                 MVI	B, 010o               ;Set up a loop counter
 2906/132D : F8                         CLRNX2:    MOV	M,A                    ;Deposit zero in working area to initialize
 2907/132E : 30                                    INR	L                    ;Advance the memory pointer
 2908/132F : 09                                    DCR	B                    ;Decrement the loop counter
 2909/1330 : 48 2D 13                              JNZ	CLRNX2             ;Clear working area until loop counter is zero
 2910/1333 : 36 43                                 MVI	L, 103o               ;Set pointer to floating point temporary registers and
 2911/1335 : 0E 04                                 MVI	B, 004                ;Indicators working area. Set up a loop counter.
 2912/1337 : F8                         CLRNX3:    MOV	M,A                    ;Deposit zero in working area to initialize
 2913/1338 : 30                                    INR	L                    ;Advance the memory pointer
 2914/1339 : 09                                    DCR	B                    ;Decrement the loop counter
 2915/133A : 48 37 13                              JNZ	CLRNX3             ;Clear working area until loop counter is zero
 2916/133D : 46 F5 12                              CALL	GETINP             ;Fetch a character from the ASCII chax string buffer
 2917/1340 : 3C AB                                 CPI	253o               ;(Typically the SYMBOL/TOKEN buffer). See if it is
 2918/1342 : 68 4D 13                              JZ	NINPUT             ;Code for + sign. Jump ahead if code for + sign.
 2919/1345 : 3C AD                                 CPI	255o               ;See if code for minus (-) sign.
 2920/1347 : 48 50 13                              JNZ	NOTPLM             ;Jump ahead if not code for minus sign. If code for
 2921/134A : 36 43                                 MVI	L, 103o               ;Minus sign, set pointer to MINUS flag storage location.
 2922/134C : F8                                    MOV	M,A                    ;Set the MINUS flag to indicate a minus number
 2923/134D : 46 F5 12                   NINPUT:    CALL	GETINP             ;Fetch another character from the ASCII char string
 2924/1350 : 3C AE                      NOTPLM:    CPI	256o               ;See if character represents a period (decimal point) in
 2925/1352 : 68 81 13                              JZ	PERIOD             ;Input string. Jump ahead if yes.
 2926/1355 : 3C C5                                 CPI	305o               ;If not period, see if code for E as in Exponent
 2927/1357 : 68 91 13                              JZ	FNDEXP             ;Jump ahead if yes.
 2928/135A : 3C A0                                 CPI	240o               ;Else see if code for space.
 2929/135C : 68 4D 13                              JZ	NINPUT             ;Ignore space character, go fetch another character.
 2930/135F : A0                                    ANA	A                    ;If none of the above see if zero byte
 2931/1360 : 68 C9 13                              JZ	ENDINP             ;Indicating end of input char string. If yes, jumn ahead.
 2932/1363 : 3C B0                                 CPI	260o               ;If not end of string, check to see
 2933/1365 : 70 FD 0A                              JM	NUMERR             ;If character represents
 2934/1368 : 3C BA                                 CPI	272o               ;A valid decimal number (0 to 9)
 2935/136A : 50 FD 0A                              JP	NUMERR             ;Display error message if not a valid digit at this point!
 2936/136D : 36 6E                                 MVI	L, 156o               ;For valid digit, set pointer to MSW of temporary
 2937/136F : D0                                    MOV	C,A                    ;Decimal to binary holding registers. Save character in C.
 2938/1370 : 06 F8                                 MVI	A, 370o               ;Form mask for sizing in accumulator. Now see if
 2939/1372 : A7                                    ANA	M                    ;Holding register has enough room for the conversion of
 2940/1373 : 48 4D 13                              JNZ	NINPUT             ;Another digit. Ignore the input if no more room.
 2941/1376 : 36 45                                 MVI	L, IN_DIGIT_CC_L      ;If have room in register then set pointer to input digit
 2942/1378 : CF                                    MOV	B,M                    ;Counter location. Fetch the present value.
 2943/1379 : 08                                    INR	B                    ;Increment it to account for incoming digit.
 2944/137A : F9                                    MOV	M,B                    ;Restore updated count to storage location.
 2945/137B : 46 2E 14                              CALL	DECBIN             ;Call the DECimal to BINary conversion routine to add
 2946/137E : 44 4D 13                              JMP	NINPUT             ;In the new digit in holding registers. Continue inputting.
 2947/1381 : C8                         PERIOD:    MOV	B,A                    ;Save character code in register B
 2948/1382 : 36 46                                 MVI	L, 106o               ;Set pointer to PERIOD indicator storage location
 2949/1384 : C7                                    MOV	A,M                    ;Fetch value in PERIOD indicator
 2950/1385 : A0                                    ANA	A                    ;Exercise CPU flags
 2951/1386 : 48 FD 0A                              JNZ	NUMERR             ;If already have a period then display error message
 2952/1389 : 36 45                                 MVI	L, IN_DIGIT_CC_L      ;If not, change pointer to digit counter storage location
 2953/138B : F8                                    MOV	M,A                    ;Clear the digit counter back to zero
 2954/138C : 30                                    INR	L                    ;Advance pointer to PERIOD indicator
 2955/138D : F9                                    MOV	M,B                    ;Set the PERIOD indicator
 2956/138E : 44 4D 13                              JMP	NINPUT             ;Continue processing the input character string
 2957/1391 : 46 F5 12                   FNDEXP:    CALL	GETINP             ;Get next character in Exponent
 2958/1394 : 3C AB                                 CPI	253o               ;See if it is code for + sign
 2959/1396 : 68 A1 13                              JZ	EXPINP             ;Jump ahead if yes.
 2960/1399 : 3C AD                                 CPI	255o               ;If not + sign, see if minus sign
 2961/139B : 48 A4 13                              JNZ	NOEXPS             ;If not minus sign then jump ahead
 2962/139E : 36 44                                 MVI	L, 104o               ;For minus sign, set pointer to EXP SIGN indicator
 2963/13A0 : F8                                    MOV	M,A                    ;Set the EXP SIGN indicator for a minus exponent
 2964/13A1 : 46 F5 12                   EXPINP:    CALL	GETINP             ;Fetch the next character in the decimal exponent
 2965/13A4 : A0                         NOEXPS:    ANA	A                    ;Exercise the CPU flags
 2966/13A5 : 68 C9 13                              JZ	ENDINP             ;If character inputted was zero, then end of input string
 2967/13A8 : 3C B0                                 CPI	260o               ;If not end of string, check to see
 2968/13AA : 70 FD 0A                              JM	NUMERR             ;If character represents
 2969/13AD : 3C BA                                 CPI	272o               ;A valid decimal number (0 to 9)
 2970/13AF : 50 FD 0A                              JP	NUMERR             ;Display error message if not a valid digit at this point!
 2971/13B2 : 24 0F                                 ANI	017o               ;Else trim the ASCII code to BCD
 2972/13B4 : C8                                    MOV	B,A                    ;And save in register B
 2973/13B5 : 36 6F                                 MVI	L, 157o               ;Set pointer to input exponent storage location
 2974/13B7 : 06 03                                 MVI	A, 003                ;Set accumulator equal to three
 2975/13B9 : BF                                    CMP	M                    ;See if any previous digit in exponent greater than three
 2976/13BA : 70 FD 0A                              JM	NUMERR             ;Display error message if yes
 2977/13BD : D7                                    MOV	C,M                    ;Else save any previous value in register C
 2978/13BE : C7                                    MOV	A,M                    ;And also place any previous value in accumulator
 2979/13BF : A0                                    ANA	A                    ;Clear the carry bit with this instruction
 2980/13C0 : 12                                    RAL                    ;Single precision multiply by ten algorithm
 2981/13C1 : 12                                    RAL                    ;Two rotate lefts equals times four
 2982/13C2 : 82                                    ADD	C                    ;Adding in the digit makes total times five
 2983/13C3 : 12                                    RAL                    ;Rotating left again equals times ten
 2984/13C4 : 81                                    ADD	B                    ;now add in digit just inputted
 2985/13C5 : F8                                    MOV	M,A                    ;Restore the value to exponent storage location
 2986/13C6 : 44 A1 13                              JMP	EXPINP             ;Go get any additional exponent int)ut
 2987/13C9 : 36 43                      ENDINP:    MVI	L, 103o               ;Set pointer to mantissa SIGN indicator
 2988/13CB : C7                                    MOV	A,M                    ;Fetch the SIGN indicator to the acclimulator
 2989/13CC : A0                                    ANA	A                    ;Exercise the CPU flags
 2990/13CD : 68 D7 13                              JZ	FININP             ;If SIGN indicator is zero, go finish up as nr is positive
 2991/13D0 : 36 6C                                 MVI	L, 154o               ;But, if indicator is non-zero, number is negative
 2992/13D2 : 0E 03                                 MVI	B, 003                ;Set pntr to LSW of storage registers, set precision entr
 2993/13D4 : 46 68 12                              CALL	COMPLM             ;Negate the triple-precision number in holding registers
 2994/13D7 : 36 6B                      FININP:    MVI	L, 153o               ;Set pointer to input storage LS~V minus one
 2995/13D9 : A8                                    XRA	A                    ;Clear the accumulator
 2996/13DA : F8                                    MOV	M,A                    ;Clear the LSW minus one location
 2997/13DB : DD                                    MOV	D,H                    ;Set register D to floating point working page
 2998/13DC : 26 53                                 MVI	E, 123o               ;Set E to address of FPACC LSW minus one
 2999/13DE : 0E 04                                 MVI	B, 004                ;Set precision counter
 3000/13E0 : 46 0B 11                              CALL	MOVEIT             ;Move number from input register to FPACC
 3001/13E3 : 46 34 10                              CALL	FPFLT              ;Now convert the binary fixed point to floating point
 3002/13E6 : 36 44                                 MVI	L, 104o               ;Set pointer to Exponent SIGN indicator location
 3003/13E8 : C7                                    MOV	A,M                    ;Fetch the value of the EXP SIGN indicator
 3004/13E9 : A0                                    ANA	A                    ;Exercise the CPU flags
 3005/13EA : 36 6F                                 MVI	L, 157o               ;Reset pointer to input exponent storage location
 3006/13EC : 68 F5 13                              JZ	POSEXP             ;If EXP SIGN indicator zero, exponent is positive
 3007/13EF : C7                                    MOV	A,M                    ;Else, exponent is negative so must negate
 3008/13F0 : 2C FF                                 XRI	377o               ;The value in the input exponent storage location
 3009/13F2 : 04 01                                 ADI	001                ;By performing this two's complement
 3010/13F4 : F8                                    MOV	M,A                    ;Restore the negated value to exponent storage location
 3011/13F5 : 36 46                      POSEXP:    MVI	L, 106o               ;Set pointer to PERIOD indicator storage location
 3012/13F7 : C7                                    MOV	A,M                    ;Fetch the contents of the PERIOD indicator
 3013/13F8 : A0                                    ANA	A                    ;Exercise the CPU flags
 3014/13F9 : 68 00 14                              JZ	EXPOK              ;If PERIOD indicator clear, no decimal point involved
 3015/13FC : 36 45                                 MVI	L, IN_DIGIT_CC_L      ;If have a decimal point, set pointer to digit counter
 3016/13FE : A8                                    XRA	A                    ;Storage location. Clear the accumulator.
 3017/13FF : 97                                    SUB	M                    ;And get a negated value of the digit counter in ACC
 3018/1400 : 36 6F                      EXPOK:     MVI	L, 157o               ;Change pointer to input exponent storage location
 3019/1402 : 87                                    ADD	M                    ;Add this value to negated digit counter value
 3020/1403 : F8                                    MOV	M,A                    ;Restore new value to storage location
 3021/1404 : 70 1B 14                              JM	MINEXP             ;If new value is minus, skip over next subroutine
 3022/1407 : 2B                                    RZ                    ;If new value is zero, no further processing required
 3023/1408 :                            
 3024/1408 :                                                              ;Following subroutine will multiply the floating point
 3025/1408 :                                                              ;binary number stored in FPACC by ten tirnes the
 3026/1408 :                                                              ;value stored in the deciinal exponent storage location.
 3027/1408 :                            
 3028/1408 : 36 88                      FPX10:     MVI	L, 210o               ;Set pointer to registers containing floating point
 3029/140A : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Binary representation of 10 (decimal).
 3030/140C : 46 BF 12                              CALL	FACXOP             ;Transfer FPACC to FPOP and 10 (dec) to FPACC
 3031/140F : 46 26 11                              CALL	FPMULT             ;Multiply FPOP (formerly FPACC) by 10 (decimal)
 3032/1412 : 36 6F                                 MVI	L, 157o               ;Set pointer to decimal exponent storage location
 3033/1414 : D7                                    MOV	C,M                    ;Fetch the exponent value
 3034/1415 : 11                                    DCR	C                    ;Decrement
 3035/1416 : FA                                    MOV	M,C                    ;Restore to storage
 3036/1417 : 48 08 14                              JNZ	FPX10              ;If exponent value is not zero, continue multiplication
 3037/141A : 07                                    RET                    ;When exponent is zero can exit. Conversion completed.
 3038/141B :                            
 3039/141B :                                                              ;Following subroutine will multiply the floating point
 3040/141B :                                                              ;binary number stored in PPACC by 0.1 times the value
 3041/141B :                                                              ;(negative) stored in the decimal exponent storage location
 3042/141B :                            
 3043/141B :                            MINEXP:
 3044/141B : 36 8C                      FPD10:     MVI	L, 214o               ;Set pointer to registers containing floating point
 3045/141D : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Binary representation of 0.1 (decimal).
 3046/141F : 46 BF 12                              CALL	FACXOP             ;Transfer FPACC to FPOP and 0.1 (dec) to FPACC
 3047/1422 : 46 26 11                              CALL	FPMULT             ;Multitply FPOP (formerly FPACC) by 0.1 (decimal)
 3048/1425 : 36 6F                                 MVI	L, 157o               ;Set pointer to decimal exponent storage location
 3049/1427 : CF                                    MOV	B,M                    ;Fetch the exponent value
 3050/1428 : 08                                    INR	B                    ;Increment
 3051/1429 : F9                                    MOV	M,B                    ;Restore to storage
 3052/142A : 48 1B 14                              JNZ	FPD10              ;If exponent value is not zero, continue multiplication
 3053/142D : 07                                    RET                    ;When exponent is zero can exit. Conversion completed.
 3054/142E :                            
 3055/142E :                                                              ;Following subroutine is used
 3056/142E :                                                              ;to convert decimal charac-
 3057/142E :                                                              ;ters to binary fixed point forinat
 3058/142E :                                                              ;in a triple-precision format.
 3059/142E :                            
 3060/142E : 46 CF 12                   DECBIN:    CALL	SAVEHL             ;Save entry value of D, E, H and L in memory
 3061/1431 : 36 6B                                 MVI	L, 153o               ;Set pointer to temporary storage location
 3062/1433 : C2                                    MOV	A,C                    ;Restore character inputted to accumulator
 3063/1434 : 24 0F                                 ANI	017o               ;Trim ASCII code to BCD
 3064/1436 : F8                                    MOV	M,A                    ;Store temporarily
 3065/1437 : 26 68                                 MVI	E, 150o               ;Set pointer to working area LSW of multi-byte register
 3066/1439 : 36 6C                                 MVI	L, 154o               ;Set another pointer to LSW of conversion register
 3067/143B : DD                                    MOV	D,H                    ;Make sure D set to page of working area
 3068/143C : 0E 03                                 MVI	B, 003                ;Set precision counter
 3069/143E : 46 0B 11                              CALL	MOVEIT             ;Move original value of conversion register to working
 3070/1441 : 36 6C                                 MVI	L, 154o               ;Register. Reset pointer to LSW of conversion register.
 3071/1443 : 0E 03                                 MVI	B, 003                ;Set precision counter
 3072/1445 : 46 7F 12                              CALL	ROTATL             ;Rotate register left, (Multiplies value by two.)
 3073/1448 : 36 6C                                 MVI	L, 154o               ;Reset pointer to LSW.
 3074/144A : 0E 03                                 MVI	B, 003                ;Set precision counter
 3075/144C : 46 7F 12                              CALL	ROTATL             ;Multiply by two again (total now times four).
 3076/144F : 26 6C                                 MVI	E, 154o               ;Set pointer to LSW of conversion register.
 3077/1451 : 36 68                                 MVI	L, 150o               ;Set pointer to LSW of working register (original value).
 3078/1453 : 0E 03                                 MVI	B, 003                ;Set precision counter.
 3079/1455 : 46 57 12                              CALL	ADDER              ;Add original value to rotated value (now times five).
 3080/1458 : 36 6C                                 MVI	L, 154o               ;Reset pointer to LSW
 3081/145A : 0E 03                                 MVI	B, 003                ;Set precision counter
 3082/145C : 46 7F 12                              CALL	ROTATL             ;Multiply by two once more (total now times ten).
 3083/145F : 36 6A                                 MVI	L, 152o               ;Set pointer to clear working register locatiotis
 3084/1461 : A8                                    XRA	A                    ;Clear the accumulator
 3085/1462 : F8                                    MOV	M,A                    ;Clear MSW of working register
 3086/1463 : 31                                    DCR	L                    ;Decrement pointer
 3087/1464 : F8                                    MOV	M,A                    ;Clear next byte
 3088/1465 : 36 6B                                 MVI	L, 153o               ;Set pointer to current digit storage location
 3089/1467 : C7                                    MOV	A,M                    ;Fetch the current digit
 3090/1468 : 36 68                                 MVI	L, 150o               ;Change pointer to LSW of working register
 3091/146A : F8                                    MOV	M,A                    ;Deposit the current digit in LSW of working register
 3092/146B : 26 6C                                 MVI	E, 154o               ;Set pointer to conversion register LSW
 3093/146D : 0E 03                                 MVI	B, 003                ;Set precision counter
 3094/146F : 46 57 12                              CALL	ADDER              ;Add current digit to conversion register to complete
 3095/1472 : 44 DF 12                              JMP	RESTHL             ;Conversion. Exit to caller by restoring CPU registers.
 3096/1475 : 2E 01                      FPOUT:     MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to working area for floating point routines
 3097/1477 : 36 6F                                 MVI	L, 157o               ;Set pointer to decimal exponent storage location
 3098/1479 : 3E 00                                 MVI	M, 000                ;Initialize storage location to zero
 3099/147B : 36 56                                 MVI	L, 126o               ;Change pointer to FPACC (number to be outputted)
 3100/147D : C7                                    MOV	A,M                    ;And fetch MSW of FPACC
 3101/147E : A0                                    ANA	A                    ;Test the contents of MSW of FPACC
 3102/147F : 70 87 14                              JM	OUTNEG             ;If most significant bit of MSW is a one, have a minus nr.
 3103/1482 : 06 A0                                 MVI	A, 240o               ;Else number is positive, set ASCII code for space for a
 3104/1484 : 44 90 14                              JMP	AHEAD1             ;Positive number and go display a space
 3105/1487 : 36 54                      OUTNEG:    MVI	L, 124o               ;If number in FPACC is negative must negate in order
 3106/1489 : 0E 03                                 MVI	B, 003                ;To display. Set pntr to LSW of FPACC & set prec. cntr.
 3107/148B : 46 68 12                              CALL	COMPLM             ;Negate the number in the FPACC to make it positive
 3108/148E : 06 AD                                 MVI	A, 255o               ;But load ACC with ASCII code for minus sign
 3109/1490 : 46 82 03                   AHEAD1:    CALL	ECHO               ;Call user display driver to output space or minus sign
 3110/1493 : 36 48                                 MVI	L, 110o               ;Set pointer to FIXED/FLOAT indicator
 3111/1495 : C7                                    MOV	A,M                    ;Fetch value of FIXED/FLOAT indicator
 3112/1496 : A0                                    ANA	A                    ;Test contents of indicator. If contents are zero, calling
 3113/1497 : 68 AB 14                              JZ	OUTFLT             ;Routine has directed floating point output format.
 3114/149A : 36 57                                 MVI	L, 127o               ;If indicator non-zero, fixed point fonnat requested if
 3115/149C : 06 17                                 MVI	A, 027o               ;Possible. Point to FPACC Exponent. Put 23 decimal in
 3116/149E : CF                                    MOV	B,M                    ;Accumulator. Fetch FPACC Exponent into register B
 3117/149F : 08                                    INR	B                    ;And exercise the register to test its
 3118/14A0 : 09                                    DCR	B                    ;Original contents. If FPACC Exponent is negative in
 3119/14A1 : 70 AB 14                              JM	OUTFLT             ;Value then go to floating point output forrnat. If value
 3120/14A4 : 91                                    SUB	B                    ;Is positive, subtract value from 23 (decimal). If result
 3121/14A5 : 70 AB 14                              JM	OUTFLT             ;Negative, number is too big to use fixed format.
 3122/14A8 : 44 B9 14                              JMP	OUTFIX             ;Else, can use fixed format so skip next routine
 3123/14AB : 36 48                      OUTFLT:    MVI	L, 110o               ;Set pointer to FIXED/FLOAT indicator.
 3124/14AD : 3E 00                                 MVI	M, 000                ;Clear indicator to indicate floating point output format
 3125/14AF : 06 B0                                 MVI	A, 260o               ;Load ASCII code for '0' into accumulator
 3126/14B1 : 46 82 03                              CALL	ECHO               ;Call user display driver to output '0' as first character
 3127/14B4 : 06 AE                                 MVI	A, 256o               ;Number string. Now load ASCII code for decimal point.
 3128/14B6 : 46 82 03                              CALL	ECHO               ;Call user display driver to output '.'as second character.
 3129/14B9 : 36 57                      OUTFIX:    MVI	L, 127o               ;Set pointer to FPACC Exponent
 3130/14BB : 06 FF                                 MVI	A, 377o               ;Load accumulator with minus one
 3131/14BD : 87                                    ADD	M                    ;Add value in FPACC Exponent
 3132/14BE : F8                                    MOV	M,A                    ;Restore compensated exponent value
 3133/14BF :                            
 3134/14BF :                                                              ;Next portion of routine establishes the value for the
 3135/14BF :                                                              ;decimal exponent that will be outputted by processing
 3136/14BF :                                                              ;the binary exponent value in the FPACC.
 3137/14BF :                            
 3138/14BF : 50 DE 14                   DECEXT:    JP	DECEXD             ;If compensated exponent value is zero or positive
 3139/14C2 : 06 04                                 MVI	A, 004                ;Then go multiply FPACC by 0.1 (decimal). Else,
 3140/14C4 : 87                                    ADD	M                    ;Add four to the exponent value.
 3141/14C5 : 50 F0 14                              JP	DECOUT             ;If exponent now zero or positive, ready to output
 3142/14C8 : 36 88                                 MVI	L, 210o               ;If exponent negative, multiply FPACC by 10 (decimal)
 3143/14CA : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set pointer to registers holding 10 (dec) in binary
 3144/14CC : 46 BF 12                              CALL	FACXOP             ;Floating point format. Set up for multiplication.
 3145/14CF : 46 26 11                              CALL	FPMULT             ;Perform the multiplication. Answer in FPACC.
 3146/14D2 : 36 6F                                 MVI	L, 157o               ;Set pointer to decimal exponent storage location.
 3147/14D4 : D7                                    MOV	C,M                    ;Each time the FPACC is multiplied by ten, need to
 3148/14D5 : 11                                    DCR	C                    ;Decrement the value in the decinial exponent storage
 3149/14D6 : FA                                    MOV	M,C                    ;Location. (This establishes decimal exponent value!)
 3150/14D7 : 36 57                      DECREP:    MVI	L, 127o               ;Reset pointer to FPACC Exponent
 3151/14D9 : C7                                    MOV	A,M                    ;Fetch value in exponent
 3152/14DA : A0                                    ANA	A                    ;Test value
 3153/14DB : 44 BF 14                              JMP	DECEXT             ;Repeat process as required
 3154/14DE : 36 8C                      DECEXD:    MVI	L, 214o               ;If exponent is positive, multiply FPACC by 0.1
 3155/14E0 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set pointer to registers holding 0.1 dec in binary
 3156/14E2 : 46 BF 12                              CALL	FACXOP             ;Floating point format. Set up for multipli(-ation.
 3157/14E5 : 46 26 11                              CALL	FPMULT             ;Perform the multiplication. Answer in FPACC.
 3158/14E8 : 36 6F                                 MVI	L, 157o               ;Set pointer to decimal exponent storage location.
 3159/14EA : CF                                    MOV	B,M                    ;Each time the FPACC is multiplied by one tenth, need
 3160/14EB : 08                                    INR	B                    ;To increment the value in the decimal exponent storage
 3161/14EC : F9                                    MOV	M,B                    ;Location. (This establishes decimal exponent value!)
 3162/14ED : 44 D7 14                              JMP	DECREP             ;Repeat process as required
 3163/14F0 :                            
 3164/14F0 :                                                              ;The next section outputs the mantissa
 3165/14F0 :                                                              ;(or fixed point number) by converting the value remaining
 3166/14F0 :                                                              ;in the FPACC (after the decimal exponent equivalent has
 3167/14F0 :                                                              ;been extracted from the original value if required by the
 3168/14F0 :                                                              ;previous routines) to a string of decirnal digits.
 3169/14F0 : 26 74                      DECOUT:    MVI	E, 164o               ;Set pointer to LSW of output working register
 3170/14F2 : DD                                    MOV	D,H                    ;Set D to same page value as H
 3171/14F3 : 36 54                                 MVI	L, 124o               ;Set pointer to LSW of FPACC
 3172/14F5 : 0E 03                                 MVI	B, 003                ;Set precision counter
 3173/14F7 : 46 0B 11                              CALL	MOVEIT             ;Move value in FPACC to output working register
 3174/14FA : 36 77                                 MVI	L, 167o               ;Set pointer to MSW plus one of output working register
 3175/14FC : 3E 00                                 MVI	M, 000                ;Clear that location to 0
 3176/14FE : 36 74                                 MVI	L, 164o               ;Set pointer to LSW of output working register
 3177/1500 : 0E 03                                 MVI	B, 003                ;Set precision counter
 3178/1502 : 46 7F 12                              CALL	ROTATL             ;Rotate register left once to compensate for sign bit
 3179/1505 : 46 93 15                              CALL	OUTX10             ;Multiply output register by 10, overflow into N4SW+ 1
 3180/1508 : 36 57                      COMPEN:    MVI	L, 127o               ;Set pointer back to FPACC Exponent
 3181/150A : CF                                    MOV	B,M                    ;Compensate for any remainder in the binary exponent
 3182/150B : 08                                    INR	B                    ;By performing a rotate right on the output working
 3183/150C : F9                                    MOV	M,B                    ;Register until the binary exponent becomes zero
 3184/150D : 68 1A 15                              JZ	OUTDIG             ;Go output decimal digits when this loop is finished
 3185/1510 : 36 77                                 MVI	L, 167o               ;Binary exponent compensating loop. Setpointe'r to
 3186/1512 : 0E 04                                 MVI	B, 004                ;Working register MSW+L. Set precision counter.
 3187/1514 : 46 89 12                              CALL	ROTATR             ;Rotate working register to the right.
 3188/1517 : 44 08 15                              JMP	COMPEN             ;Repeat loop as required.
 3189/151A : 36 47                      OUTDIG:    MVI	L, 107o               ;Set pointer to output digit counter storage location
 3190/151C : 3E 07                                 MVI	M, 007                ;Initialize to value of seven
 3191/151E : 36 77                                 MVI	L, 167o               ;Change pointer to output working register MSW+L
 3192/1520 : C7                                    MOV	A,M                    ;Fetch MSW+L byte containing BCD of digit to be
 3193/1521 : A0                                    ANA	A                    ;Displayed. Test the contents of this byte.
 3194/1522 : 68 75 15                              JZ	ZERODG             ;If zero jump to ZERODG routine.
 3195/1525 : 36 77                      OUTDGS:    MVI	L, 167o               ;Reset pointer to working register MSW+L
 3196/1527 : C7                                    MOV	A,M                    ;Fetch BCD of digit to be outputted
 3197/1528 : A0                                    ANA	A                    ;Exercise CPU flags
 3198/1529 : 48 45 15                              JNZ	OUTDGX             ;If not zero, go display the digit
 3199/152C : 36 48                                 MVI	L, 110o               ;If zero, change pointer to FIXED/FLOAT indicator
 3200/152E : C7                                    MOV	A,M                    ;Fetch the indicator into the accumulator
 3201/152F : A0                                    ANA	A                    ;Test value of indicator
 3202/1530 : 68 44 15                              JZ	OUTZER             ;If in floating point mode, go display the digit
 3203/1533 : 36 6F                                 MVI	L, 157o               ;Else change pointer to decimal exponent storage
 3204/1535 : D7                                    MOV	C,M                    ;Location, which, for fixed point, will have a positive
 3205/1536 : 11                                    DCR	C                    ;Value for all digits before the decimal point. Decrement
 3206/1537 : 10                                    INR	C                    ;And increment to exercise flags. See if count is positive.
 3207/1538 : 50 44 15                              JP	OUTZER             ;If positive, must display any zero digit.
 3208/153B : 36 76                                 MVI	L, 166o               ;If not, change pointer to MSW of working register
 3209/153D : C7                                    MOV	A,M                    ;And test to see if any significant digits coming up
 3210/153E : 24 E0                                 ANI	340o               ;By forming a mask and testing for presence of bits
 3211/1540 : 48 44 15                              JNZ	OUTZER             ;If more significant digits coming up soon, display the
 3212/1543 : 07                                    RET                    ;Zero digit. Else, exit to calling routine. Finished.
 3213/1544 : A8                         OUTZER:    XRA	A                    ;Clear the accumulator to restore zero digit value
 3214/1545 : 04 B0                      OUTDGX:    ADI	260o               ;Add 260 (octal) to BCD code in ACC to form ASCII
 3215/1547 : 46 82 03                              CALL	ECHO               ;Code and call the user's display driver subroutine
 3216/154A : 36 48                      DECRDG:    MVI	L, 110o               ;Set pointer to FIXED/FLOAT indicator storage
 3217/154C : C7                                    MOV	A,M                    ;Fetch the indicator to the accumulator
 3218/154D : A0                                    ANA	A                    ;Exercise the CPU flags
 3219/154E : 48 5F 15                              JNZ	CKDECP             ;If indicator non-zero, doing fixed point output
 3220/1551 : 36 47                                 MVI	L, 107o               ;Else, get output digit counter
 3221/1553 : D7                                    MOV	C,M
 3222/1554 : 11                                    DCR	C                    ;Decrement the digit counter & restore to storage
 3223/1555 : FA                                    MOV	M,C
 3224/1556 : 68 C0 15                              JZ	EXPOUT             ;When digit counter is zero, go take care of exponent
 3225/1559 : 46 93 15                   PUSHIT:    CALL	OUTX10             ;Else push next BCD digit out of working register
 3226/155C : 44 25 15                              JMP	OUTDGS             ;And continue the outputting process
 3227/155F : 36 6F                      CKDECP:    MVI	L, 157o               ;For fixed point output, decimal exponent serves as
 3228/1561 : D7                                    MOV	C,M                    ;Counter for number of digits before decimal point
 3229/1562 : 11                                    DCR	C                    ;Fetch the counter and decrement it to account for
 3230/1563 : FA                                    MOV	M,C                    ;Current digit being processed. Restore to storage.
 3231/1564 : 48 6C 15                              JNZ	NODECP             ;If count does not go to zero, jump ahead.
 3232/1567 : 06 AE                                 MVI	A, 256o               ;When count reaches zero, load ASCII code for period
 3233/1569 : 46 82 03                              CALL	ECHO               ;And call user's display driver to display decimal point
 3234/156C : 36 47                      NODECP:    MVI	L, 107o               ;Set pointer to output digit counter storage location
 3235/156E : D7                                    MOV	C,M                    ;Fetch the digit counter
 3236/156F : 11                                    DCR	C                    ;Decrement the value
 3237/1570 : FA                                    MOV	M,C                    ;Restore to storage
 3238/1571 : 2B                                    RZ                    ;If counter reaches zero, exit to caller. Finished.
 3239/1572 : 44 59 15                              JMP	PUSHIT             ;Else continue to output the number.
 3240/1575 : 36 6F                      ZERODG:    MVI	L, 157o               ;If first digit of floating point number is a zero, set
 3241/1577 : D7                                    MOV	C,M                    ;Pointer to decimal exponent storage location.
 3242/1578 : 11                                    DCR	C                    ;Decrement the value to compensate for skipping
 3243/1579 : FA                                    MOV	M,C                    ;Display of first digit. Restore to storage.
 3244/157A : 36 76                                 MVI	L, 166o               ;Change pointer to MSW of output working register
 3245/157C : C7                                    MOV	A,M                    ;Fetch MSW of output working register
 3246/157D : A0                                    ANA	A                    ;Test the contents
 3247/157E : 48 4A 15                              JNZ	DECRDG             ;If non-zero, continue outputting
 3248/1581 : 31                                    DCR	L                    ;Else decrement pointer to next byte in working register
 3249/1582 : C7                                    MOV	A,M                    ;Fetch its contents
 3250/1583 : A0                                    ANA	A                    ;Test
 3251/1584 : 48 4A 15                              JNZ	DECRDG             ;If non-zero, continue outputting
 3252/1587 : 31                                    DCR	L                    ;Else decrement pointer to LSW of working register
 3253/1588 : C7                                    MOV	A,M                    ;Fetch its contents
 3254/1589 : A0                                    ANA	A                    ;Test
 3255/158A : 48 4A 15                              JNZ	DECRDG             ;If non-zero, continue outputting
 3256/158D : 36 6F                                 MVI	L, 157o               ;If decimal mantissa is zero, set pointer to decirnal
 3257/158F : F8                                    MOV	M,A                    ;Exponent storage and clear it
 3258/1590 : 44 4A 15                              JMP	DECRDG             ;Finish outputting
 3259/1593 :                            
 3260/1593 :                                                              ;Following routine multiplies the binary number in the
 3261/1593 :                                                              ;output working register by ten to push the most signifi-
 3262/1593 :                                                              ;cant digit out to the MSW+L byte.
 3263/1593 :                            
 3264/1593 : 36 77                      OUTX10:    MVI	L, 167o               ;Set pointer to work ing register M SW+ 1
 3265/1595 : 3E 00                                 MVI	M, 000                ;Clear it in preparation for receiving next digit pushed
 3266/1597 : 36 74                                 MVI	L, 164o               ;Into it. Change pointer to working register LSW.
 3267/1599 : DD                                    MOV	D,H                    ;Set up register D to same page as H.
 3268/159A : 26 70                                 MVI	E, 160o               ;Set second pointer to LSW of second working register
 3269/159C : 0E 04                                 MVI	B, 004                ;Set precision counter
 3270/159E : 46 0B 11                              CALL	MOVEIT             ;Move first working register into second
 3271/15A1 : 36 74                                 MVI	L, 164o               ;Reset pointer to LSW of first working register
 3272/15A3 : 0E 04                                 MVI	B, 004                ;Set precision counter
 3273/15A5 : 46 7F 12                              CALL	ROTATL             ;Rotate contents of first working register left (X 2)
 3274/15A8 : 36 74                                 MVI	L, 164o               ;Reset pointer to LSW
 3275/15AA : 0E 04                                 MVI	B, 004                ;Reset precision counter
 3276/15AC : 46 7F 12                              CALL	ROTATL             ;Rotate contents left again (X 4)
 3277/15AF : 36 70                                 MVI	L, 160o               ;Set pointer to LSW of original value in 2'nd register
 3278/15B1 : 26 74                                 MVI	E, 164o               ;Set pointer to LSW of rotated value
 3279/15B3 : 0E 04                                 MVI	B, 004                ;Set precision counter
 3280/15B5 : 46 57 12                              CALL	ADDER              ;Add rotated value to original value (X 5)
 3281/15B8 : 36 74                                 MVI	L, 164o               ;Reset pointer to LSW of first working register
 3282/15BA : 0E 04                                 MVI	B, 004                ;Set precision counter
 3283/15BC : 46 7F 12                              CALL	ROTATL             ;Rotate contents left again (X 10)
 3284/15BF : 07                                    RET                    ;Exit to calling routine
 3285/15C0 :                            
 3286/15C0 :                                                              ;The final group of routines in the floating point output
 3287/15C0 :                                                              ;section take care of outputting the decimal exponent
 3288/15C0 :                                                              ;portion of floating point numbers.
 3289/15C0 :                            
 3290/15C0 : 36 6F                      EXPOUT:    MVI	L, 157o               ;Set pointer to decimal exponent storage location
 3291/15C2 : C7                                    MOV	A,M                    ;Fetch value to the accumulator
 3292/15C3 : A0                                    ANA	A                    ;Test the value
 3293/15C4 : 2B                                    RZ                    ;If zero, then no exponent portion. Exit to CALLler.
 3294/15C5 : 06 C5                                 MVI	A, 305o               ;Else, load ACC with ASCII code for letter E.
 3295/15C7 : 46 82 03                              CALL	ECHO               ;Display E for Exponent via user's display driver rtn
 3296/15CA : C7                                    MOV	A,M                    ;Get decimal exponent value back into ACC
 3297/15CB : A0                                    ANA	A                    ;Test again
 3298/15CC : 70 D4 15                              JM	EXOUTN             ;If value is negative, skip ahead
 3299/15CF : 06 AB                                 MVI	A, 253o               ;If positive, load ASCII code for + sign
 3300/15D1 : 44 DB 15                              JMP	AHEAD2             ;Jump to display the + sign
 3301/15D4 : 2C FF                      EXOUTN:    XRI	377o               ;When decimal exponent is negative, must negate
 3302/15D6 : 04 01                                 ADI	001                ;Value for display purposes. Perform two's complement
 3303/15D8 : F8                                    MOV	M,A                    ;And restore the negated value to storage location
 3304/15D9 : 06 AD                                 MVI	A, 255o               ;Load ASCII code for minus sign
 3305/15DB : 46 82 03                   AHEAD2:    CALL	ECHO               ;Display the ASCII character in ACC
 3306/15DE : 0E 00                                 MVI	B, 000                ;Clear register B
 3307/15E0 : C7                                    MOV	A,M                    ;Fetch the decimal exponent value back into ACC
 3308/15E1 : 14 0A                      SUB12:     SUI	012o               ;Subtract 10 (decimal) from value in ACC
 3309/15E3 : 70 EB 15                              JM	TOMUCH             ;Break out of loop when accumulator goes negative
 3310/15E6 : F8                                    MOV	M,A                    ;Else restore value to storage location
 3311/15E7 : 08                                    INR	B                    ;Increment register B as a counter
 3312/15E8 : 44 E1 15                              JMP	SUB12              ;Repeat loop to form tens value of decimal exponent
 3313/15EB : 06 B0                      TOMUCH:    MVI	A, 260o               ;Load base ASCII value for digit into the accumulator
 3314/15ED : 81                                    ADD	B                    ;Add to the count in B to forin tens digit of decimal
 3315/15EE : 46 82 03                              CALL	ECHO               ;Exponent. Display via user's driver subroutine
 3316/15F1 : C7                                    MOV	A,M                    ;Fetch remainder of decimal exponent value
 3317/15F2 : 04 B0                                 ADI	260o               ;Add in ASCII base value to form final digit
 3318/15F4 : 46 82 03                              CALL	ECHO               ;Display second digit of decirnal exponent
 3319/15F7 : 07                                    RET                    ;Finished outputting. Return to caller.
 3320/15F8 :                            ;;; The above RETURN SHOULD BE AT 25 367 15f7h
 3321/15F8 :                            
 3322/15F8 :                            ;;; NOW OPEN AREA UP TO 26 000 CAN BE USED FOR PATCHING...
 3323/15F8 :                            
 3324/15F8 :                            ;	db	(1600h-$) dup 0
 3325/15F8 :                            
 3326/1600 :                            	ORG	1600h	;026#000
 3327/1600 :                            
 3328/1600 : 00                         	db	0		;DATA 000		; CC FOR INPUT LINE BUFFER
 3329/1601 : 00 00 00 00 00 00 00 00 00 	db	79 dup (0)	;DATA *79 		; THE INPUT LINE BUFFER
      160A : 00 00 00 00 00 00 00 00 00
      1613 : 00 00 00 00 00 00 00 00 00
      161C : 00 00 00 00 00 00 00 00 00
      1625 : 00 00 00 00 00 00 00 00 00
      162E : 00 00 00 00 00 00 00 00 00
      1637 : 00 00 00 00 00 00 00 00 00
      1640 : 00 00 00 00 00 00 00 00 00
      1649 : 00 00 00 00 00 00 00      
 3330/1650 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; THESE ARE SYMBOL BUFFER STORAGE
 3331/1654 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3332/1658 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; SHOULD BE 26-120 TO 26 143
 3333/165C : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3334/1660 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3335/1664 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; THESE LOCATIONS ARE AUXILIARY SYMBOL BUFFER
 3336/1668 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3337/166C : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; SHOULD BE 26 144 TO 26 175
 3338/1670 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3339/1674 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3340/1678 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3341/167C : 00 00                      	db	0,0		;DATA 000,000
 3342/167E : 00                         	db	0		;DATA 000		; TEMP SCAN STORAGE REGISTER
 3343/167F : 00                         	db	0		;DATA 000		; TAB FLAG
 3344/1680 : 00                         	db	0		;DATA 000		; EVAL CURRENT TEMP REG.
 3345/1681 : 00                         	db	0		;DATA 000		; SYNTAX LINE NUMBER
 3346/1682 : 00                         	db	0		;DATA 000		; SCAN TEMPORARY REGISTER
 3347/1683 : 00                         	db	0		;DATA 000		; STATEMENT TOKEN
 3348/1684 : 00 00                      	db	0,0		;DATA 000,000		; TEMPORARY WORKING REGISTERS
 3349/1686 : 00 00                      	db	0,0		;DATA 000,000		; ARRAY POINTERS
 3350/1688 :                            ;;; NOW WE SHOULD BE UP TO 26 210 1688h
 3351/1688 : 00                         	db	0		;DATA 000		; OPERATOR STACK POINTER
 3352/1689 : 00 00 00 00 00 00 00 00 00 	db	15 dup (0)	;DATA *15		; OPERATOR STACK
      1692 : 00 00 00 00 00 00         
 3353/1698 : 00                         	db	0		;DATA 000		; FUN/ARRAY STACK POINTER
 3354/1699 : 00 00 00 00 00 00 00       	db	7 dup (0)	;DATA *7			; FUNCTION/ARRAY STACK
 3355/16A0 :                            ;;; THE LAST BYTE SHOULD HAVE BEEN 26 237 169fh
 3356/16A0 :                            
 3357/16A0 :                            
 3358/16A0 :                            	;; HEIRARCHY TABLE (FOR OUT OF STACK OPS)
 3359/16A0 :                            	;; USED BY PARSER ROUTINE.
 3360/16A0 :                            ;;; This SHOULD START AT 26 240
 3361/16A0 : 00                         	db	0		;DATA 000		; EOS
 3362/16A1 : 03                         	db	3		;DATA 003		; PLUS SIGN
 3363/16A2 : 03                         	db	3		;DATA 003		; MINUS SIGN
 3364/16A3 : 04                         	db	4		;DATA 004		; MULTIPLICATION SIGN
 3365/16A4 : 04                         	db	4		;DATA 004		; DIVISION SIGN
 3366/16A5 : 05                         	db	5		;DATA 005		; EXPONENT SIGN
 3367/16A6 : 06                         	db	6		;DATA 006		; LEFT PARENTHESIS
 3368/16A7 : 01                         	db	1		;DATA 001		; RIGHT PARENTHESIS
 3369/16A8 : 02                         	db	2		;DATA 002		; NOT ASSIGNED
 3370/16A9 : 02                         	db	2		;DATA 002		; LESS THAN SIGN
 3371/16AA : 02                         	db	2		;DATA 002		; Equal sign
 3372/16AB : 02                         	db	2		;DATA 002		; GREATER THAN SIGN
 3373/16AC : 02                         	db	2		;DATA 002		; LESS THAN OR EQUAL COMBO
 3374/16AD : 02                         	db	2		;DATA 002		; EQUAL OR GREATER THAN
 3375/16AE : 02                         	db	2		;DATA 002		; LESS THAN OR GREATER THAN
 3376/16AF :                            
 3377/16AF :                            	;; HEIRARCHY TABLE (FOR INTO STACK OPS)
 3378/16AF :                            	;; USED BY PARSER ROUTINE.
 3379/16AF :                            ;;; This SHOULD START AT 26 257 16afh
 3380/16AF : 00                         	db	0		;DATA 000		; EOS
 3381/16B0 : 03                         	db	3		;DATA 003		; PLUS SIGN
 3382/16B1 : 03                         	db	3		;DATA 003		; MINUS SIGN
 3383/16B2 : 04                         	db	4		;DATA 004		; MULTIPLICATION SIGN
 3384/16B3 : 04                         	db	4		;DATA 004		; DIVISION SIGN
 3385/16B4 : 05                         	db	5		;DATA 005		; EXPONENTIATION SIGN
 3386/16B5 : 01                         	db	1		;DATA 001		; LEFT PARENTHESIS
 3387/16B6 : 01                         	db	1		;DATA 001		; RIGHT PARENTHESIS
 3388/16B7 : 02                         	db	2		;DATA 002		; NOT ASSIGNED
 3389/16B8 : 02                         	db	2		;DATA 002		; LESS THAN SIGN
 3390/16B9 : 02                         	db	2		;DATA 002		; EQUAL SIGN
 3391/16BA : 02                         	db	2		;DATA 002		; GREATER THAN SIGN
 3392/16BB : 02                         	db	2		;DATA 002		; LESS THAN OR EQUAL SIGN
 3393/16BC : 02                         	db	2		;DATA 002		; EQUAL TO OR GREATER THAN
 3394/16BD : 02                         	db	2		;DATA 002		; LESS THAN OR GREATER THAN
 3395/16BE :                            
 3396/16BE : 00                         	db	0		;DATA 000		; EVAL START POINTER
 3397/16BF : 00                         	db	0		;DATA 000		; EVAL FINISH POINTER
 3398/16C0 :                            
 3399/16C0 :                            	;; FUNCTION NAMES TABLE
 3400/16C0 :                            ;;; This SHOULD START AT 26 300 16c0h
 3401/16C0 :                            
 3402/16C0 : 03                         	db	3		;DATA 3
 3403/16C1 :                            ;	db	"INT"		;DATA "INT"
 3404/16C1 : C9                         	db	"I"+80h
 3405/16C2 : CE                         	db	"N"+80h
 3406/16C3 : D4                         	db	"T"+80h
 3407/16C4 : 03                         	db	3		;DATA 3
 3408/16C5 :                            ;	db	"SGN"		;DATA "SGN"
 3409/16C5 : D3                         	db	"S"+80h
 3410/16C6 : C7                         	db	"G"+80h
 3411/16C7 : CE                         	db	"N"+80h
 3412/16C8 : 03                         	db	3		;DATA 3
 3413/16C9 :                            ;	db	"ABS"		;DATA "ABS"
 3414/16C9 : C1                         	db	"A"+80h
 3415/16CA : C2                         	db	"B"+80h
 3416/16CB : D3                         	db	"S"+80h
 3417/16CC : 03                         	db	3		;DATA 3
 3418/16CD :                            ;	db	"SQR"		;DATA "SQR"
 3419/16CD : D3                         	db	"S"+80h
 3420/16CE : D1                         	db	"Q"+80h
 3421/16CF : D2                         	db	"R"+80h
 3422/16D0 : 03                         	db	3		;DATA 3
 3423/16D1 :                            ;	db	"TAB"		;DATA "TAB"
 3424/16D1 : D4                         	db	"T"+80h
 3425/16D2 : C1                         	db	"A"+80h
 3426/16D3 : C2                         	db	"B"+80h
 3427/16D4 : 03                         	db	3		;DATA 3
 3428/16D5 :                            ;	db	"RND"		;DATA "RND"
 3429/16D5 : D2                         	db	"R"+80h
 3430/16D6 : CE                         	db	"N"+80h
 3431/16D7 : C4                         	db	"D"+80h
 3432/16D8 : 03                         	db	3		;DATA 3
 3433/16D9 :                            ;	db	"CHR"		;DATA "CHR"
 3434/16D9 : C3                         	db	"C"+80h
 3435/16DA : C8                         	db	"H"+80h
 3436/16DB : D2                         	db	"R"+80h
 3437/16DC : 03                         	db	3		;DATA 3
 3438/16DD :                            ;	db	"UDF"		;DATA "UDF"
 3439/16DD : D5                         	db	"U"+80h
 3440/16DE : C4                         	db	"D"+80h
 3441/16DF : C6                         	db	"F"+80h
 3442/16E0 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; LINE NUMBER BUFFER STORAGE
 3443/16E4 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; (SHOULD BE 340-347)
 3444/16E8 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; AUX LINE NUMBER BUFFER
 3445/16EC : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; (SHOULD BE 350-357)
 3446/16F0 :                            ;;; The following data is a change in page 3 of Scelbal update issue 4
 3447/16F0 :                            ;;; which apparently makes the "INSERT" command work correctly, the
 3448/16F0 :                            ;;; first time (later SCR commands load 33 into this spot) 
 3449/16F0 : 1B                         	db	033o		;DATA 033 		; USER PGM LINE PTR (PG)
 3450/16F1 : 00                         	db	0		;DATA 000 		; USER PGM LINE PTR (LOW)
 3451/16F2 : 00                         	db	0		;DATA 000 		; AUX PGM LINE PTR (PG)
 3452/16F3 : 00                         	db	0		;DATA 000 		; AUX PGM LINE PTR (LOW)
 3453/16F4 : 00                         	db	0		;DATA 000 		; END OF USER PGM BUFFER PTR (PG)
 3454/16F5 : 00                         	db	0		;DATA 000 		; END OF USER PGM BUFFER PTR (LOW)
 3455/16F6 : 00                         	db	0		;DATA 000		; PARENTHESIS COUNTER (366)
 3456/16F7 : 00                         	db	0		;DATA 000		; QUOTE INDICATOR
 3457/16F8 : 00                         	db	0		;DATA 000		; TABLE COUNTER (370)
 3458/16F9 :                            ;;; locations 371-377 NOT ASSIGNED
 3459/16F9 :                            
 3460/16F9 :                            ;	db	(1700h-$) dup 0
 3461/16F9 :                            
 3462/1700 :                            	org	1700h		;ORG 027#000
 3463/1700 : 03                         	db	3		;DATA 3
 3464/1701 :                            ;	db	"REM"		;DATA "REM"
 3465/1701 : D2                         	db	"R"+80h
 3466/1702 : C5                         	db	"E"+80h
 3467/1703 : CD                         	db	"M"+80h
 3468/1704 : 02                         	db	2		;DATA 2
 3469/1705 :                            ;	db	"IF"		;DATA "IF"
 3470/1705 : C9                         	db	"I"+80h
 3471/1706 : C6                         	db	"F"+80h
 3472/1707 : 03                         	db	3		;DATA 3
 3473/1708 :                            ;	db	"LET"		;DATA "LET"
 3474/1708 : CC                         	db	"L"+80h
 3475/1709 : C5                         	db	"E"+80h
 3476/170A : D4                         	db	"T"+80h
 3477/170B : 04                         	db	4		;DATA 4
 3478/170C :                            ;	db	"GOTO"		;DATA "GOTO"
 3479/170C : C7                         	db	"G"+80h
 3480/170D : CF                         	db	"O"+80h
 3481/170E : D4                         	db	"T"+80h
 3482/170F : CF                         	db	"O"+80h
 3483/1710 : 05                         	db	5		;DATA 5
 3484/1711 :                            ;	db	"PRINT"		;DATA "PRINT"
 3485/1711 : D0                         	db	"P"+80h
 3486/1712 : D2                         	db	"R"+80h
 3487/1713 : C9                         	db	"I"+80h
 3488/1714 : CE                         	db	"N"+80h
 3489/1715 : D4                         	db	"T"+80h
 3490/1716 : 05                         	db	5		;DATA 5
 3491/1717 :                            ;	db	"INPUT"		;DATA "INPUT"
 3492/1717 : C9                         	db	"I"+80h
 3493/1718 : CE                         	db	"N"+80h
 3494/1719 : D0                         	db	"P"+80h
 3495/171A : D5                         	db	"U"+80h
 3496/171B : D4                         	db	"T"+80h
 3497/171C : 03                         	db	3		;DATA 3
 3498/171D :                            ;	db	"FOR"		;DATA "FOR"
 3499/171D : C6                         	db	"F"+80h
 3500/171E : CF                         	db	"O"+80h
 3501/171F : D2                         	db	"R"+80h
 3502/1720 : 04                         	db	4		;DATA 4
 3503/1721 :                            ;	db	"NEXT"		;DATA "NEXT"
 3504/1721 : CE                         	db	"N"+80h
 3505/1722 : C5                         	db	"E"+80h
 3506/1723 : D8                         	db	"X"+80h
 3507/1724 : D4                         	db	"T"+80h
 3508/1725 : 05                         	db	5		;DATA 5
 3509/1726 :                            ;	db	"GOSUB"		;DATA "GOSUB"
 3510/1726 : C7                         	db	"G"+80h
 3511/1727 : CF                         	db	"O"+80h
 3512/1728 : D3                         	db	"S"+80h
 3513/1729 : D5                         	db	"U"+80h
 3514/172A : C2                         	db	"B"+80h
 3515/172B : 06                         	db	6		;DATA 6
 3516/172C :                            ;	db	"RETURN"	;DATA "RETURN"
 3517/172C : D2                         	db	"R"+80h
 3518/172D : C5                         	db	"E"+80h
 3519/172E : D4                         	db	"T"+80h
 3520/172F : D5                         	db	"U"+80h
 3521/1730 : D2                         	db	"R"+80h
 3522/1731 : CE                         	db	"N"+80h
 3523/1732 : 03                         	db	3		;DATA 3
 3524/1733 :                            ;	db	"DIM"		;DATA "DIM"
 3525/1733 : C4                         	db	"D"+80h
 3526/1734 : C9                         	db	"I"+80h
 3527/1735 : CD                         	db	"M"+80h
 3528/1736 : 03                         	db	3		;DATA 3
 3529/1737 :                            ;	db	"END"		;DATA "END"
 3530/1737 : C5                         	db	"E"+80h
 3531/1738 : CE                         	db	"N"+80h
 3532/1739 : C4                         	db	"D"+80h
 3533/173A : 00                         	db	0		;DATA 0
 3534/173B :                            
 3535/173B :                            	; END OF TABLE, SHOULD BE 072 3ah
 3536/173B :                            
 3537/173B : 00                         	db	0		;DATA 000		; GOSUB STACK POINTER
 3538/173C : 00                         	db	0		;DATA *1			; NOT ASSIGNED;
 3539/173D : 00                         	db	0		;DATA 000		; NUMBER OF ARRAYS COUNTER
 3540/173E : 00                         	db	0		;DATA 000		; ARRAY POINTER
 3541/173F : 00                         	db	0		;DATA 000		; VARIABLES COUNTER SHOULD BE 077
 3542/1740 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; USED AS THE GOSUB STACK 100-117
 3543/1744 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3544/1748 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3545/174C : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3546/1750 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; USED AS ARRAY VARIABLES TABLE
 3547/1754 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; SHOULD BE 120-137
 3548/1758 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3549/175C : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3550/1760 :                            
 3551/1760 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; USED FOR FOR/NEXT STACK STORAGE
 3552/1764 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000	; SHOULD BE 140 TO 177
 3553/1768 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3554/176C : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3555/1770 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3556/1774 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3557/1778 : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3558/177C : 00 00 00 00                	db	0,0,0,0		;DATA 000,000,000,000
 3559/1780 : 00                         	db	0		;DATA 000		; FOR/NEXT STACK POINTER
 3560/1781 : 00                         	db	0		;DATA 000		; ARRAY/VARIABLE FLAG
 3561/1782 : 00                         	db	0		;DATA 000  		; STOSYM COUNTER
 3562/1783 : 00                         	db	0		;DATA 000		; FUN/ARRAY STACK POINTER (203
 3563/1784 : 00                         	db	0		;DATA 000		; ARRAY VALUES POINTER
 3564/1785 : 00 00 00                   	db	0,0,0		;DATA *3			; NOT USED (SHOULD BE 205-207)
 3565/1788 : 00                         	db	0		;DATA 000		; USED AS VARIABLES SYMBOL TABLE
 3566/1789 : 00 00 00 00 00 00 00 00 00 	db	119 dup (0)	;DATA *119		; (SHOULD BE 211-377 RESERVED)
      1792 : 00 00 00 00 00 00 00 00 00
      179B : 00 00 00 00 00 00 00 00 00
      17A4 : 00 00 00 00 00 00 00 00 00
      17AD : 00 00 00 00 00 00 00 00 00
      17B6 : 00 00 00 00 00 00 00 00 00
      17BF : 00 00 00 00 00 00 00 00 00
      17C8 : 00 00 00 00 00 00 00 00 00
      17D1 : 00 00 00 00 00 00 00 00 00
      17DA : 00 00 00 00 00 00 00 00 00
      17E3 : 00 00 00 00 00 00 00 00 00
      17EC : 00 00 00 00 00 00 00 00 00
      17F5 : 00 00 00 00 00 00 00 00 00
      17FE : 00 00                     
 3567/1800 :                            	;; THERE ARE NOW ADDRESSES AT START OF PAGE 30, NOT ASSIGNED;
 3568/1800 :                            
 3569/1800 :                            ;	db	(1800h-$) dup 0
 3570/1800 :                            
 3571/1800 :                            ;;; The following is PATCH NR.1
 3572/1800 :                                       ORG	1800h	;030#000
 3573/1800 : 36 53                      PATCH1:    MVI	L, 123o
 3574/1802 : 3E 00                                 MVI	M, 000
 3575/1804 : 36 5B                                 MVI	L, 133o
 3576/1806 : 3E 00                                 MVI	M, 000
 3577/1808 : 07                                    RET
 3578/1809 :                            
 3579/1809 :                            ;	db	(180bh-$) dup 0
 3580/1809 :                            
 3581/180B :                                       ORG 	180bh	;030#013
 3582/180B : 36 64                      NEXT:      MVI	L, 144o               ;Load L with start of AUX SYMBOL BUFFER
 3583/180D : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of AUX SYMBOL BUFFER
 3584/180F : 3E 00                                 MVI	M, 000                ;Initialize AUX SYMBOL BUFFER by clearing first byte
 3585/1811 : 36 82                                 MVI	L, 202o               ;Change L to address of SCAN pointer
 3586/1813 : CF                                    MOV	B,M                    ;Fetch pointer value to CPU register B
 3587/1814 : 08                                    INR	B                    ;Add one to the current pointer value
 3588/1815 : 36 81                                 MVI	L, 201o               ;Load L with address of NEXT pointer storage location
 3589/1817 : F9                                    MOV	M,B                    ;Place the updated SCAN pointer as the NEXT pointer
 3590/1818 : 36 81                      NEXT1:     MVI	L, 201o               ;Reset L to address of NEXT pointer storage location
 3591/181A : 46 A0 02                              CALL	GETCHR             ;Fetch the character pointed to by the NEXT pointer
 3592/181D : 68 25 18                              JZ	NEXT2              ;If the character is a space, ignore it
 3593/1820 : 36 64                                 MVI	L, 144o               ;Else, load L with start of AUX SYMBOL BUFFER
 3594/1822 : 46 CC 02                              CALL	CONCT1             ;Concatenate the character onto the AUX SYMBOL BF
 3595/1825 : 36 81                      NEXT2:     MVI	L, 201o               ;Reset L to address of NEXT pointer storage location
 3596/1827 : 46 03 03                              CALL	LOOP               ;Advance the NEXT pointer and see if end of line
 3597/182A : 48 18 18                              JNZ	NEXT1              ;Fetch next character in line if not end of line
 3598/182D : 36 64                                 MVI	L, 144o               ;When reach end of line, should have variable name
 3599/182F : C7                                    MOV	A,M                    ;In the AUX SYMBOL BUFFER. Fetch the (cc) for
 3600/1830 : 3C 01                                 CPI	001                ;The buffer and see if variable name is just one letter
 3601/1832 : 48 39 18                              JNZ	NEXT3              ;If more than one proceed directly to look for name
 3602/1835 : 36 66                                 MVI	L, 146o               ;In FOR/NEXT STACK. If have just a one letter name
 3603/1837 : 3E 00                                 MVI	M, 000                ;Then set second character in buffer to zero
 3604/1839 : 36 85                      NEXT3:     MVI	L, 205o               ;Load L with address of FOR/NEXT STACK pointer
 3605/183B : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of FOR/NEXT STACK pointer
 3606/183D : C7                                    MOV	A,M                    ;Fetch the FOR/NEXT STACK pointer value to ACC
 3607/183E : 02                                    RLC                    ;Rotate value left to multiply by two. Then rotate it
 3608/183F : 02                                    RLC                    ;Left again to multiply by four. Add base address plus
 3609/1840 : 04 5E                                 ADI	136o               ;Two to form pointer to variable name in top of stack
 3610/1842 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of FOR/NEXT STACK
 3611/1844 : F0                                    MOV	L,A                    ;Move pointer value from ACC to CPU register L
 3612/1845 : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Set register D to page of AUX SYMBOL BUFFER
 3613/1847 : 26 65                                 MVI	E, 145o               ;Set register E to first character in the buffer
 3614/1849 : 0E 02                                 MVI	B, 002                ;Set B to serve as a character counter
 3615/184B : 46 F8 02                              CALL	STRCPC             ;See if variable name in the NEXT statement same as
 3616/184E : 68 58 18                              JZ	NEXT4              ;That stored in the top of the FOR/NEXT STACK
 3617/1851 : 06 C6                      FORNXT:    MVI	A, 306o               ;Load ACC with ASCII code for letter F
 3618/1853 : 16 CE                                 MVI	C, 316o               ;Load register C with ASCII code for letter N
 3619/1855 : 44 96 02                              JMP	ERROR              ;Display For/Next (FN) error message if required
 3620/1858 : 36 F0                      NEXT4:     MVI	L, 360o               ;Load L with address of user program line pointer
 3621/185A : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of user pgm line pntr storage loc.
 3622/185C : DF                                    MOV	D,M                    ;Fetch the page portion of the line pointer into D
 3623/185D : 30                                    INR	L                    ;Advance the memory pointer
 3624/185E : E7                                    MOV	E,M                    ;Fetch the low portion of the line pointer into E
 3625/185F : 30                                    INR	L                    ;Advance pntr to AUXILIARY LINE POINTER storage
 3626/1860 : FB                                    MOV	M,D                    ;Location and store value of line pointer there too (page)
 3627/1861 : 30                                    INR	L                    ;Advance pointer to second byte of AUXILIARY line
 3628/1862 : FC                                    MOV	M,E                    ;Pointer and store value of line pointer (low portion)
 3629/1863 : 36 85                                 MVI	L, 205o               ;Load L with address of FOR/NEXT STACK pointer
 3630/1865 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of FOR/NEXT STACK pointer
 3631/1867 : C7                                    MOV	A,M                    ;Fetch the FOR/NEXT STACK pointer value to ACC
 3632/1868 : 02                                    RLC                    ;Rotate value left to multiply by two. Then rotate it
 3633/1869 : 02                                    RLC                    ;Left again to multiply by four. Add base address to
 3634/186A : 04 5C                                 ADI	134o               ;Form pointer to top of FOR/NEXT STACK and place
 3635/186C : F0                                    MOV	L,A                    ;The pointer value into CPU register L. Fetch the page
 3636/186D : DF                                    MOV	D,M                    ;Address of the associated FOR statement line pointer
 3637/186E : 30                                    INR	L                    ;Into register D. Advance the pointer and fetch the low
 3638/186F : E7                                    MOV	E,M                    ;Address value into register E. Prepare to change user
 3639/1870 : 36 F0                                 MVI	L, 360o               ;Program line pointer to the FOR statement line by
 3640/1872 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Setting H & L to the user pgrn line pntr storage loc.
 3641/1874 : FB                                    MOV	M,D                    ;Place the page value in the pointer storage location
 3642/1875 : 30                                    INR	L                    ;Advance the memory pointer
 3643/1876 : FC                                    MOV	M,E                    ;Place the low value in the pointer storage location
 3644/1877 : EB                                    MOV	H,D                    ;Now set up H and L to point to the start of the
 3645/1878 : F4                                    MOV	L,E                    ;Associated FOR statement line in the user pgm buffer
 3646/1879 : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Change D to point to the line input buffer
 3647/187B : 26 00                                 MVI	E, 000                ;And set L to the gtart of the line input buffer
 3648/187D : 46 26 0A                              CALL	MOVEC              ;Move the associated FOR statement line into the input
 3649/1880 : 36 D5                                 MVI	L, 325o               ;Line buffer. Set L to point to start of TO string which is
 3650/1882 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Stored in a text strings storage area on this page
 3651/1884 : 46 0A 0B                              CALL	INSTR              ;Search the statement line for the occurrence of TO
 3652/1887 : C4                                    MOV	A,E                    ;Register E will be zero if TO not found. Move E to ACC
 3653/1888 : A0                                    ANA	A                    ;To make a test. If TO found then proceed to set up for
 3654/1889 : 68 51 18                              JZ	FORNXT             ;Evaluation. If TO not found, then have error condition.
 3655/188C : 04 02                                 ADI	002                ;Advance the pointer over the characters in TO string
 3656/188E : 36 BE                                 MVI	L, 276o               ;Change L to point to EVAL pointer storage location
 3657/1890 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of EVAL pointer. Set up the starting
 3658/1892 : F8                                    MOV	M,A                    ;Position for the EVAL subroutine (after TO string)
 3659/1893 : 36 D8                                 MVI	L, 330o               ;Set L to point to start of STEP string which is stored
 3660/1895 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** In text stxings storage area on this page. Search the
 3661/1897 : 46 0A 0B                              CALL	INSTR              ;Statement line for the occurrence of STEP
 3662/189A : C4                                    MOV	A,E                    ;Register E will be zero if STEP not found. Move E to
 3663/189B : A0                                    ANA	A                    ;The accumulator to make a test. If STEP found must
 3664/189C : 48 C0 18                              JNZ	NEXT5              ;Evaluate expression after STEP to get STEP SIZE.
 3665/189F : 36 04                                 MVI	L, 004                ;Else, have an IMPLIED STEP SIZE of 1.0. Set pointer
 3666/18A1 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** To start of storage area for 1.0 in floating point
 3667/18A3 : 46 A4 12                              CALL	FLOAD              ;Format and call subroutine to load FPACC with 1.0
 3668/18A6 : 36 C4                                 MVI	L, 304o               ;Set L to start of FOR/NEXT STEP SIZE storage loc.
 3669/18A8 : 46 AD 12                              CALL	FSTORE             ;Store the value 1.0 in the F/N STEP SIZE registers
 3670/18AB : 36 00                                 MVI	L, 000                ;Change L to the start of the input line buffer
 3671/18AD : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to the page of the input line buffer
 3672/18AF : CF                                    MOV	B,M                    ;Fetch the (cc) into CPU register B (length of FOR line)
 3673/18B0 : 36 BF                                 MVI	L, 277o               ;Change L to EVAL FINISH pointer stomge location
 3674/18B2 : F9                                    MOV	M,B                    ;Set the EVAL FINISH pointer to the end of the line
 3675/18B3 : 46 94 03                              CALL	EVAL               ;Evaluate the LIMIT expression to obtain FOR LIMIT
 3676/18B6 : 36 C8                                 MVI	L, 310o               ;Load L with address of start of F/N LIMIT registers
 3677/18B8 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of FOR/NEXT LIMIT registers
 3678/18BA : 46 AD 12                              CALL	FSTORE  ;MGA 3/31/12 no lab here Store the FOR/NEXT LIMIT value
 3679/18BD : 44 E9 18                              JMP	NEXT6              ;Since have IMPLIED STEP jump ahead
 3680/18C0 : 21                         NEXT5:     DCR	E  ;MGA 3/21/12 lab here When have STEP directive, subtract one from pointer
 3681/18C1 : 36 BF                                 MVI	L, 277o               ;To get to character before S in STEP. Save this value in
 3682/18C3 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** The EVAL FINISH pointer stomge location to serve
 3683/18C5 : FC                                    MOV	M,E                    ;As evaluation end location when obtaining TO Iiinit
 3684/18C6 : 46 94 03                              CALL	EVAL               ;Evaluate the LIMIT expression to obtain FOR LIMIT
 3685/18C9 : 36 C8                                 MVI	L, 310o               ;Load L with address of start of FIN LIMIT registers
 3686/18CB : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Load H with page of FORINEXT LIMIT registers
 3687/18CD : 46 AD 12                              CALL	FSTORE             ;Store the FOR/NEXT LIMIT value
 3688/18D0 : 36 BF                                 MVI	L, 277o               ;Reset L to EVAL FINISH pointer storage location
 3689/18D2 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of EVAL FINISH pointer storage loc.
 3690/18D4 : C7                                    MOV	A,M                    ;Fetch the pointer value (character before S in STEP)
 3691/18D5 : 04 05                                 ADI	005                ;Add five to change pointer to character after P in STEP
 3692/18D7 : 31                                    DCR	L                    ;Decrement L to point to EVAL (start) pointer
 3693/18D8 : F8                                    MOV	M,A                    ;Set up the starting position for the EVAL subroutine
 3694/18D9 : 36 00                                 MVI	L, 000                ; Load L with starting address of the line input buffer
 3695/18DB : CF                                    MOV	B,M                    ;Fetch the (cc) for the line input buffer (line length)
 3696/18DC : 36 BF                                 MVI	L, 277o               ;Change L to the EVAL FINISH storage location
 3697/18DE : F9                                    MOV	M,B                    ;Set the EVAL FINISH pointer
 3698/18DF : 46 94 03                              CALL	EVAL               ;Evaluate the STEP SIZE expression
 3699/18E2 : 36 C4                                 MVI	L, 304o               ;Load L with address of start of F/N STEP registers
 3700/18E4 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of FIN STEP registers
 3701/18E6 : 46 AD 12                              CALL	FSTORE             ;Store the FOR/NEXT STEP SIZE value
 3702/18E9 : 36 64                      NEXT6:     MVI	L, 144o               ;Load L with address of AUX SYMBOL BUFFER
 3703/18EB : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of the AUX SYMBOL BUFFER
 3704/18ED : 3E 00                                 MVI	M, 000                ;Initialize AUX SUMBOL BUFFER with a zero byte
 3705/18EF : 36 1C                                 MVI	L, 034o               ;Set L to start of FOR string which is stored in the
 3706/18F1 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** KEYWORD look-up table on this page
 3707/18F3 : 46 0A 0B                              CALL	INSTR              ;Search the statement line for the FOR directive
 3708/18F6 : C4                                    MOV	A,E                    ;Register E will be zero if FOR not found. Move E to
 3709/18F7 : A0                                    ANA	A                    ;ACC and -make test to see if FOR directive located
 3710/18F8 : 36 82                                 MVI	L, 202o               ;Load L with address of SCAN pointer
 3711/18FA : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of SCAN pointer
 3712/18FC : F8                                    MOV	M,A                    ;Set up pointer to occurrence of FOR directive in line
 3713/18FD : 68 51 18                              JZ	FORNXT             ;If FOR not found, have an error condition
 3714/1900 : 04 03                                 ADI	003                ;If have FOR, add three to advance pointer over FOR
 3715/1902 : 36 83                                 MVI	L, 203o               ;Set L to point to F/N pointer storage location
 3716/1904 : F8                                    MOV	M,A                    ;Set F/N pointer to character after FOR directive
 3717/1905 : 36 83                      NEXT7:     MVI	L, 203o               ;Set L to point to FIN pointer storage location
 3718/1907 : 46 A0 02                              CALL	GETCHR             ;Fetch a character from position pointed to by FIN pntr
 3719/190A : 68 17 19                              JZ	NEXT8              ;If character is a space, ignore it
 3720/190D : 3C BD                                 CPI	275o               ;Else, test to see if character is "=" sign
 3721/190F : 68 22 19                              JZ	NEXT9              ;If yes, have picked up variable name, jump ahead
 3722/1912 : 36 64                                 MVI	L, 144o               ;If not, set L to the start of the AUX SYMBOL BUFFER
 3723/1914 : 46 CC 02                              CALL	CONCT1             ;And store the character in the AUX SYMBOL BUFFER
 3724/1917 : 36 83                      NEXT8:     MVI	L, 203o               ;Load L with address of the F/N pointer
 3725/1919 : 46 03 03                              CALL	LOOP               ;Increment the pointer and see if end of the line
 3726/191C : 48 05 19                              JNZ	NEXT7              ;If not, continue fetching characters
 3727/191F : 44 51 18                              JMP	FORNXT             ;If end of line before "=" sign then have error condx
 3728/1922 : 36 82                      NEXT9:     MVI	L, 202o               ;Load L with address of SCAN pointer
 3729/1924 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of SCAN pointer
 3730/1926 : C7                                    MOV	A,M                    ;Fetch pointer value to ACC (points to start of FOR
 3731/1927 : 04 03                                 ADI	003                ;Directive) and add three to move pointer over FOR
 3732/1929 : 36 BE                                 MVI	L, 276o               ;Directive. Change L to EVAL pointer storage location
 3733/192B : F8                                    MOV	M,A                    ;Set EVAL pointer to character after FOR in line
 3734/192C : 36 83                                 MVI	L, 203o               ;Load L with address of FIN pointer storage location
 3735/192E : CF                                    MOV	B,M                    ;Fetch pointer to register B (points to "=" sign) and
 3736/192F : 09                                    DCR	B                    ;Decrement the pointer (to character before "=" sign)
 3737/1930 : 36 BF                                 MVI	L, 277o               ;Load L with address of EVAL FINISH pointer
 3738/1932 : F9                                    MOV	M,B                    ;Set EVAL FINISH pointer
 3739/1933 : 46 94 03                              CALL	EVAL               ;Call subroutine to obtain current value of the variable
 3740/1936 : 36 C4                                 MVI	L, 304o               ;Load L with address of start of F/N STEP registers
 3741/1938 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of F/N STEP registers
 3742/193A : 46 BF 12                              CALL	FACXOP             ;Call subroutine to set up FP registers for addition
 3743/193D : 46 89 10                              CALL	FPADD              ;Add FIN STEP size to current VARIABLE value
 3744/1940 : 36 CC                                 MVI	L, 314o               ;Load L with address of FIN TEMP storage registers
 3745/1942 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;**Set H to page of FIN TEMP storage registers
 3746/1944 : 46 AD 12                              CALL	FSTORE             ;Save the result of the addition in F/N TEMP registers
 3747/1947 : 36 C8                                 MVI	L, 310o               ;Load L with starting address of F/N LIMIT registers
 3748/1949 : 46 BF 12                              CALL	FACXOP             ;Call subroutine to set up FP registers for subtraction
 3749/194C : 46 1A 11                              CALL	FPSUB              ;Subtract F/N LIMIT value from VARIABLE value
 3750/194F : 36 C6                                 MVI	L, 306o               ;Set pointer to MSW of F/N STEP registers
 3751/1951 : C7                                    MOV	A,M                    ;Fetch this value into the ACC
 3752/1952 : A0                                    ANA	A                    ;Test to see if STEP value might be zero
 3753/1953 : 36 56                                 MVI	L, 126o               ;Load L with address of MSW of FPACC
 3754/1955 : C7                                    MOV	A,M                    ;Fetch this value into the ACC
 3755/1956 : 68 51 18                              JZ	FORNXT             ;If STEP size was zero, then endless loop, an error condx
 3756/1959 : 70 78 19                              JM	NEXT11             ;If STEP size less than zero make alternate test on limit
 3757/195C : A0                                    ANA	A                    ;Test the contents of the MSW of the FPACC
 3758/195D : 70 7F 19                              JM	NEXT12             ;Continue FORINEXT loop if current variable value is
 3759/1960 : 68 7F 19                              JZ	NEXT12             ;Less than or equal to the F/N LIMIT value
 3760/1963 : 36 F3                      NEXT10:    MVI	L, 363o               ;If out of LIMIT range, load L with address of the AUX
 3761/1965 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** PGM LINE pointer. (Contains pointer to the NEXT
 3762/1967 : E7                                    MOV	E,M                    ;Statement line that initiated this routine.) Fetch the
 3763/1968 : 31                                    DCR	L                    ;Low part of the address into E, decrement the memory
 3764/1969 : DF                                    MOV	D,M                    ;And get the page part of the address into CPU register
 3765/196A : 31                                    DCR	L                    ;Decrement memory pointer to the low portion of the
 3766/196B : FC                                    MOV	M,E                    ;User pgm buffer line pointer (regular pointer) and set it
 3767/196C : 31                                    DCR	L                    ;With the value from the AUX line pntr, decrement the
 3768/196D : FB                                    MOV	M,D                    ;Pointer and do the same for the page portion
 3769/196E : 36 85                                 MVI	L, 205o               ;Set L to address of FOR/NEXT STACK pointer
 3770/1970 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of FOR/NEXT STACK pointer
 3771/1972 : CF                                    MOV	B,M                    ;Fetch and decrement the
 3772/1973 : 09                                    DCR	B                    ;FOR/NEXT STACK pointer value
 3773/1974 : F9                                    MOV	M,B                    ;To perform effective popping operation
 3774/1975 : 44 4E 0B                              JMP	NXTLIN             ;Statement line after NEXT statement is done next
 3775/1978 : A0                         NEXT11:    ANA	A                    ;When F/N STEP is negative, reverse test so that if the
 3776/1979 : 50 7F 19                              JP	NEXT12             ;Variable value is greater than or equal to the F/N LIMIT
 3777/197C : 44 63 19                              JMP	NEXT10             ;The FOR/NEXT loop continues. Else it is finished.
 3778/197F : 36 CC                      NEXT12:    MVI	L, 314o               ;Load L with address of FIN TEMP storage registers
 3779/1981 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to FIN TEMP storage registers page
 3780/1983 : 46 A4 12                              CALL	FLOAD              ;Transfer the updated variable value to the FPACC
 3781/1986 : 46 AA 08                              CALL	RESTSY             ;Restore the variable name and value
 3782/1989 : 46 2D 08                              CALL	STOSYM             ;In the VARIABLES table. Exit routine so that
 3783/198C : 44 4E 0B                              JMP	NXTLIN             ;Statement line after FOR statement is done next
 3784/198F :                            
 3785/198F :                            ;;; The label BACKSP SHOULD BE AT 31 217 198fh
 3786/198F :                            
 3787/198F : 06 8D                      BACKSP:    MVI	A, 215o               ;Load ASCII code for carriage-return into the ACC
 3788/1991 : 46 82 03                              CALL	ECHO               ;Display the carriage-return
 3789/1994 : 46 82 03                              CALL	ECHO               ;Repeat to provide extra time if TTY
 3790/1997 : 36 23                                 MVI	L, 043o               ;Load L with address of COLUMN COUNTER
 3791/1999 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of COLUMN COUNTER
 3792/199B : 3E 01                                 MVI	M, 001                ;Set COLUMN COUNTER to first column
 3793/199D : 36 54                                 MVI	L, 124o               ;Set L to address containing desired TAB position
 3794/199F : C7                                    MOV	A,M                    ;Fetch the desired TAB position value
 3795/19A0 : A0                                    ANA	A                    ;Test to see if it is
 3796/19A1 : 33                                    RM                    ;Negative or zero
 3797/19A2 : 2B                                    RZ                    ;In which case return to caller
 3798/19A3 : 44 12 08                              JMP	TAB1               ;Else, proceed to perform the TAB operation.
 3799/19A6 :                            
 3800/19A6 :                            	
 3801/19A6 :                            ;;; The label FOR5 SHOULD START AT 31 246 19a6h
 3802/19A6 :                            	
 3803/19A6 : 36 85                      FOR5:      MVI	L, 205o               ;Load L with address of the FOR/NEXT STACK pointer
 3804/19A8 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of the FOR/NEXT STACK pntr
 3805/19AA : C7                                    MOV	A,M                    ;Fetch the stack pointer to the ACC.
 3806/19AB : 02                                    RLC                    ;Rotate it left to multiply by two, then rotate it again to
 3807/19AC : 02                                    RLC                    ;Multiply by four. Add this value to the base address
 3808/19AD : 04 5E                                 ADI	136o               ;Plus two of the base address to point to the next part of
 3809/19AF : E0                                    MOV	E,A                    ;The FOR/NEXT STACK. Place this value in register E.
 3810/19B0 : DD                                    MOV	D,H                    ;Set D to the FORINEXT STACK area page.
 3811/19B1 : 36 65                                 MVI	L, 145o               ;Load L with the address of the first character in the
 3812/19B3 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** AUX SYMBOL BUFFER and set up H to this page.
 3813/19B5 : 0E 02                                 MVI	B, 002                ;Set up register B as a number of bytes to move counter.
 3814/19B7 : 46 0B 11                              CALL	MOVEIT             ;Move the variable name into the FOR/NEXT STACK.
 3815/19BA : 46 2D 08                              CALL	STOSYM             ;Store initial variable value in the VARIABLES TABLE.
 3816/19BD : 44 4E 0B                              JMP	NXTLIN             ;Continue with next line in user program buffer.
 3817/19C0 :                            
 3818/19C0 :                            
 3819/19C0 :                            ;;; The label PARSEP SHOULD START AT 31 300 19c0h
 3820/19C0 : 36 7E                      PARSEP:    MVI	L, 176o               ;Load L with PARSER TOKEN storage location. Set
 3821/19C2 : 3E 00                                 MVI	M, 000                ;The value indicating end of expression. Call the
 3822/19C4 : 46 D4 04                              CALL	PARSER             ;PARSER subroutine for final time for the expression.
 3823/19C7 : 36 97                                 MVI	L, 227o               ;Change L to point to the ARITH STACK pointer.
 3824/19C9 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to the page of the ARITH STACK pointer.
 3825/19CB : C7                                    MOV	A,M                    ;Fetch the ARITH STACK pointer value.
 3826/19CC : 3C 98                                 CPI	230o               ;Should indicate only one value (answer) in stack.
 3827/19CE : 2B                                    RZ                    ;Exit with answer in FPACC if ARITH STACK is O.K.
 3828/19CF : 44 6A 09                              JMP	SYNERR             ;Else have a syntax error!
 3829/19D2 :                            
 3830/19D2 :                            
 3831/19D2 :                            ;;; THERE IS SOME BLANK ADDRESSES HERE 317-NEXT PAGE
 3832/19D2 :                            
 3833/19D2 :                            ;	db	(1a00h-$) dup 0
 3834/19D2 :                            
 3835/1A00 :                                       ORG	1a00h	; 032#000
 3836/1A00 : 36 0C                      SQRX:      MVI	L, 014o               ;Load L with address of FP TEMP registers
 3837/1A02 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of FP TEMP. Move contents of FPACC
 3838/1A04 : 46 AD 12                              CALL	FSTORE             ;[Argument of SQR(X)] into FP TEMP for storage.
 3839/1A07 : 36 56                                 MVI	L, 126o               ;Load L with MSW of FPACC
 3840/1A09 : C7                                    MOV	A,M                    ;Fetch the MSW into the accumulator
 3841/1A0A : A0                                    ANA	A                    ;Check the sign of the number in the FPACC
 3842/1A0B : 70 8F 1A                              JM	SQRERR             ;If number negative, cannot take square root
 3843/1A0E : 68 A7 06                              JZ	CFALSE             ;If number is zero, return with zero value in FPACC
 3844/1A11 : 36 0F                                 MVI	L, 017o               ;Load L with address of FP TEMP Exponent register
 3845/1A13 : C7                                    MOV	A,M                    ;Fetch the Exponent value into the ACC
 3846/1A14 : A0                                    ANA	A                    ;Check sign of the Fxponent
 3847/1A15 : 70 21 1A                              JM	NEGEXP             ;If Exponent less than zero, process negative Exponent
 3848/1A18 : 1A                                    RAR                    ;If Exponent positive, rotate right to divide by two
 3849/1A19 : C8                                    MOV	B,A                    ;And save the result in CPU register B
 3850/1A1A : 06 00                                 MVI	A, 000                ;Clear the accumulator without disturbing Carry bit
 3851/1A1C : 12                                    RAL                    ;Rotate Carry bit into the ACC to save remainder
 3852/1A1D : F8                                    MOV	M,A                    ;Store the remainder back in FP TEMP Exponent reg.
 3853/1A1E : 44 32 1A                              JMP	SQREXP             ;Jump to continue processing
 3854/1A21 : C8                         NEGEXP:    MOV	B,A                    ;For negative Exponent, form two Is complement by
 3855/1A22 : A8                                    XRA	A                    ;Placing the positive value in CPU register B, clearing
 3856/1A23 : 91                                    SUB	B                    ;The accumulator, and then subtracting B from the ACC
 3857/1A24 : A0                                    ANA	A                    ;Clear the Carry bit after the complementing operation
 3858/1A25 : 1A                                    RAR                    ;Rotate the value right to divide by two
 3859/1A26 : C8                                    MOV	B,A                    ;Save the result in CPU register B
 3860/1A27 : 06 00                                 MVI	A, 000                ;Clear the accumulator without disturbing Carry bit
 3861/1A29 : 88                                    ADC	A                    ;Add Carry bit to the accumulator as remainder
 3862/1A2A : F8                                    MOV	M,A                    ;Store the remainder back in FP TEMP Exponent reg
 3863/1A2B : 68 2F 1A                              JZ	NOREMD             ;If remainder was zero skip ahead. If not, increment the
 3864/1A2E : 08                                    INR	B                    ;Result of the divide by two ops to compen for negative
 3865/1A2F : A8                         NOREMD:    XRA	A                    ;Clear the accumulator
 3866/1A30 : 91                                    SUB	B                    ;Subtract the quotient of the divide by two op to
 3867/1A31 : C8                                    MOV	B,A                    ;Form two's complement and save the result in register B
 3868/1A32 : 36 0B                      SQREXP:    MVI	L, 013o               ;Load L with address of TEMP register
 3869/1A34 : F9                                    MOV	M,B                    ;Store Fxponent quotient from above ops in TEMP
 3870/1A35 : 36 04                                 MVI	L, 004                ;Load L with address of FP registers containing +1.0
 3871/1A37 : 26 1C                                 MVI	E, 034o               ;Load E with address of SQR APPROX working registers
 3872/1A39 : DD                                    MOV	D,H                    ;Set D to same page as H
 3873/1A3A : 0E 04                                 MVI	B, 004                ;Set up register B as a number of bytes to move counter
 3874/1A3C : 46 0B 11                              CALL	MOVEIT             ;Transfer value +1.0 into SQR APPROX registers
 3875/1A3F : 46 A7 06                              CALL	CFALSE             ;Now clear the FPACC registers
 3876/1A42 : 36 24                                 MVI	L, 044o               ;Load L with address of LAST SQR APPROX temp regs.
 3877/1A44 : 46 AD 12                              CALL	FSTORE             ;Initialize the LAST SQR APPROX regs to value of zero
 3878/1A47 : 36 1C                      SQRLOP:    MVI	L, 034o               ;Load L with address of SQR APPROX working registers
 3879/1A49 : 46 A4 12                              CALL	FLOAD              ;Transfer SQR APPROX into the FPACC
 3880/1A4C : 36 0C                                 MVI	L, 014o               ;Load L with address of SQR ARG storage registers
 3881/1A4E : 46 B6 12                              CALL	OPLOAD             ;Transfer SQR ARG into the FPOP
 3882/1A51 : 46 D2 11                              CALL	FPDIV              ;Divde SQR ARG by SQR APPROX (Fon-n X/A)
 3883/1A54 : 36 1C                                 MVI	L, 034o               ;Load L with address of SQR APPROX registers
 3884/1A56 : 46 B6 12                              CALL	OPLOAD             ;Transfer SQR APPROX into the FPOP
 3885/1A59 : 46 89 10                              CALL	FPADD              ;Add to form value (X/A + A)
 3886/1A5C : 36 57                                 MVI	L, 127o               ;Load L with address of FPACC Exponent register
 3887/1A5E : CF                                    MOV	B,M                    ;Fetch Exponent value into CPU register B
 3888/1A5F : 09                                    DCR	B                    ;Subtract one to effectively divide FPACC by two
 3889/1A60 : F9                                    MOV	M,B                    ;Restore to memory. (Now have ((X/A + A) /2)
 3890/1A61 : 36 1C                                 MVI	L, 034o               ;Load L with address of SQR APPROX registers
 3891/1A63 : 46 AD 12                              CALL	FSTORE             ;Store contents of FPACC as new SQR APPROX
 3892/1A66 : 36 24                                 MVI	L, 044o               ;Load L with address of LAST SQR APPROX registers
 3893/1A68 : 46 B6 12                              CALL	OPLOAD             ;Transfer LAST SQR APPROX into the FPOP
 3894/1A6B : 46 1A 11                              CALL	FPSUB              ;Subtract (LAST SQR APPROX - SQR APPROX)
 3895/1A6E : 36 57                                 MVI	L, 127o               ;Load L with address of FPACC Exponent
 3896/1A70 : C7                                    MOV	A,M                    ;Fetch the Exponent into the accumulator
 3897/1A71 : 3C F7                                 CPI	367o                ;See if difference less than 2 to the minus ninth
 3898/1A73 :                            ;;; The below is changed for PATCH 2
 3899/1A73 :                            ;;; following is the original code
 3900/1A73 :                            ;;;           JTS SQRCNV             ;If so, approximation has converged
 3901/1A73 :                            ;;; Now is the new line
 3902/1A73 : 44 F4 1A                   	   JMP	PATCH2
 3903/1A76 :                            ;;;;           DCR L
 3904/1A76 :                            ;;;;           MOV A,M
 3905/1A76 :                            ;;;;           ANA A
 3906/1A76 :                            ;;;;           JZ SQRCNV             ;THIS IS PATCH #2
 3907/1A76 : 36 1C                      SQR1:	   MVI	L, 034o               ;Else, load L with address of SQR APPROX
 3908/1A78 : DD                                    MOV	D,H                    ;Set D to same page as H
 3909/1A79 : 26 24                                 MVI	E, 044o               ;And E with address of LAST SQR APPROX
 3910/1A7B : 0E 04                                 MVI	B, 004o               ;Set up register B as a number of bytes to move counter
 3911/1A7D : 46 0B 11                              CALL	MOVEIT             ;Transfer SQR APPROX into LAST SQR APPROX
 3912/1A80 : 44 47 1A                              JMP	SQRLOP             ;Continue ops until approximation converges
 3913/1A83 : 36 0B                      SQRCNV:    MVI	L, 013o               ;Load L with address of TEMP register. Fetch the
 3914/1A85 : C7                                    MOV	A,M                    ;Exponenent quotient store there into accumulator.
 3915/1A86 : 36 1F                                 MVI	L, 037o               ;Change L to point to SQR APPROX exponent.
 3916/1A88 : 87                                    ADD	M                    ;Add SQR APPROX exponent to quotient value.
 3917/1A89 : F8                                    MOV	M,A                    ;Store sum back in SQR APPROX Exponent register.
 3918/1A8A : 36 1C                                 MVI	L, 034o               ;Load L with address of SQR APPROX. Transfer the
 3919/1A8C : 44 A4 12                              JMP	FLOAD              ;SQR APPROX into FPACC as answer and exit.
 3920/1A8F : 06 D3                      SQRERR:    MVI	A, 323o               ;Load ASCII code for letter S into the accumulator.
 3921/1A91 : 16 D1                                 MVI	C, 321o               ;Load ASCII code for letter Q into CPU register C.
 3922/1A93 : 44 96 02                              JMP	ERROR              ;Display the SQuare root (SQ) error message.
 3923/1A96 :                            ;;; above instruction starts at 223
 3924/1A96 :                            ;;; some blank addresses available here.
 3925/1A96 :                            
 3926/1A96 :                            ;	db	(1aa0h-$) dup 0
 3927/1A96 :                            
 3928/1AA0 :                                       ORG	1aa0h              ; 032#240
 3929/1AA0 : 36 34                      RNDX:      MVI	L, 064o               ;Load L with address of SEED storage registers
 3930/1AA2 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page for floating point working registers
 3931/1AA4 : 46 A4 12                              CALL	FLOAD              ;Transfer SEED into the FPACC
 3932/1AA7 : 36 28                                 MVI	L, 050o               ;Load L with address of random constant A
 3933/1AA9 : 46 B6 12                              CALL	OPLOAD             ;Transfer random constant A into the FPOP
 3934/1AAC : 46 26 11                              CALL	FPMULT             ;Multiply to form (SEED * A)
 3935/1AAF : 36 30                                 MVI	L, 060o               ;Load L with address of random constant C
 3936/1AB1 : 46 B6 12                              CALL	OPLOAD             ;Transfer random constant C into the FPOP
 3937/1AB4 : 46 89 10                              CALL	FPADD              ;Add to fom (SEED * A) + C
 3938/1AB7 : 36 34                                 MVI	L, 064o               ;Load L with address of SEED storage registers
 3939/1AB9 : 46 AD 12                              CALL	FSTORE             ;Store I (SEED * A) + C] in former SEED registers
 3940/1ABC : 36 57                                 MVI	L, 127o               ;Load L with address of FPACC Exponent register
 3941/1ABE : C7                                    MOV	A,M                    ;Fetch Exponent value into the accumulator
 3942/1ABF : 14 10                                 SUI	020o               ;Subtract 16 (decimal) to effectively divide by 65,536
 3943/1AC1 : F8                                    MOV	M,A                    ;Now FPACC = [((SEED * A) + C)/65,536]
 3944/1AC2 : 46 00 10                              CALL	FPFIX              ;Convert floating to fixed point to obtain integer part
 3945/1AC5 : 36 53                                 MVI	L, 123o               ;Load L with address of FPACC Extension register
 3946/1AC7 : 3E 00                                 MVI	M, 000                ;Clear the FPACC Extension register
 3947/1AC9 : 36 57                                 MVI	L, 127o               ;Load L with address of FPACC Exponent
 3948/1ACB : 3E 00                                 MVI	M, 000                ;Clear the FPACC Exponent register
 3949/1ACD : 46 34 10                              CALL	FPFLT              ;Fetch INT(((SEED * A) + C)/65,536) into the FPACC
 3950/1AD0 : 36 57                                 MVI	L, 127o               ;Load L with address of FPACC Exponent
 3951/1AD2 : C7                                    MOV	A,M                    ;Fetch FPACC Exponent into the accumulator
 3952/1AD3 : 04 10                                 ADI	020o               ;Add 16 (decimal) to effectively multiply by 65,536
 3953/1AD5 : F8                                    MOV	M,A                    ;(65,536 * INT[ ((SEED * A) + C)/65,5361) in FPACC
 3954/1AD6 : 36 34                                 MVI	L, 064o               ;Load L with address of [(SEED * A) + C]
 3955/1AD8 : 46 B6 12                              CALL	OPLOAD             ;Transfer it into FPOP. Subtract FPACC to form
 3956/1ADB : 46 1A 11                              CALL	FPSUB              ;[(SEED * A) + C] MOD 65,536
 3957/1ADE : 36 34                                 MVI	L, 064o               ;Load L with address of former SEED registers
 3958/1AE0 : 46 AD 12                              CALL	FSTORE             ;Store SEED MOD 65,536 in place of [(SEED * A) + Cl
 3959/1AE3 : 36 57                                 MVI	L, 127o               ;Load L with address of FPACC Exponent
 3960/1AE5 : C7                                    MOV	A,M                    ;Fetch FPACC Exponent into the ACC and subtract
 3961/1AE6 : 14 10                                 SUI	020o               ;16 (decimal) to form (SEED MOD 65,536)/65,536
 3962/1AE8 : F8                                    MOV	M,A                    ;So that random number in FPACC is between
 3963/1AE9 : 07                                    RET                    ;0.0 and +1.0 and exit to calling routine
 3964/1AEA :                            ;;; THE ABOVE RETURN SHOULD BE 32 351 1ae9h
 3965/1AEA :                            
 3966/1AEA :                            
 3967/1AEA :                            ;;; NOTE OPEN ADDRESSES TO END OF PAGE 32
 3968/1AEA :                            
 3969/1AEA :                            ;;; following is PATCH 2
 3970/1AEA :                            
 3971/1AEA :                            ;	db	(1af4h-$) dup 0
 3972/1AEA :                            
 3973/1AF4 :                            	ORG	1af4h	; 032#364
 3974/1AF4 : 70 83 1A                   PATCH2	JM	SQRCNV
 3975/1AF7 : 31                         	DCR	L
 3976/1AF8 : C7                         	MOV	A,M
 3977/1AF9 : A0                         	ANA	A
 3978/1AFA : 68 83 1A                   	JZ	SQRCNV
 3979/1AFD : 44 76 1A                   	JMP	SQR1
 3980/1B00 :                            ;;; The above jump should start at 32 375 1afdh
 3981/1B00 :                            	
 3982/1B00 :                            
 3983/1B00 :                            	;; PAGES 33 TO REMAINDER OF MEMORY
 3984/1B00 :                            	;; OR START OF OPTIONAL ARRAY HANDLING
 3985/1B00 :                            	;; ROUTINES USED AS USER PROGRAM BUFFER
 3986/1B00 :                            
 3987/1B00 :                            
 3988/1B00 :                            
 3989/1B00 :                            	;; OPTIONAL ARRAY ROUTINES ASSEMBLED FOR OPERATION
 3990/1B00 :                            	;; IN THE UPPER 3 PAGES OF A 12K SYSTEM ARE LISTED HERE.
 3991/1B00 :                            
 3992/1B00 :                            ;	db	(2d00h-$) dup 0
 3993/1B00 :                            
 3994/2D00 :                                       ORG 2d00h              ; 055#000
 3995/2D00 :                            
 3996/2D00 : 36 56                      PRIGH1:    MVI	L, 126o               ;Load L with address of the MSW in the FPACC
 3997/2D02 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of FPACC
 3998/2D04 : C7                                    MOV	A,M                    ;Fetch MSW of FPACC into the ACC.
 3999/2D05 : A0                                    ANA	A                    ;Test to see if value in FPACC is positive.
 4000/2D06 : 70 5E 2D                              JM	OUTRNG             ;If not, go display error message.
 4001/2D09 : 46 00 10                              CALL	FPFIX              ;If O.K. then convert floating point to fixed point
 4002/2D0C : 36 54                                 MVI	L, 124o               ;Load L with address of LSAL of converted value
 4003/2D0E : C7                                    MOV	A,M                    ;Fetch the LSW of the value into the ACC
 4004/2D0F : 14 01                                 SUI	001                ;Subtract one from the value to establish proper
 4005/2D11 : 02                                    RLC                    ;Origin for future ops. Now rotate the value twice
 4006/2D12 : 02                                    RLC                    ;To effectively multiply by four. Save the
 4007/2D13 : D0                                    MOV	C,A                    ;Calculated result in CPU register C
 4008/2D14 : 36 83                                 MVI	L, 203o               ;Load L with address of F/A STACK TEMP
 4009/2D16 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of F/A STACK TEMP
 4010/2D18 : C7                                    MOV	A,M                    ;Fetch the value into the accumulator
 4011/2D19 : 2C FF                                 XRI	377o               ;Complement the value
 4012/2D1B : 02                                    RLC                    ;Rotate the value twice to multiply by four (the number
 4013/2D1C : 02                                    RLC                    ;Of bytes per entry in the ARRAY VARIABLES table).
 4014/2D1D : 04 50                                 ADI	120o               ;Add the starting address of the ARRAY VARIABLES
 4015/2D1F : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** TABLE to forin pointer. Set page address in H.
 4016/2D21 : F0                                    MOV	L,A                    ;Point to the name in the ARRAY VARIABLES
 4017/2D22 : 30                                    INR	L                    ;Increment the pointer value twice to move over the
 4018/2D23 : 30                                    INR	L                    ;Name in the table and point to starting address for the
 4019/2D24 : C7                                    MOV	A,M                    ;Array values in the ARRAY VALUES table. Fetch this
 4020/2D25 : 82                                    ADD	C                    ;Address to the ACC. Now add in the figure calculated
 4021/2D26 : F0                                    MOV	L,A                    ;To reach desired subscripted data storage location. Set
 4022/2D27 : 2E 2F                                 MVI	H,PG57 ;\HB\OLDPG57   ;tt The pointer to that location. Load the floating point
 4023/2D29 : 44 A4 12                              JMP	FLOAD              ;Value stored there into the FPACC and exit to caller.
 4024/2D2C :                            
 4025/2D2C :                            
 4026/2D2C :                            ;;; The label FUNAR2 SHOULD START AT 55-054 2d2ch
 4027/2D2C : 36 82                      FUNAR2:    MVI	L, 202o               ;Load L with address of TEMP COUNTER
 4028/2D2E : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of counter
 4029/2D30 : CF                                    MOV	B,M                    ;Fetch the counter value
 4030/2D31 : 08                                    INR	B                    ;Increment the value
 4031/2D32 : F9                                    MOV	M,B                    ;Restore the value to memory
 4032/2D33 : 16 02                                 MVI	C, 002                ;Initialize register C to a value of two for future ops
 4033/2D35 : 36 4C                                 MVI	L, 114o               ;Load L with address of start of ARRAY VARIABLES
 4034/2D37 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** TABLE (less four). Set H to page of the table.
 4035/2D39 : 46 98 07                              CALL	TABADR             ;Calculate address of start of next narne in table.
 4036/2D3C : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Load D with page of the SYMBOL BUFFER
 4037/2D3E : 26 50                                 MVI	E, 120o               ;Set E to starting address of the SYMBOL BUFFER
 4038/2D40 : 46 DA 02                              CALL	STRCP              ;Compare name in ARRAY VARIABLES table to the
 4039/2D43 : 68 54 2D                              JZ	FUNAR3             ;Contents of the SYMBOL BUFFER. If match, go set up
 4040/2D46 : 36 82                                 MVI	L, 202o               ;Array token value. Else, reset L to address of TEMP
 4041/2D48 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** COUNTER. Set H to page of TEMP COUNTER.
 4042/2D4A : C7                                    MOV	A,M                    ;Fetch the counter value into the accumulator.
 4043/2D4B : 36 3D                                 MVI	L, 075o               ;Change L to number of arrays storage location.
 4044/2D4D : BF                                    CMP	M                    ;Compare number of entries checked against number
 4045/2D4E : 48 2C 2D                              JNZ	FUNAR2             ;Possible. Keep searching table if not finished.
 4046/2D51 : 44 7A 07                              JMP	FAERR              ;If finished and no match than have F/A error condx.
 4047/2D54 : 36 82                      FUNAR3:    MVI	L, 202o               ;Load L with address of TEMP COUNTER
 4048/2D56 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Load H with page of counter.
 4049/2D58 : A8                                    XRA	A                    ;Clear the accumulator. Subtract the value in the TEMP
 4050/2D59 : 9F                                    SBB	M                    ;COUNTER from zero to obtain two's complement.
 4051/2D5A : F8                                    MOV	M,A                    ;Place this back in counter location as ARRAY TOKEN
 4052/2D5B : 44 87 07                              JMP	FUNAR4             ;VALUE (negative). Go place the value on F/A STACK.
 4053/2D5E :                            
 4054/2D5E :                            
 4055/2D5E :                            ;;; The label OUTRNG STARTS AT 55 136 2d5eh
 4056/2D5E : 06 CF                      OUTRNG:    MVI	A, 317o               ;Load the ASCII code for letter 0 into the accumulator
 4057/2D60 : 16 D2                                 MVI	C, 322o               ;Load the ASCII code for letter R into register C
 4058/2D62 : 44 96 02                              JMP	ERROR              ;Go display Out of Range (OR) error message.
 4059/2D65 :                            
 4060/2D65 :                            
 4061/2D65 :                            
 4062/2D65 :                            
 4063/2D65 : 46 AA 08                   ARRAY:     CALL	RESTSY             ;Transfer contents of AUX SYMBOL BUFFER into the
 4064/2D68 : 44 70 2D                              JMP	ARRAY2             ;SYMBOL BUFFER. (Entry when have actual LET)
 4065/2D6B : 36 82                      ARRAY1:    MVI	L, 202o               ;Load L with address of SCAN pointer
 4066/2D6D : 44 72 2D                              JMP	ARRAY3             ;Proceed to process. (Entry point for IMPLIED LET)
 4067/2D70 : 36 83                      ARRAY2:    MVI	L, 203o               ;Load L with address of LET pointer
 4068/2D72 : 2E 16                      ARRAY3:    MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to pointer page
 4069/2D74 : CF                                    MOV	B,M                    ;Fetch pointer to location where "(" found in statement
 4070/2D75 : 08                                    INR	B                    ;Line. Increment it to point to next character in the line.
 4071/2D76 : 36 BE                                 MVI	L, 276o               ;Load L with address of EVAL pointer and load it with
 4072/2D78 : F9                                    MOV	M,B                    ;The starting address for the EVAL routine
 4073/2D79 : 36 86                                 MVI	L, 206o               ;Change L to address of ARRAY SETUP pointer
 4074/2D7B : F9                                    MOV	M,B                    ;And also store address in that location
 4075/2D7C : 36 86                      ARRAY4:    MVI	L, 206o               ;Load L with address of ARRAY SETUP pointer
 4076/2D7E : 46 A0 02                              CALL	GETCHR             ;Fetch character pointed to by ARRAY SETUP pntr
 4077/2D81 : 3C A9                                 CPI	251o               ;See if character is ")" ? If so, then have located
 4078/2D83 : 68 95 2D                              JZ	ARRAY5             ;End of the subscript. If not, reset
 4079/2D86 : 36 86                                 MVI	L, 206o               ;to the ARRAY SETUP pointer. Increment the
 4080/2D88 : 46 03 03                              CALL	LOOP               ;Pointer and test for the end of the statement line.
 4081/2D8B : 48 7C 2D                              JNZ	ARRAY4             ;If not end of line, continue looking for right paren.
 4082/2D8E : 06 C1                                 MVI	A, 301o               ;If reach end of line before right parenthesis than load
 4083/2D90 : 16 C6                                 MVI	C, 306o               ;ASCII code for letters A and F and display message
 4084/2D92 : 44 96 02                              JMP	ERROR              ;Indicating Array Forrnat (AF) error condition
 4085/2D95 : 36 86                      ARRAY5:    MVI	L, 206o               ;Load L with address of ARRAY SETUP pointer
 4086/2D97 : CF                                    MOV	B,M                    ;Fetch pointer (pointing to ")"sign) into register B
 4087/2D98 : 09                                    DCR	B                    ;Decrement it to move back to end of subscript number
 4088/2D99 : 36 BF                                 MVI	L, 277o               ;Load L with address of EVAL FINISH pointer location
 4089/2D9B : F9                                    MOV	M,B                    ;Place the pointer value in the EVAL FINISH pointer
 4090/2D9C : 36 87                                 MVI	L, 207o               ;Load L with address of LOOP COUNTER
 4091/2D9E : 3E 00                                 MVI	M, 000                ;Initialize LOOP COUNTER to value of zero
 4092/2DA0 : 36 87                      ARRAY6:    MVI	L, 207o               ;Load L with address of LOOP COUNTER
 4093/2DA2 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of LOOP COUNTER
 4094/2DA4 : CF                                    MOV	B,M                    ;Fetch the counter value
 4095/2DA5 : 08                                    INR	B                    ;Increment it
 4096/2DA6 : F9                                    MOV	M,B                    ;Restore the counter value to memory
 4097/2DA7 : 16 02                                 MVI	C, 002                ;Set up counter in register C for future ops
 4098/2DA9 : 36 4C                                 MVI	L, 114o               ;Load L with address of start of ARRAY VARIABLES
 4099/2DAB : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Table less four). Set H to page of the table.
 4100/2DAD : 46 98 07                              CALL	TABADR             ;Calculate the address of next entry in the table
 4101/2DB0 : 26 50                                 MVI	E, 120o               ;Load register E with starting address of SYMBOL BUFF
 4102/2DB2 : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Set D to page of SYMBOL BUFFER
 4103/2DB4 : 46 DA 02                              CALL	STRCP              ;Compare entry in table against contents of SYMBOL BF
 4104/2DB7 : 68 CA 2D                              JZ	ARRAY7             ;If match, have found array naine in the table.
 4105/2DBA : 36 87                                 MVI	L, 207o               ;Else, set L to address of the LOOP COUNTER
 4106/2DBC : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of the LOOP COUNTER
 4107/2DBE : C7                                    MOV	A,M                    ;Fetch the counter value to the ACC
 4108/2DBF : 36 3D                                 MVI	L, 075o               ;Change L to the counter containing number of arrays
 4109/2DC1 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to the proper page
 4110/2DC3 : BF                                    CMP	M                    ;Compare number of arrays to count in LOOP CNTR
 4111/2DC4 : 48 A0 2D                              JNZ	ARRAY6             ;If more entries in the table, continue looking for match
 4112/2DC7 : 44 7A 07                              JMP	FAERR              ;If no matching name in table then have an error condx.
 4113/2DCA : 46 94 03                   ARRAY7:    CALL	EVAL               ;Call subroutine to evaluate subscript expression
 4114/2DCD : 46 00 10                              CALL	FPFIX              ;Convert the subscript value obtained to fixed forrnat
 4115/2DD0 : 36 87                                 MVI	L, 207o               ;Load L with address of LOOP COUNTER
 4116/2DD2 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of the LOOP COUNTER
 4117/2DD4 : CF                                    MOV	B,M                    ;Fetch the value in the LOOP COUNTER into the ACC
 4118/2DD5 : 16 02                                 MVI	C, 002                ;Set up counter in register C future ops
 4119/2DD7 : 36 4C                                 MVI	L, 114o               ;Load L with address of ARRAY VARIABLES
 4120/2DD9 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Table less four). Set H to page of the table.
 4121/2DDB : 46 98 07                              CALL	TABADR             ;Calculate the address of entry in the table
 4122/2DDE : 30                                    INR	L                    ;Advance the ARRAY VARIABLES table pointer twice
 4123/2DDF : 30                                    INR	L                    ;To advance pointer over array name.
 4124/2DE0 : D7                                    MOV	C,M                    ;Fetch array base address in ARRAY VALUES table
 4125/2DE1 : 36 54                                 MVI	L, 124o               ;Load L with address of subscript value
 4126/2DE3 : 2E 01                                 MVI	H,PG01 ;\HB\OLDPG1    ;** Set H to page of subscript value
 4127/2DE5 : C7                                    MOV	A,M                    ;Fetch the subscript value into the accumulator
 4128/2DE6 : 14 01                                 SUI	001                ;Subtract one from subscript value to allow for zero
 4129/2DE8 : 02                                    RLC                    ;Origin. Now multiply by four
 4130/2DE9 : 02                                    RLC                    ;Using rotates (number of bytes required for each entry
 4131/2DEA : 82                                    ADD	C                    ;In the ARRAY VALUES table). Add in base address to
 4132/2DEB : 36 84                                 MVI	L, 204o               ;The calculated value to form final address in the
 4133/2DED : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** ARRAY VALUES table. Now set H & L to TEMP
 4134/2DEF : F8                                    MOV	M,A                    ;ARRAY ELEMENT storage location & store the addr.
 4135/2DF0 : 36 81                                 MVI	L, 201o               ;Change L to point to ARRAY FLAG
 4136/2DF2 : 3E FF                                 MVI	M, 377o               ;Set the ARRAY FLAG for future use
 4137/2DF4 : 07                                    RET                    ;Exit to calling routine
 4138/2DF5 :                            
 4139/2DF5 :                            
 4140/2DF5 :                            ;;; The label DIM SHOULD START AT 55 365 2df5h
 4141/2DF5 : 46 AD 02                   DIM:       CALL	CLESYM             ;Initialize the SYMBOL BUFFER to cleared condition
 4142/2DF8 : 36 82                                 MVI	L, 202o               ;Load L with address of SCAN pointer
 4143/2DFA : CF                                    MOV	B,M                    ;Fetch SCAN pointer value into register B
 4144/2DFB : 08                                    INR	B                    ;Add one to the SCAN pointer value
 4145/2DFC : 36 83                                 MVI	L, 203o               ;Change L to DIM pointer (formerly TOKEN) storage
 4146/2DFE : F9                                    MOV	M,B                    ;Store the updated SCAN pointer as the DIM pointer
 4147/2DFF : 36 83                      DIM1:      MVI	L, 203o               ;Load L with the address of DIM pointer storage location
 4148/2E01 : 46 A0 02                              CALL	GETCHR             ;Fetch a character from the line input buffer
 4149/2E04 : 68 0F 2E                              JZ	DIM2               ;If character fetched is a space, ignore it
 4150/2E07 : 3C A8                                 CPI	250o               ;Else see if character is "(" left parenthesis
 4151/2E09 : 68 1A 2E                              JZ	DIM3               ;If so, should have ARRAY VARIABLE naine in buffer
 4152/2E0C : 46 C8 02                              CALL	CONCTS             ;If not, append the character to the SYMBOL BUFFER
 4153/2E0F : 36 83                      DIM2:      MVI	L, 203o               ;Load L with the address of DIM pointer stomge location
 4154/2E11 : 46 03 03                              CALL	LOOP               ;Increment the pointer and see if end of line
 4155/2E14 : 48 FF 2D                              JNZ	DIM1               ;If not end of line, fetch next character
 4156/2E17 : 44 DF 2E                              JMP	DIMERR             ;Else have a DIMension error condition
 4157/2E1A : 36 86                      DIM3:      MVI	L, 206o               ;Load L with address of ARRAY pointer storage loc
 4158/2E1C : 3E 00                                 MVI	M, 000                ;Initialize ARRAY pointer to starting value of zero
 4159/2E1E : 36 86                      DIM4:      MVI	L, 206o               ;Load L with address of ARRAY pointer storage loc
 4160/2E20 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of ARRAY pointer storage location
 4161/2E22 : C7                                    MOV	A,M                    ;Fetch value in ARRAY pointer to ACC (effectively
 4162/2E23 : 02                                    RLC                    ;Represents number of arrays defined in pgm). Rotate
 4163/2E24 : 02                                    RLC                    ;Left twice to multiply by four (niunber of bytes per
 4164/2E25 : 04 4C                                 ADI	114o               ;entry in ARRAY VARIABLES table). Add to base
 4165/2E27 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Address to form pointer to ARRAY VARIA.BLES
 4166/2E29 : F0                                    MOV	L,A                    ;Table and set up H & L as the memory pointer.
 4167/2E2A : 26 50                                 MVI	E, 120o               ;Load E with starting address of the SYMBOL BUFFER
 4168/2E2C : 1E 16                                 MVI	D,PG26 ;\HB\OLDPG26   ;** Load D with the page address of the SYMBOL BUFF
 4169/2E2E : 46 DA 02                              CALL	STRCP              ;Compare contents of SYMBOL BF to entry in ARRAY
 4170/2E31 : 68 C1 2E                              JZ	DIM9               ;VARIABLES table. If same, have duplicate array name.
 4171/2E34 : 36 86                                 MVI	L, 206o               ;Else, load L with address of ARRAY pointer storage
 4172/2E36 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of ARRAY pointer storage
 4173/2E38 : CF                                    MOV	B,M                    ;Fetch the ARRAY pointer value to register B
 4174/2E39 : 08                                    INR	B                    ;Increment the value
 4175/2E3A : F9                                    MOV	M,B                    ;Restore it to ARRAY pointer storage location
 4176/2E3B : 36 3D                                 MVI	L, 075o               ;Change L to number of arrays storage location
 4177/2E3D : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to page of the number of arrays stomge loc
 4178/2E3F : C7                                    MOV	A,M                    ;Fetch the number of arrays value to the ACC
 4179/2E40 : 09                                    DCR	B                    ;Restore B to previous count
 4180/2E41 : B9                                    CMP	B                    ;Compare number of arrays tested against nr defined
 4181/2E42 : 48 1E 2E                              JNZ	DIM4               ;If not equal, continue searching ARRAY VARIABLES
 4182/2E45 : 36 3D                                 MVI	L, 075o               ;Table. When table searched with no match, then must
 4183/2E47 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Append naine to table. First set pointer to number
 4184/2E49 : CF                                    MOV	B,M                    ;Of arrays storage location. Fetch that value and
 4185/2E4A : 08                                    INR	B                    ;Add one to account for new name being added.
 4186/2E4B : F9                                    MOV	M,B                    ;Restore the updated value back to memory.
 4187/2E4C : 36 3E                                 MVI	L, 076o               ;Change pointer to ARRAY TEMP pointer storage
 4188/2E4E : F9                                    MOV	M,B                    ;Store pointer to current array in ARRAY TEMP too.
 4189/2E4F : 36 86                                 MVI	L, 206o               ;Load L with address of ARRAY pointer stomge loc.
 4190/2E51 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of ARRAY pointer storage location
 4191/2E53 : F9                                    MOV	M,B                    ;And update it also for new array being added.
 4192/2E54 : C7                                    MOV	A,M                    ;Fetch the current ARRAY pointer value to the ACC
 4193/2E55 : 02                                    RLC                    ;Multiply it times four by performing two rotate left
 4194/2E56 : 02                                    RLC                    ;Operations and add it to base value to form address in
 4195/2E57 : 04 4C                                 ADI	114o               ;The ARRAY VARIABLES table. Place the low part
 4196/2E59 : E0                                    MOV	E,A                    ;Of this calculated address value into register E.
 4197/2E5A : 1E 17                                 MVI	D,PG27 ;\HB\OLDPG27   ;** Set register D to the page of the table.
 4198/2E5C : 36 50                                 MVI	L, 120o               ;Load L with the start of the SYMBOL BUFFER
 4199/2E5E : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with the page of the SYMBOL BUFFER
 4200/2E60 : 46 26 0A                              CALL	MOVEC              ;Move the array name from the SYMBOL BUFFER to
 4201/2E63 : 46 AD 02                              CALL	CLESYM             ;The ARRAY VARIABLES table. Then clear the
 4202/2E66 : 36 83                                 MVI	L, 203o               ;SYMBOL BUFFER. Reset L to the DIM pointer storage
 4203/2E68 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Location. Set H to the DIM pointer page.
 4204/2E6A : CF                                    MOV	B,M                    ;Fetch the pointer value (points to "(" part of DIM
 4205/2E6B : 08                                    INR	B                    ;Statement). Increment the pointer to next character in
 4206/2E6C : 36 84                                 MVI	L, 204o               ;The line input buffer. Cbange L to DIMEN pointer.
 4207/2E6E : F9                                    MOV	M,B                    ;Store the updated DIM pointer in DIMEN storage loc.
 4208/2E6F : 36 84                      DIM5:      MVI	L, 204o               ;Set L to DIMEN pointer storage location
 4209/2E71 : 46 A0 02                              CALL	GETCHR             ;Fetch character in line input buffer
 4210/2E74 : 68 89 2E                              JZ	DIM6               ;Ignore character for space
 4211/2E77 : 3C A9                                 CPI	251o               ;If not space, see if character is right parenthesis
 4212/2E79 : 68 94 2E                              JZ	DIM7               ;If yes, process DIMension size (array length)
 4213/2E7C : 3C B0                                 CPI	260o               ;If not, see if character is a valid decimal number
 4214/2E7E : 70 DF 2E                              JM	DIMERR             ;If not valid number, have DIMension error condition
 4215/2E81 : 3C BA                                 CPI	272o               ;Continue testing for valid decitnal number
 4216/2E83 : 50 DF 2E                              JP	DIMERR             ;If not valid number, then DIMension error condition
 4217/2E86 : 46 C8 02                              CALL	CONCTS             ;If valid decirnal number, append digit to SYMBOL BF
 4218/2E89 : 36 84                      DIM6:      MVI	L, 204o               ;Set L to DIMEN pointer storage location
 4219/2E8B : 46 03 03                              CALL	LOOP               ;Advance the pointer value and check for end of the line
 4220/2E8E : 48 6F 2E                              JNZ	DIM5               ;If not end of line, continue fetching DIMension size
 4221/2E91 : 44 DF 2E                              JMP	DIMERR             ;If end of line before right parenthesis, have error condx.
 4222/2E94 : 36 50                      DIM7:      MVI	L, 120o               ;Load L with address of start of SYMBOL BUFFER
 4223/2E96 : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Load H with page of SYMBOL BUFFER. (Now
 4224/2E98 : 46 24 13                              CALL	DINPUT             ;Contains DIMension size.) Convert buffer to floating
 4225/2E9B : 46 00 10                              CALL	FPFIX              ;Point number and then reformat to fixed point.
 4226/2E9E : 36 54                                 MVI	L, 124o               ;Load L with address of LSW of fixed point number
 4227/2EA0 : C7                                    MOV	A,M                    ; And fetch the low order byte of the nr into the ACC
 4228/2EA1 : 02                                    RLC                    ;Rotate it left two tirnes to multiply it by four (the
 4229/2EA2 : 02                                    RLC                    ;Number of bytes required to store a floating point nr).
 4230/2EA3 : D0                                    MOV	C,A                    ;Store this value in CPU register C temporarily
 4231/2EA4 : 36 3E                                 MVI	L, 076o               ;Set L to ARRAY TEMP storage location.
 4232/2EA6 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;** Set H to ARRAY TEMP pointer page.
 4233/2EA8 : C7                                    MOV	A,M                    ;Fetch the value in ARRAY TEMP (points to ARRAY
 4234/2EA9 : 14 01                                 SUI	001                ;VARIABLES table). Subtract one from the pointer
 4235/2EAB : 02                                    RLC                    ;Value and multiply the result by four using rotate left
 4236/2EAC : 02                                    RLC                    ;Instructions. Add this value to a base address
 4237/2EAD : 04 52                                 ADI	122o               ;(Augmented by two) to point to ARRAY VALUES
 4238/2EAF : F0                                    MOV	L,A                    ;Pointer storage location in the ARRAY VARIABLES
 4239/2EB0 : 2E 17                                 MVI	H,PG27 ;\HB\OLDPG27   ;Table and set the pointer up in registers H & L.
 4240/2EB2 : CF                                    MOV	B,M                    ;Fetch the starting address in the ARRAY VALUES
 4241/2EB3 : 04 04                                 ADI	004                ;Table for the previous array into register B. Now add
 4242/2EB5 : F0                                    MOV	L,A                    ;Four to the ARRAY VARIABLES table pointer to
 4243/2EB6 : C1                                    MOV	A,B                    ;Point to curront ARRAY VALUES starting address.
 4244/2EB7 : 82                                    ADD	C                    ;Add the previous array starting address plus number of
 4245/2EB8 : F8                                    MOV	M,A                    ;Bytes required and store as starting loc for next array
 4246/2EB9 : 36 84                      DIM8:      MVI	L, 204o               ;Set L to address of DIMEN pointer storage location
 4247/2EBB : 2E 16                                 MVI	H,PG26 ;\HB\OLDPG26   ;** Set H to page of DIMEN pointer
 4248/2EBD : CF                                    MOV	B,M                    ;Fetch pointer value (points to ") " in line)
 4249/2EBE : 36 83                                 MVI	L, 203o               ;Change L to DIM pointer storage location
 4250/2EC0 : F9                                    MOV	M,B                    ;Store former DIMEN value back in DIM pointer
 4251/2EC1 : 36 83                      DIM9:      MVI	L, 203o               ;Load L with address of DIM pointer storage location
 4252/2EC3 : 46 A0 02                              CALL	GETCHR             ;Fetch a character from the line input buffer
 4253/2EC6 : 3C AC                                 CPI	254o               ;See if character is a comma (,) sign
 4254/2EC8 : 68 D6 2E                              JZ	DIM10              ;If yes, have another array being defined on the line
 4255/2ECB : 36 83                                 MVI	L, 203o               ;If not, reset L to the DIM pointer
 4256/2ECD : 46 03 03                              CALL	LOOP               ;Increment the pointer and see if end of the line
 4257/2ED0 : 48 C1 2E                              JNZ	DIM9               ;If not end of the line, keep looking for a comma
 4258/2ED3 : 44 4E 0B                              JMP	NXTLIN             ;Else exit the DIM statement routine to continue pgm
 4259/2ED6 : 36 83                      DIM10:     MVI	L, 203o               ;Set L to DIM pointer storage location
 4260/2ED8 : CF                                    MOV	B,M                    ;Fetch pointer value (points to comma sign just found)
 4261/2ED9 : 36 82                                 MVI	L, 202o               ;Load L with address of SCAN pointer storage location
 4262/2EDB : F9                                    MOV	M,B                    ;Place DIM pointer into the-SCAN pointer
 4263/2EDC : 44 F5 2D                              JMP	DIM                ;Continue processing DIM statement line for next array
 4264/2EDF : 06 C4                      DIMERR:    MVI	A, 304o               ;On error condition, load ASCII code for letter D in ACC
 4265/2EE1 : 16 C5                                 MVI	C, 305o               ;And ASCII code for letter E in CPU register C
 4266/2EE3 : 44 96 02                              JMP	ERROR              ;Go display the Dirnension Error (DE) message.
 4267/2EE6 :                            
 4268/2EE6 :                            ;##################################################################################################
 4269/2EE6 :                            
 4270/2EE6 : =0H                        IN_STATUS	EQU 	00
 4271/2EE6 : =1H                        IN_DATA		EQU	01
 4272/2EE6 : =10H                       OUT_DATA	EQU 	10H
 4273/2EE6 :                            
 4274/3000 :                            		ORG	3000H
 4275/3000 :                            
 4276/3000 : 40                         OPN:		DB	OPN_MSG1 - OPN_MSG
 4277/3001 : 46 61 73 74 65 72 20 53 43 OPN_MSG:	DB	"Faster SCELBAL (2012)",0dh,0ah
      300A : 45 4C 42 41 4C 20 28 32 30
      3013 : 31 32 29 0D 0A            
 4278/3018 : 49 4F 20 61 6E 64 20 73 74 		DB	"IO and start up routine by Gazelle 2025",0dh,0ah
      3021 : 61 72 74 20 75 70 20 72 6F
      302A : 75 74 69 6E 65 20 62 79 20
      3033 : 47 61 7A 65 6C 6C 65 20 32
      303C : 30 32 35 0D 0A            
 4279/3041 : 00                         OPN_MSG1:	DB	0
 4280/3042 :                            
 4281/3042 :                            START3000:
 4282/3042 : =>FALSE                     IF FOR8080
 4283/3042 :                            		LXI	SP,4000H
 4284/3042 :                            		LHLD	1
 4285/3042 :                            		LXI	B,3
 4286/3042 :                            		DAD	B
 4287/3042 :                            		SHLD	CIN_ST+1
 4288/3042 :                            		DAD	B
 4289/3042 :                            		SHLD	CIN_IN+1
 4290/3042 :                            		DAD	B
 4291/3042 :                            		SHLD	CIN_OUT+1
 4292/3042 :                            		SHLD	CP_1+1
 4293/3042 :                            		SHLD	CP_2+1
 4294/3042 :                            		SHLD	CP_3+1
 4295/3042 : [4282]                      ENDIF
 4296/3042 : 2E 30                      		MVI	H,30H
 4297/3044 : 36 00                      		MVI	L,00H
 4298/3046 : 46 51 03                   		CALL	TEXTC
 4299/3049 : 2E 01                      		MVI	H,1
 4300/304B : A8                         		XRA	A
 4301/304C : F0                         		MOV	L,A
 4302/304D : F8                         		MOV	M,A
 4303/304E : 30                         		INR	L
 4304/304F : F8                         		MOV	M,A
 4305/3050 : 30                         		INR	L
 4306/3051 : F8                         		MOV	M,A
 4307/3052 : 44 0A 09                   		JMP	ENTRY_SCR
 4308/3055 :                            ;---------------------------------------------------------------------
 4309/3055 :                            ;;; no user defined functions yet, stop here if we see one.
 4310/3055 : 07                         UDEFX:		RET
 4311/3056 :                            
 4312/3056 :                            ;##################################################################################################
 4313/3056 :                            ;
 4314/3056 :                            ;		HARDWARE DEPENDENT ROUTINE
 4315/3056 :                            ;
 4316/3056 : =>TRUE                      IF		FOR8008
 4317/3056 :                            SAVE:
 4318/3056 : 7F                         LOAD:		OUT	1FH	; Exit from emulator.
 4319/3057 : [4316]                      ENDIF
 4320/3057 :                            
 4321/3057 : =>FALSE                     IF		FOR8080
 4322/3057 :                            SAVE:
 4323/3057 :                            LOAD:		JMP	0	; Exit from emulator.(reboot CP/M)
 4324/3057 : [4321]                      ENDIF
 4325/3057 :                            
 4326/3057 :                            ;;; HERE IS THE USER DEFINED CHARACTER INPUT TO READ FROM SERIAL PORT
 4327/3057 :                            
 4328/3057 : =>TRUE                      IF		FOR8008
 4329/3057 :                            
 4330/3057 : 43                         CINP:		IN	IN_DATA
 4331/3058 : 3C 08                      		CPI	08H
 4332/305A : 68 61 30                   		JZ	CINP_BS
 4333/305D : 61                         		OUT	OUT_DATA
 4334/305E : 34 80                      		ORI	80H
 4335/3060 : 07                         		RET
 4336/3061 :                            
 4337/3061 : 06 FF                      CINP_BS:	MVI	A,0FFH
 4338/3063 : 07                         		RET
 4339/3064 : [4328]                      ENDIF
 4340/3064 :                            
 4341/3064 : =>FALSE                     IF		FOR8080
 4342/3064 :                            CINP:
 4343/3064 :                            		PUSH	B
 4344/3064 :                            		PUSH	D
 4345/3064 :                            		PUSH	H
 4346/3064 :                            CINP0:
 4347/3064 :                            CIN_ST:		CALL	0FA06H
 4348/3064 :                            		ANA	A
 4349/3064 :                            		JZ	CINP0
 4350/3064 :                            CIN_IN:		CALL	0FA09H
 4351/3064 :                            		CPI	08H
 4352/3064 :                            		JZ	CINP_BS
 4353/3064 :                            		PUSH	PSW
 4354/3064 :                            		MOV	C,A
 4355/3064 :                            CIN_OUT		CALL	0FA0CH
 4356/3064 :                            		POP	PSW
 4357/3064 :                            		ORI	80H
 4358/3064 :                            		POP	H
 4359/3064 :                            		POP	D
 4360/3064 :                            		POP	B
 4361/3064 :                            		RET
 4362/3064 :                            
 4363/3064 :                            CINP_BS:	MVI	A,0FFH
 4364/3064 :                            		POP	H
 4365/3064 :                            		POP	D
 4366/3064 :                            		POP	B
 4367/3064 :                            		RET
 4368/3064 : [4341]                      ENDIF
 4369/3064 :                            ;---------------------------------------------------------------------
 4370/3064 :                            ;;; HERE IS THE USER DEFINED PRINT ROUTINE FOR A SERIAL PORT
 4371/3064 :                            
 4372/3064 : =>TRUE                      IF		FOR8008
 4373/3064 :                            CPRINT:
 4374/3064 : 3C DC                      		CPI	0DCH
 4375/3066 : 68 7C 30                   		JZ	CP_BS
 4376/3069 : 24 7F                      		ANI	7Fh
 4377/306B : 3C 0D                      		CPI	0DH
 4378/306D : 68 7A 30                   		JZ	CP_OK
 4379/3070 : 3C 0A                      		CPI	0AH
 4380/3072 : 68 7A 30                   		JZ	CP_OK
 4381/3075 : 3C 20                      		CPI	20H
 4382/3077 : 60 7B 30                   		JC	CP_NO
 4383/307A : 61                         CP_OK:		OUT	OUT_DATA
 4384/307B : 07                         CP_NO:		RET
 4385/307C :                            
 4386/307C : 06 08                      CP_BS:		MVI	A,08H
 4387/307E : 61                         		OUT	OUT_DATA
 4388/307F : 06 20                      		MVI	A,20H
 4389/3081 : 61                         		OUT	OUT_DATA
 4390/3082 : 06 08                      		MVI	A,08H
 4391/3084 : 61                         		OUT	OUT_DATA
 4392/3085 : 07                         		RET
 4393/3086 : [4372]                      ENDIF
 4394/3086 :                            
 4395/3086 : =>FALSE                     IF		FOR8080
 4396/3086 :                            CPRINT:
 4397/3086 :                            		PUSH	PSW
 4398/3086 :                            		PUSH	B
 4399/3086 :                            		PUSH	D
 4400/3086 :                            		PUSH	H
 4401/3086 :                            		CPI	0DCH
 4402/3086 :                            		JZ	CP_BS
 4403/3086 :                            		ANI	7Fh
 4404/3086 :                            		CPI	0DH
 4405/3086 :                            		JZ	CP_OK
 4406/3086 :                            		CPI	0AH
 4407/3086 :                            		JZ	CP_OK
 4408/3086 :                            		CPI	20H
 4409/3086 :                            		JC	CP_NO
 4410/3086 :                            CP_OK:		MOV	C,A
 4411/3086 :                            CP_1:		CALL	0FA0CH
 4412/3086 :                            CP_NO:		POP	H
 4413/3086 :                            		POP	D
 4414/3086 :                            		POP	B
 4415/3086 :                            		POP	PSW
 4416/3086 :                            		RET
 4417/3086 :                            
 4418/3086 :                            CP_BS:		MVI	C,08H
 4419/3086 :                            CP_2:		CALL	0FA0CH
 4420/3086 :                            		MVI	C,20H
 4421/3086 :                            CP_3:		CALL	0FA0CH
 4422/3086 :                            		MVI	C,08H
 4423/3086 :                            		JMP	CP_1
 4424/3086 :                            
 4425/3086 : [4395]                      ENDIF
 4426/3086 :                            ;------------------------------------------------------------------------
 4427/3086 :                            
 AS V1.42 Beta [Bld 271] - Source File sc1.asm - Page 3 - 6/5/2025 19:34:55


  Symbol Table (* = unused):
  --------------------------

 ABSX :                                   7E6 C |  ACCSET :                                1076 C |
 ACNONZ :                                1063 C |  ACZERT :                                1050 C |
 AD4DE :                                  6AE C |  ADBDE :                                 0AC5 C |
 ADDER :                                 1257 C | *ADDEXP :                                1129 C |
 ADDMOR :                                1258 C |  ADOPPP :                                11B8 C |
 ADV :                                    2FF C |  ADVDE :                                 0B34 C |
 AHEAD1 :                                1490 C |  AHEAD2 :                                15DB C |
*ARCHITECTURE :          "i386-unknown-win32" - |  ARRAY :                                 2D65 C |
 ARRAY1 :                                2D6B C |  ARRAY2 :                                2D70 C |
 ARRAY3 :                                2D72 C |  ARRAY4 :                                2D7C C |
 ARRAY5 :                                2D95 C |  ARRAY6 :                                2DA0 C |
 ARRAY7 :                                2DCA C |  BACKSP :                                198F C |
 BGNPGRAM :                                1B - |  BIGERR :                                 292 C |
*BRING1 :                                1107 C | *CASESENSITIVE :                            0 - |
 CFALSE :                                 6A7 C |  CHRX :                                   7FF C |
 CINP :                                  3057 C |  CINPUT :                                 391 C |
 CINP_BS :                               3061 C |  CKDECP :                                155F C |
*CKEQEX :                                10A2 C |  CKSIGN :                                1176 C |
 CLESYM :                                 2AD C |  CLRNEX :                                117D C |
 CLRNX1 :                                1187 C |  CLRNX2 :                                132D C |
 CLRNX3 :                                1337 C | *CLROPL :                                1183 C |
 COMPEN :                                1508 C |  COMPLM :                                1268 C |
 CONCT1 :                                 2CC C | *CONCTA :                                 2B4 C |
 CONCTE :                                 2D7 C |  CONCTN :                                 2BE C |
 CONCTS :                                 2C8 C | *CONSTPI :                  3.141592653589793 - |
 CONTIN :                                0A3B C |  CPHLDE :                                0ABF C |
 CPRINT :                                3064 C |  CP_BS :                                 307C C |
 CP_NO :                                 307B C |  CP_OK :                                 307A C |
 CRLF :                                   361 C |  CROUND :                                11C7 C |
 CTRLC :                                 0ACB C |  CTRUE :                                  6A2 C |
*DATE :                            "6/5/2025" - |  DEC :                                    374 C |
 DECBIN :                                142E C |  DECEXD :                                14DE C |
 DECEXT :                                14BF C |  DECNO :                                  37A C |
 DECOUT :                                14F0 C |  DECRDG :                                154A C |
 DECREP :                                14D7 C |  DIM :                                   2DF5 C |
 DIM1 :                                  2DFF C |  DIM10 :                                 2ED6 C |
 DIM2 :                                  2E0F C |  DIM3 :                                  2E1A C |
 DIM4 :                                  2E1E C |  DIM5 :                                  2E6F C |
 DIM6 :                                  2E89 C |  DIM7 :                                  2E94 C |
*DIM8 :                                  2EB9 C |  DIM9 :                                  2EC1 C |
 DIMERR :                                2EDF C |  DINPUT :                                1324 C |
 DIRECT :                                0B89 C |  DIVIDE :                                11E9 C |
 DVERR :                                 0AEF C |  DVEXIT :                                1238 C |
 DVLOOP :                                 6F2 C |  ECHO :                                   382 C |
 ENDINP :                                13C9 C |  ENDPGRAM :                                2D - |
 ENTRY_SCR :                              90A C |  EQ :                                     65E C |
 ERROR :                                  296 C |  EVAL :                                   394 C |
 EXEC :                                   8B6 C |  EXEC1 :                                  8BD C |
 EXMLDV :                                1166 C |  EXOUTN :                                15D4 C |
 EXPINP :                                13A1 C |  EXPOK :                                 1400 C |
 EXPOUT :                                15C0 C |  FACXOP :                                12BF C |
 FAERR :                                  77A C | *FALSE :                                    0 - |
 FINER1 :                                0AE9 C |  FINERR :                                0AD2 C |
 FININP :                                13D7 C |  FIXERR :                                0AF6 C |
 FLOAD :                                 12A4 C |  FNDEXP :                                1391 C |
 FOR :                                   0F74 C |  FOR1 :                                  0FAA C |
 FOR2 :                                  0FB6 C |  FOR3 :                                  0FC8 C |
 FOR4 :                                  0FD3 C |  FOR5 :                                  19A6 C |
 FOR8008 :                                  1 - |  FOR8080 :                                  0 - |
 FORERR :                                0FA3 C |  FORNXT :                                1851 C |
 FP0 :                                   0F6F C |  FPADD :                                 1089 C |
 FPCOMP :                                1082 C |  FPD10 :                                 141B C |
 FPDIV :                                 11D2 C |  FPFIX :                                 1000 C |
 FPFIXL :                                101B C |  FPFLT :                                 1034 C |
 FPMULT :                                1126 C |  FPNORM :                                1036 C |
 FPONE :                                  6A2 C |  FPOPER :                                 5F4 C |
 FPOUT :                                 1475 C |  FPSUB :                                 111A C |
 FPX10 :                                 1408 C |  FPZERO :                                1029 C |
 FRAC :                                  0CE8 C | *FSHIFT :                                1102 C |
 FSTORE :                                12AD C |  FUNAR1 :                                 74D C |
 FUNAR2 :                                2D2C C |  FUNAR3 :                                2D54 C |
 FUNAR4 :                                 787 C |  FUNARR :                                 740 C |
 GE :                                     68B C |  GETAU0 :                                 989 C |
 GETAU1 :                                 9A2 C |  GETAU2 :                                 9B7 C |
 GETAUX :                                 97F C |  GETCHP :                                0A53 C |
 GETCHR :                                 2A0 C |  GETINP :                                12F5 C |
 GOSERR :                                0EE7 C |  GOSUB :                                 0E9E C |
 GOSUB1 :                                0EAD C |  GOTO :                                  0D7C C |
 GOTO1 :                                 0D89 C |  GOTO2 :                                 0DA0 C |
 GOTO3 :                                 0DA8 C |  GOTO4 :                                 0DB1 C |
 GOTO5 :                                 0DB8 C |  GOTO6 :                                 0DCD C |
 GOTO7 :                                 0DE0 C | *GOTOER :                                0E10 C |
 GT :                                     66B C | *HAS64 :                                    0 - |
 IF :                                    0E17 C |  IF1 :                                   0E42 C |
 IF2 :                                   0E63 C |  IF3 :                                   0E76 C |
 IF4 :                                   0E80 C |  IFERR :                                 0E3B C |
*INCLIN :                                0AAD C |  INDEXB :                                 37C C |
 INDEXC :                                131E C |  INPUT :                                 0EF5 C |
 INPUT1 :                                0EFF C |  INPUT2 :                                0F1F C |
 INPUT3 :                                0F22 C |  INPUT4 :                                0F33 C |
 INPUTN :                                0F60 C |  INPUTX :                                0F44 C |
 INSER1 :                                0A99 C |  INSER3 :                                0AAD C |
 INSERT :                                0A85 C |  INSTR :                                 0B0A C |
 INSTR1 :                                0B0E C |  INSTR2 :                                0B31 C |
 INT1 :                                   7D7 C |  INT2 :                                   7E1 C |
 INTEXP :                                 6B3 C |  INTX :                                   7A3 C |
 IN_DATA :                                  1 - |  IN_DIGIT_CC_L :                           45 - |
*IN_DIGIT_CC_L0 :                         145 C | *IN_STATUS :                                0 - |
 LE :                                     67B C |  LET :                                   0D19 C |
 LET0 :                                  0D0B C |  LET1 :                                  0D22 C |
 LET2 :                                  0D2B C |  LET3 :                                  0D4B C |
 LET4 :                                  0D52 C |  LET5 :                                  0D61 C |
*LETERR :                                0D5A C |  LINEUP :                                10C3 C |
 LIST :                                   8DB C | *LISTON :                                   1 - |
 LOAD :                                  3056 C |  LOOK0 :                                 1054 C |
 LOOKU1 :                                 531 C |  LOOKU2 :                                 549 C |
 LOOKU4 :                                 581 C |  LOOKUP :                                 51B C |
 LOOP :                                   303 C |  LT :                                     651 C |
*MACEXP :                                   7 - |  MINEXP :                                141B C |
*MOMCPU :                               8008E - | *MOMCPUNAME :                       "8008NEW" - |
 MORACC :                                10CB C |  MORCOM :                                126D C |
 MOROP :                                 10D8 C |  MOVEC :                                 0A26 C |
 MOVECP :                                 8B1 C |  MOVEIT :                                110B C |
 MOVEPG :                                0A28 C |  MOVOP :                                 1092 C |
 MROUND :                                11C2 C |  MULOOP :                                 6E1 C |
 MULTIP :                                1136 C |  NE :                                     698 C |
 NEGEXP :                                1A21 C |  NEGFPA :                                11A9 C |
*NESTMAX :                                100 - |  NEXT :                                  180B C |
 NEXT1 :                                 1818 C |  NEXT10 :                                1963 C |
 NEXT11 :                                1978 C |  NEXT12 :                                197F C |
 NEXT2 :                                 1825 C |  NEXT3 :                                 1839 C |
 NEXT4 :                                 1858 C |  NEXT5 :                                 18C0 C |
 NEXT6 :                                 18E9 C |  NEXT7 :                                 1905 C |
 NEXT8 :                                 1917 C |  NEXT9 :                                 1922 C |
 NINPUT :                                134D C |  NODECP :                                156C C |
 NOEXC0 :                                1040 C |  NOEXPO :                                 505 C |
 NOEXPS :                                13A4 C |  NOGO :                                  11FE C |
 NOLIST :                                 8EC C |  NONZAC :                                109D C |
 NOREMD :                                1A2F C |  NOSAME :                                0A05 C |
 NOSCR :                                  939 C |  NOT0 :                                  1308 C |
 NOTDEL :                                 325 C |  NOTEND :                                 9DE C |
 NOTPLM :                                1350 C |  NUMERR :                                0AFD C |
 NXTLIN :                                0B4E C |  OPLOAD :                                12B6 C |
*OPN :                                   3000 C |  OPN_MSG :                               3001 C |
 OPN_MSG1 :                              3041 C |  OPSGNT :                                1198 C |
 OUTDGS :                                1525 C |  OUTDGX :                                1545 C |
 OUTDIG :                                151A C |  OUTFIX :                                14B9 C |
 OUTFLT :                                14AB C |  OUTNEG :                                1487 C |
 OUTRNG :                                2D5E C |  OUTX10 :                                1593 C |
 OUTZER :                                1544 C |  OUT_DATA :                                10 - |
 PARNER :                                 644 C |  PARNUM :                                 4EE C |
 PARSE :                                  599 C |  PARSE1 :                                 5C7 C |
 PARSE2 :                                 5DA C |  PARSEP :                                19C0 C |
 PARSER :                                 4D4 C |  PATCH1 :                                1800 C |
 PATCH2 :                                1AF4 C |  PATCH3 :                                 9C7 C |
 PCOM1 :                                 0D03 C |  PCOMMA :                                0CEF C |
 PERIOD :                                1381 C |  PFPOUT :                                0CCC C |
 PG01 :                                     1 - |  PG26 :                                    16 - |
 PG27 :                                    17 - |  PG57 :                                    2F - |
 POSEXP :                                13F5 C |  PRIGH1 :                                2D00 C |
 PRIGHT :                                 703 C |  PRINT :                                 0BE5 C |
 PRINT1 :                                0BF6 C |  PRINT2 :                                0C02 C |
 PRINT3 :                                0C23 C |  PRINT4 :                                0C3D C |
*PRINT5 :                                0C4C C |  PRINT6 :                                0C55 C |
 PUSHIT :                                1559 C |  QUOROT :                                11FF C |
 QUOTE :                                 0C83 C |  QUOTE1 :                                0C90 C |
 QUOTE2 :                                0CB3 C | *QUOTER :                                0CA6 C |
*RELAXED :                                  0 - |  REMOV1 :                                0A77 C |
 REMOVE :                                0A64 C |  RESIGN :                                107D C |
 RESTHL :                                12DF C |  RESTSY :                                 8AA C |
 RETERR :                                0EEE C |  RETURN :                                0EC4 C |
 RNDX :                                  1AA0 C |  ROTATL :                                127F C |
 ROTATR :                                1289 C |  ROTL :                                  1280 C |
 ROTR :                                  128A C |  RUN :                                   0B38 C |
 SAMLIN :                                0B6E C |  SAVE :                                  3056 C |
 SAVEHL :                                12CF C |  SAVESY :                                 8A0 C |
 SCAN1 :                                  3AC C |  SCAN10 :                                 4C1 C |
 SCAN11 :                                 463 C |  SCAN12 :                                 486 C |
 SCAN13 :                                 4A9 C |  SCAN14 :                                 4B0 C |
 SCAN15 :                                 4B7 C |  SCAN16 :                                 4BE C |
 SCAN2 :                                  3C0 C |  SCAN3 :                                  3E5 C |
 SCAN4 :                                  3EF C |  SCAN5 :                                  3FB C |
 SCAN6 :                                  407 C |  SCAN7 :                                  41B C |
 SCAN8 :                                  434 C |  SCAN9 :                                  440 C |
 SCANFN :                                 3E9 C |  SCRLOP :                                 930 C |
*SETDCT :                                11E5 C |  SETIT :                                 12BA C |
*SETMCT :                                1132 C |  SETSUB :                                1241 C |
 SGNX :                                   7F0 C |  SHACOP :                                10E1 C |
 SHIFT0 :                                10D7 C |  SHLOOP :                                10FC C |
 SKPNEG :                                10B4 C |  SQR1 :                                  1A76 C |
 SQRCNV :                                1A83 C |  SQRERR :                                1A8F C |
 SQREXP :                                1A32 C |  SQRLOP :                                1A47 C |
 SQRX :                                  1A00 C |  START3000 :                             3042 C |
 STOSY1 :                                 840 C |  STOSY2 :                                 856 C |
 STOSY3 :                                 86E C |  STOSY5 :                                 897 C |
 STOSYM :                                 82D C |  STRCP :                                  2DA C |
 STRCPC :                                 2F8 C |  STRCPE :                                 2EE C |
 STRCPL :                                 2E4 C |  STRIN :                                  30C C |
 STRIN1 :                                 30E C |  STRINF :                                 342 C |
 SUB12 :                                 15E1 C |  SUBBER :                                1293 C |
*SUBEXP :                                11DC C |  SUBHL :                                  34B C |
 SUBTRA :                                1294 C |  SWITCH :                                12EE C |
 SYNERR :                                 96A C |  SYNTAX :                                 200 C |
 SYNTOK :                                 971 C |  SYNTX1 :                                 20D C |
 SYNTX2 :                                 224 C |  SYNTX3 :                                 231 C |
 SYNTX4 :                                 237 C |  SYNTX5 :                                 25C C |
 SYNTX6 :                                 254 C |  SYNTX7 :                                 288 C |
 SYNTX8 :                                 28D C |  SYNTXL :                                 267 C |
 TAB1 :                                   812 C |  TABAD1 :                                 799 C |
 TABADR :                                 798 C | *TABC :                                   822 C |
 TABLOP :                                 825 C |  TABX :                                   80F C |
 TEXTC :                                  351 C |  TEXTCL :                                 355 C |
*TIME :                            "19:34:55" - |  TOMUCH :                                15EB C |
*TRUE :                                     1 - |  UDEFX :                                 3055 C |
*VERSION :                               142F - | *Z80SYNTAX :                                0 - |
 ZERO :                                  0CDE C |  ZERODG :                                1575 C |

    412 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 271] - Source File sc1.asm - Page 4 - 6/5/2025 19:34:55


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.16 seconds assembly time

   4427 lines source file
      2 passes
      0 errors
      0 warnings
